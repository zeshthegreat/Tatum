"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScriptResolver = void 0;
const unicode_1 = require("./regexes/unicode");
class ScriptResolver {
    constructor(url) {
        this.resolvedScripts = Object.entries(unicode_1.scripts)
            .filter(script => {
            return script[1].test(url);
        })
            .reduce((previousValue, currentValue) => {
            return Object.assign(Object.assign({}, previousValue), { [currentValue[0]]: true });
        }, {});
    }
    singleScript() {
        if (Object.keys(this.resolvedScripts).length === 1) {
            return true;
        }
        // any of these combinations are considered a "singleScript".
        const scriptCombinations = [
            // common, bopomofo, han
            ['common', 'bopomofo'],
            ['common', 'han'],
            ['common', 'bopomofo', 'han'],
            ['bopomofo', 'han'],
            // common, katakana, hiragana, katakana, han
            ['common', 'katakana'],
            ['common', 'hiragana'],
            ['common', 'katakana', 'hiragana'],
            ['katakana', 'hiragana'],
            ['common', 'han'],
            ['common', 'katakana', 'han'],
            ['katakana', 'han'],
            ['common', 'hiragana', 'han'],
            ['common', 'katakana', 'hiragana', 'han'],
            ['katakana', 'hiragana', 'han'],
            ['hiragana', 'han'],
            // common, han, hangul
            ['common', 'han'],
            ['common', 'hangul'],
            ['common', 'han', 'hangul'],
            ['han', 'hangul'],
        ];
        return scriptCombinations.some(combination => combination.every(scriptName => this.resolvedScripts.hasOwnProperty(scriptName)));
    }
}
exports.ScriptResolver = ScriptResolver;
//# sourceMappingURL=script-resolver.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.emoji = exports.unassigned = exports.surrogate = exports.privateUse = exports.format = exports.control = exports.other = exports.otherPunctuation = exports.connectorPunctuation = exports.finalPunctuation = exports.initialPunctuation = exports.closePunctuation = exports.openPunctuation = exports.dashPunctuation = exports.punctuation = exports.otherNumber = exports.letterNumber = exports.decimalDigitNumber = exports.number = exports.otherSymbol = exports.modifierSymbol = exports.currencySymbol = exports.mathSymbol = exports.symbol = exports.paragraphSeparator = exports.lineSeparator = exports.spaceSeparator = exports.separator = exports.enclosingMark = exports.nonSpacingMark = exports.mark = exports.otherLetter = exports.modifiedLetter = exports.casedLetter = exports.titlecaseLetter = exports.uppercaseLetter = exports.lowercaseLetter = exports.letter = void 0;
const emoji_regex_1 = require("emoji-regex");
const xregexp_1 = require("xregexp");
exports.letter = xregexp_1.default('\\p{Letter}'); // any kind of letter from any language.
exports.lowercaseLetter = xregexp_1.default('\\p{Lowercase_Letter}'); // a lowercase letter that has an uppercase variant.
exports.uppercaseLetter = xregexp_1.default('\\p{Uppercase_Letter}'); // an uppercase letter that has a lowercase variant.
exports.titlecaseLetter = xregexp_1.default('\\p{Titlecase_Letter}'); // a letter that appears at the start of a word when only the first letter of the word is capitalized.
exports.casedLetter = xregexp_1.default('\\p{Cased_Letter}'); // a letter that exists in lowercase and uppercase variants (combination of Ll, Lu and Lt).
exports.modifiedLetter = xregexp_1.default('\\p{Modifier_Letter}'); // a special character that is used like a letter.
exports.otherLetter = xregexp_1.default('\\p{Other_Letter}'); // a letter or ideograph that does not have lowercase and uppercase variants.
exports.mark = xregexp_1.default('\\p{Mark}'); // a character intended to be combined with another character (e.g. accents, umlauts, enclosing boxes, etc.).
exports.nonSpacingMark = xregexp_1.default('\\p{Non_Spacing_Mark}'); // a character intended to be combined with another character without taking up extra space (e.g. accents, umlauts, etc.).
// export const spacingCombiningMark = X('\\p{Spacing_Combining_Mark}');  // a character intended to be combined with another character that takes up extra space (vowel signs in many Eastern languages).
exports.enclosingMark = xregexp_1.default('\\p{Enclosing_Mark}'); // a character that encloses the character is is combined with (circle, square, keycap, etc.).
exports.separator = xregexp_1.default('\\p{Separator}'); // any kind of whitespace or invisible separator.
exports.spaceSeparator = xregexp_1.default('\\p{Space_Separator}'); // a whitespace character that is invisible, but does take up space.
exports.lineSeparator = xregexp_1.default('\\p{Line_Separator}'); // line separator character U+2028.
exports.paragraphSeparator = xregexp_1.default('\\p{Paragraph_Separator}'); // paragraph separator character U+2029.
exports.symbol = xregexp_1.default('\\p{Symbol}'); // math symbols, currency signs, dingbats, box-drawing characters, etc.
exports.mathSymbol = xregexp_1.default('\\p{Math_Symbol}'); // any mathematical symbol.
exports.currencySymbol = xregexp_1.default('\\p{Currency_Symbol}'); // any currency sign.
exports.modifierSymbol = xregexp_1.default('\\p{Modifier_Symbol}'); // a combining character (mark) as a full character on its own.
exports.otherSymbol = xregexp_1.default('\\p{Other_Symbol}'); // various symbols that are not math symbols, currency signs, or combining characters.
/* tslint:disable-next-line */
exports.number = xregexp_1.default('\\p{Number}'); // any kind of numeric character in any script.
exports.decimalDigitNumber = xregexp_1.default('\\p{Nd}'); // a digit zero through nine in any script except ideographic scripts.
exports.letterNumber = xregexp_1.default('\\p{Letter_Number}'); // a number that looks like a letter, such as a Roman numeral.
exports.otherNumber = xregexp_1.default('\\p{Other_Number}'); // a superscript or subscript digit, or a number that is not a digit 0–9 (excluding numbers from ideographic scripts).
exports.punctuation = xregexp_1.default('\\p{Punctuation}'); // any kind of punctuation character.
exports.dashPunctuation = xregexp_1.default('\\p{Dash_Punctuation}'); // any kind of hyphen or dash.
exports.openPunctuation = xregexp_1.default('\\p{Open_Punctuation}'); // any kind of opening bracket.
exports.closePunctuation = xregexp_1.default('\\p{Close_Punctuation}'); // any kind of closing bracket.
exports.initialPunctuation = xregexp_1.default('\\p{Initial_Punctuation}'); // any kind of opening quote.
exports.finalPunctuation = xregexp_1.default('\\p{Final_Punctuation}'); // any kind of closing quote.
exports.connectorPunctuation = xregexp_1.default('\\p{Connector_Punctuation}'); // a punctuation character such as an underscore that connects words.
exports.otherPunctuation = xregexp_1.default('\\p{Other_Punctuation}'); // any kind of punctuation character that is not a dash, bracket, quote or connector.
exports.other = xregexp_1.default('\\p{Other}'); // invisible control characters and unused code points.
exports.control = xregexp_1.default('\\p{Control}'); // an ASCII or Latin-1 control character: 0x00–0x1F and 0x7F–0x9F.
exports.format = xregexp_1.default('\\p{Format}'); // invisible formatting indicator.
exports.privateUse = xregexp_1.default('\\p{Private_Use}'); // any code point reserved for private use.
exports.surrogate = xregexp_1.default('\\p{Surrogate}'); // one half of a surrogate pair in UTF-16 encoding.
exports.unassigned = xregexp_1.default('\\p{Unassigned}'); // any code point to which no character has been assigned.
exports.emoji = xregexp_1.default(emoji_regex_1.default());
//# sourceMappingURL=categories.js.map
{"version":3,"file":"apr.js","names":["_moment","_interopRequireDefault","require","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","estimateStakingAPR","_x","_estimateStakingAPR","apply","arguments","_asyncToGenerator2","_regenerator","mark","_callee","queryClient","pool","bondedTokens","mintParams","mintSchedule","upcomingMintTokens","wrap","_callee$","_context","prev","getPool","sent","Number","bonded_tokens","getMintParams","token_release_schedule","Error","getUpcomingMintTokens","moment","abrupt","stop","_x2","_getPool","_callee2","result","_callee2$","_context2","cosmos","staking","v1beta1","t0","console","log","_x3","_getMintParams","_callee3","_callee3$","_context3","seiprotocol","seichain","mint","params","startDate","days","releaseSchedule","endDate","clone","add","sortedReleaseSchedule","getSortedReleaseSchedule","tokens","_iterator","_step","release","isBefore","isAfter","earlierInclusiveEndDate","min","subtract","daysLeft","calculateDaysInclusive","totalPeriod","tokenReleaseAmount","Math","round","diff","releaseScheduleTimes","map","schedule","createReleaseSchedule","start_date","end_date","token_release_amount","sort","x","y"],"sources":["../../../../src/lib/utils/apr.ts"],"sourcesContent":["import { ScheduledTokenReleaseSDKType } from \"@sei-js/proto/dist/types/codegen/seiprotocol/seichain/mint/v1beta1/mint\";\nimport { getQueryClient } from \"../queryClient\";\nimport moment, { Moment } from 'moment';\nexport type QueryClient = Awaited<ReturnType<typeof getQueryClient>>;\n\nexport async function estimateStakingAPR(queryClient: QueryClient) {\n    // Query number of bonded tokens\n    const pool = await getPool(queryClient);\n    const bondedTokens = Number(pool?.bonded_tokens);\n\n    // Query mint schedule\n    const mintParams = await getMintParams(queryClient);\n    const mintSchedule = mintParams?.token_release_schedule;\n\n    if (!mintSchedule || !pool) {\n        throw new Error(\"Failed to query mintSchedule or pool\");\n    }\n\n    // Calculate number of tokens to be minted in the next year.\n    const upcomingMintTokens = getUpcomingMintTokens(moment(), 365, mintSchedule);\n\n    // APR estimate is the number of tokens to be minted / current number of bonded tokens.\n    return upcomingMintTokens / bondedTokens\n}\n\n// Helper function to query the staking pool.\nexport async function getPool(queryClient: QueryClient) {\n\ttry {\n\t\tconst result = await queryClient.cosmos.staking.v1beta1.pool({});\n\t\treturn result.pool;\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n}\n\n// Helper function to query the mint module params.\nexport async function getMintParams(queryClient: QueryClient) {\n\ttry {\n\t\tconst result = await queryClient.seiprotocol.seichain.mint.params({});\n\t\treturn result.params;\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n}\n\n// Gets the number of tokens that will be minted in the given window based on the given releaseSchedule.\n// Assumes that releaseSchedule has no overlapping schedules.\nexport function getUpcomingMintTokens(startDate: Moment, days: number, releaseSchedule: ScheduledTokenReleaseSDKType[]): number {\n    // End date is the exclusive end date of the window to query. \n    // Ie. if start date is 2023-1-1 and days is 365, end date here will be 2024-1-1 so rewards will be calculated from 2023-1-1 to 2023-12-31\n    const endDate = startDate.clone().add(days, 'days')\n\n    // Sort release schedule in increasing order of start time.\n    let sortedReleaseSchedule: ReleaseSchedule[] = getSortedReleaseSchedule(releaseSchedule);\n\n    var tokens: number = 0\n    for (var release of sortedReleaseSchedule) {\n        // Skip all schedules that ended before today.\n        if (release.endDate.isBefore(startDate)) {\n            continue;\n        }\n        // If the start date is after end date, we have come to the end of all releases we should consider.\n        if (release.startDate.isAfter(endDate)) {\n            break;\n        }\n        // All releases from here are part of the window.\n        // The case where this release started before today.\n        if (release.startDate.isBefore(startDate)) {\n\n            // Need to deduct 1 day from endDate to make it an inclusive end date.\n            let earlierInclusiveEndDate = moment.min(endDate.clone().subtract(1, \"days\"), release.endDate);\n\n            // Number of days left in this release.\n            let daysLeft: number = calculateDaysInclusive(startDate, earlierInclusiveEndDate);\n            let totalPeriod: number = calculateDaysInclusive(release.startDate, release.endDate);\n            tokens += (daysLeft / totalPeriod) * release.tokenReleaseAmount;\n        }\n\n        // The case where this release ends after our search window.\n        else if (release.endDate.isAfter(endDate)) {\n            let daysLeft: number  = Math.round(endDate.diff(release.startDate, 'days', true));\n            let totalPeriod: number  = calculateDaysInclusive(release.startDate, release.endDate);\n            tokens += (daysLeft / totalPeriod) * release.tokenReleaseAmount;\n        }\n\n        // In the final case, the entire period falls within our window.\n        else {\n            tokens += release.tokenReleaseAmount;\n        }\n    }\n\n    return tokens;\n}\n\n// Converts the releaseSchedule into ReleaseSchedule[] and sorts it by start date.\nfunction getSortedReleaseSchedule(releaseSchedule: ScheduledTokenReleaseSDKType[]) {\n        let releaseScheduleTimes = releaseSchedule.map((schedule) => {\n            return createReleaseSchedule(schedule.start_date, schedule.end_date, schedule.token_release_amount);\n        })\n\n        // Sort release schedule in increasing order of start time.\n        let sortedReleaseSchedule = releaseScheduleTimes.sort((x, y) => {\n            if (x.startDate.isAfter(y.startDate)) {\n                return 1;\n            }\n            else if (y.startDate.isAfter(x.startDate)) {\n                return -1;\n            }\n            return 0;\n        })\n\n        return sortedReleaseSchedule;\n}\n\n// Returns the number of days in the window inclusive of the start and end date.\nfunction calculateDaysInclusive(startDate: Moment, endDate: Moment) {\n    return Math.round(endDate.diff(startDate, 'days', true)) + 1;\n}\n\ninterface ReleaseSchedule {\n    startDate: Moment;\n    endDate: Moment;\n    tokenReleaseAmount: number;\n}\n\nfunction createReleaseSchedule(start_date: string, end_date: string, token_release_amount: Long): ReleaseSchedule {\n    return {\n        startDate: moment(start_date),\n        endDate: moment(end_date),\n        tokenReleaseAmount: Number(token_release_amount),\n    }\n}"],"mappings":"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"}
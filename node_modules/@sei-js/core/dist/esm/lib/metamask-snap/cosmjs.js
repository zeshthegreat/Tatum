'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');
Object.defineProperty(exports, '__esModule', {
	value: true
});
exports.requestSignature = exports.requestSignAmino = exports.CosmJSOfflineSigner = void 0;
var _regenerator = _interopRequireDefault(require('@babel/runtime/regenerator'));
var _classCallCheck2 = _interopRequireDefault(require('@babel/runtime/helpers/classCallCheck'));
var _createClass2 = _interopRequireDefault(require('@babel/runtime/helpers/createClass'));
var _defineProperty2 = _interopRequireDefault(require('@babel/runtime/helpers/defineProperty'));
var _asyncToGenerator2 = _interopRequireDefault(require('@babel/runtime/helpers/asyncToGenerator'));
var _long = _interopRequireDefault(require('long'));
var _snapWallet = require('./snapWallet');
var _utils = require('./utils');
var _utils2 = require('../utils');
function ownKeys(e, r) {
	var t = Object.keys(e);
	if (Object.getOwnPropertySymbols) {
		var o = Object.getOwnPropertySymbols(e);
		r &&
			(o = o.filter(function (r) {
				return Object.getOwnPropertyDescriptor(e, r).enumerable;
			})),
			t.push.apply(t, o);
	}
	return t;
}
function _objectSpread(e) {
	for (var r = 1; r < arguments.length; r++) {
		var t = null != arguments[r] ? arguments[r] : {};
		r % 2
			? ownKeys(Object(t), !0).forEach(function (r) {
					(0, _defineProperty2['default'])(e, r, t[r]);
			  })
			: Object.getOwnPropertyDescriptors
			? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t))
			: ownKeys(Object(t)).forEach(function (r) {
					Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
			  });
	}
	return e;
}
var requestSignature = (exports.requestSignature = /*#__PURE__*/ (function () {
	var _ref = (0, _asyncToGenerator2['default'])(
		/*#__PURE__*/ _regenerator['default'].mark(function _callee(chainId, signerAddress, signDoc, snapId) {
			var signature, accountNumber, modifiedAccountNumber;
			return _regenerator['default'].wrap(function _callee$(_context) {
				while (1)
					switch ((_context.prev = _context.next)) {
						case 0:
							_context.next = 2;
							return (0, _utils.sendReqToSnap)(
								'signDirect',
								{
									chainId: chainId,
									signerAddress: signerAddress,
									signDoc: signDoc
								},
								snapId
							);
						case 2:
							signature = _context.sent;
							accountNumber = signDoc.accountNumber;
							modifiedAccountNumber = new _long['default'](
								(accountNumber === null || accountNumber === void 0 ? void 0 : accountNumber.low) || 0,
								accountNumber === null || accountNumber === void 0 ? void 0 : accountNumber.high,
								accountNumber === null || accountNumber === void 0 ? void 0 : accountNumber.unsigned
							);
							return _context.abrupt('return', {
								signature: signature.signature,
								signed: _objectSpread(
									_objectSpread({}, signature.signed),
									{},
									{
										accountNumber: ''.concat(modifiedAccountNumber.toString()),
										authInfoBytes: new Uint8Array(Object.values(signature.signed.authInfoBytes)),
										bodyBytes: new Uint8Array(Object.values(signature.signed.bodyBytes))
									}
								)
							});
						case 6:
						case 'end':
							return _context.stop();
					}
			}, _callee);
		})
	);
	return function requestSignature(_x, _x2, _x3, _x4) {
		return _ref.apply(this, arguments);
	};
})());
var CosmJSOfflineSigner = (exports.CosmJSOfflineSigner = /*#__PURE__*/ (function () {
	function CosmJSOfflineSigner(chainId, snapId, accountIndex) {
		(0, _classCallCheck2['default'])(this, CosmJSOfflineSigner);
		this.chainId = chainId;
		this.snapId = snapId;
		this.accountIndex = accountIndex || 0;
	}
	(0, _createClass2['default'])(CosmJSOfflineSigner, [
		{
			key: 'getAccounts',
			value: (function () {
				var _getAccounts = (0, _asyncToGenerator2['default'])(
					/*#__PURE__*/ _regenerator['default'].mark(function _callee2() {
						var wallet;
						return _regenerator['default'].wrap(
							function _callee2$(_context2) {
								while (1)
									switch ((_context2.prev = _context2.next)) {
										case 0:
											_context2.next = 2;
											return (0, _snapWallet.getWallet)(this.accountIndex, this.snapId);
										case 2:
											wallet = _context2.sent;
											return _context2.abrupt('return', wallet.getAccounts());
										case 4:
										case 'end':
											return _context2.stop();
									}
							},
							_callee2,
							this
						);
					})
				);
				function getAccounts() {
					return _getAccounts.apply(this, arguments);
				}
				return getAccounts;
			})()
		},
		{
			key: 'signDirect',
			value: (function () {
				var _signDirect = (0, _asyncToGenerator2['default'])(
					/*#__PURE__*/ _regenerator['default'].mark(function _callee3(signerAddress, signDoc) {
						var accounts;
						return _regenerator['default'].wrap(
							function _callee3$(_context3) {
								while (1)
									switch ((_context3.prev = _context3.next)) {
										case 0:
											if (!(this.chainId !== signDoc.chainId)) {
												_context3.next = 2;
												break;
											}
											throw new Error('Chain ID does not match signer chain ID');
										case 2:
											_context3.next = 4;
											return this.getAccounts();
										case 4:
											accounts = _context3.sent;
											if (
												!accounts.find(function (account) {
													return account.address !== signerAddress;
												})
											) {
												_context3.next = 7;
												break;
											}
											throw new Error('Signer address does not match wallet address');
										case 7:
											return _context3.abrupt('return', requestSignature(this.chainId, signerAddress, signDoc, this.snapId));
										case 8:
										case 'end':
											return _context3.stop();
									}
							},
							_callee3,
							this
						);
					})
				);
				function signDirect(_x5, _x6) {
					return _signDirect.apply(this, arguments);
				}
				return signDirect;
			})()
		},
		{
			key: 'signAmino',
			value: (function () {
				var _signAmino = (0, _asyncToGenerator2['default'])(
					/*#__PURE__*/ _regenerator['default'].mark(function _callee4(signerAddress, signDoc, options) {
						var accounts;
						return _regenerator['default'].wrap(
							function _callee4$(_context4) {
								while (1)
									switch ((_context4.prev = _context4.next)) {
										case 0:
											if (!(this.chainId !== signDoc.chain_id)) {
												_context4.next = 2;
												break;
											}
											throw new Error('Chain ID does not match signer chain ID');
										case 2:
											_context4.next = 4;
											return this.getAccounts();
										case 4:
											accounts = _context4.sent;
											if (
												!accounts.find(function (account) {
													return account.address !== signerAddress;
												})
											) {
												_context4.next = 7;
												break;
											}
											throw new Error('Signer address does not match wallet address');
										case 7:
											return _context4.abrupt('return', requestSignAmino(this.chainId, signerAddress, signDoc, this.snapId, options));
										case 8:
										case 'end':
											return _context4.stop();
									}
							},
							_callee4,
							this
						);
					})
				);
				function signAmino(_x7, _x8, _x9) {
					return _signAmino.apply(this, arguments);
				}
				return signAmino;
			})()
		},
		{
			key: 'signArbitrary',
			value: (function () {
				var _signArbitrary = (0, _asyncToGenerator2['default'])(
					/*#__PURE__*/ _regenerator['default'].mark(function _callee5(signer, data, signOptions) {
						var signDoc, result;
						return _regenerator['default'].wrap(
							function _callee5$(_context5) {
								while (1)
									switch ((_context5.prev = _context5.next)) {
										case 0:
											signDoc = (0, _utils2.makeADR36AminoSignDoc)(signer, data);
											_context5.next = 3;
											return requestSignAmino(this.chainId, signer, signDoc, this.snapId, {
												isADR36: true,
												enableExtraEntropy: signOptions === null || signOptions === void 0 ? void 0 : signOptions.enableExtraEntropy
											});
										case 3:
											result = _context5.sent;
											return _context5.abrupt('return', result.signature);
										case 5:
										case 'end':
											return _context5.stop();
									}
							},
							_callee5,
							this
						);
					})
				);
				function signArbitrary(_x10, _x11, _x12) {
					return _signArbitrary.apply(this, arguments);
				}
				return signArbitrary;
			})()
		}
	]);
	return CosmJSOfflineSigner;
})());
var requestSignAmino = (exports.requestSignAmino = /*#__PURE__*/ (function () {
	var _ref2 = (0, _asyncToGenerator2['default'])(
		/*#__PURE__*/ _regenerator['default'].mark(function _callee6(chainId, signerAddress, signDoc, snapId, options) {
			var _ref3, _ref3$isADR, isADR36, _ref3$enableExtraEntr, enableExtraEntropy;
			return _regenerator['default'].wrap(function _callee6$(_context6) {
				while (1)
					switch ((_context6.prev = _context6.next)) {
						case 0:
							(_ref3 = options || {}),
								(_ref3$isADR = _ref3.isADR36),
								(isADR36 = _ref3$isADR === void 0 ? false : _ref3$isADR),
								(_ref3$enableExtraEntr = _ref3.enableExtraEntropy),
								(enableExtraEntropy = _ref3$enableExtraEntr === void 0 ? false : _ref3$enableExtraEntr);
							if (!(!isADR36 && chainId !== signDoc.chain_id)) {
								_context6.next = 3;
								break;
							}
							throw new Error('Chain ID does not match signer chain ID');
						case 3:
							_context6.next = 5;
							return (0, _utils.sendReqToSnap)(
								'signAmino',
								{
									chainId: chainId,
									signerAddress: signerAddress,
									signDoc: signDoc,
									isADR36: isADR36,
									enableExtraEntropy: enableExtraEntropy
								},
								snapId
							);
						case 5:
							return _context6.abrupt('return', _context6.sent);
						case 6:
						case 'end':
							return _context6.stop();
					}
			}, _callee6);
		})
	);
	return function requestSignAmino(_x13, _x14, _x15, _x16, _x17) {
		return _ref2.apply(this, arguments);
	};
})());
//# sourceMappingURL=cosmjs.js.map

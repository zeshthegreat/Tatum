{"version":3,"file":"snapWallet.js","names":["_secp256k","require","_sha","_amino","_buffer","_utils","_utils2","_cosmjs","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","SnapWallet","exports","privateKey","compressedPubKey","address","_classCallCheck2","_createClass2","key","value","getAccounts","algo","pubkey","_signDirect","_asyncToGenerator2","_regenerator","mark","_callee","signerAddress","signDoc","accounts","account","hash","signature","wrap","_callee$","_context","prev","next","find","acc","Error","sha256","serializeDirectSignDoc","signSecp256k1","canonical","extraEntropy","der","sent","abrupt","signed","accountNumber","toString","encodeSecp256k1Signature","stop","signDirect","_x","_x2","_signAmino","_callee2","options","_callee2$","_context2","serializeAminoSignDoc","undefined","signAmino","_x3","_x4","_x5","create","sanitizedPvtKey","replace","pvtKeyBytes","Buffer","from","getSecp256k1PublicKey","seiAddress","compressedPubKeyToAddress","getWallet","_getWallet","_callee10","account_index","snapId","_args10","_callee10$","_context10","sendReqToSnap","getMetaMaskSnapSeiWallet","_getAccounts","_callee3","chainId","offlineSigner","_callee3$","_context3","CosmJSOfflineSigner","_x6","connect","_connect","_callee4","_","provider","installedSnaps","_callee4$","_context4","getSnapEthereumProvider","request","method","params","_x7","disconnect","_disconnect","_callee5","_callee5$","_context5","_x8","getOfflineSigner","_getOfflineSigner","_callee6","_callee6$","_context6","_x9","getOfflineSignerAmino","_getOfflineSignerAmino","_callee7","_callee7$","_context7","_x10","signArbitrary","_signArbitrary","_callee8","signer","message","_callee8$","_context8","_x11","_x12","_x13","verifyArbitrary","_verifyArbitrary2","_callee9","signingAddress","data","_callee9$","_context9","_x14","_x15","_x16","_x17","walletInfo","windowKey","name","website","icon","isMobileSupported"],"sources":["../../../../src/lib/metamask-snap/snapWallet.ts"],"sourcesContent":["import { sign as signSecp256k1, getPublicKey as getSecp256k1PublicKey } from '@noble/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { SignDoc } from 'cosmjs-types/cosmos/tx/v1beta1/tx';\nimport { BIP44Node } from '@metamask/key-tree';\nimport { AccountData, encodeSecp256k1Signature, StdSignDoc } from '@cosmjs/amino';\nimport { Buffer } from 'buffer';\nimport { getSnapEthereumProvider, sendReqToSnap } from './utils';\nimport { compressedPubKeyToAddress, serializeAminoSignDoc, serializeDirectSignDoc, verifyArbitrary } from '../utils';\nimport { CosmJSOfflineSigner } from './cosmjs';\nimport { SeiWallet } from '../wallet';\n\nexport class SnapWallet {\n\tconstructor(private privateKey: Uint8Array, private compressedPubKey: Uint8Array, private address: string) {}\n\n\tstatic create(privateKey: string) {\n\t\tconst sanitizedPvtKey = privateKey.replace('0x', '');\n\t\tconst pvtKeyBytes = Buffer.from(sanitizedPvtKey, 'hex');\n\t\tconst compressedPubKey = getSecp256k1PublicKey(pvtKeyBytes, true);\n\t\tconst seiAddress = compressedPubKeyToAddress(compressedPubKey);\n\t\treturn new SnapWallet(pvtKeyBytes, compressedPubKey, seiAddress);\n\t}\n\n\tgetAccounts() {\n\t\treturn [\n\t\t\t{\n\t\t\t\taddress: this.address,\n\t\t\t\talgo: 'secp256k1',\n\t\t\t\tpubkey: this.compressedPubKey\n\t\t\t}\n\t\t] as AccountData[];\n\t}\n\n\tasync signDirect(signerAddress: string, signDoc: SignDoc) {\n\t\tconst accounts = this.getAccounts();\n\t\tconst account = accounts.find((acc) => acc.address === signerAddress);\n\n\t\tif (!account) {\n\t\t\tthrow new Error('Signer address does not match wallet address');\n\t\t}\n\n\t\tconst hash = sha256(serializeDirectSignDoc(signDoc));\n\t\tconst signature = await signSecp256k1(hash, this.privateKey, {\n\t\t\tcanonical: true,\n\t\t\textraEntropy: true,\n\t\t\tder: false\n\t\t});\n\n\t\treturn {\n\t\t\tsigned: { ...signDoc, accountNumber: signDoc.accountNumber.toString() },\n\t\t\tsignature: encodeSecp256k1Signature(account.pubkey, signature)\n\t\t};\n\t}\n\n\tasync signAmino(signerAddress: string, signDoc: StdSignDoc, options?: { extraEntropy: boolean }) {\n\t\tconst accounts = this.getAccounts();\n\t\tconst account = accounts.find((acc) => acc.address === signerAddress);\n\t\tif (!account) {\n\t\t\tthrow new Error('Signer address does not match wallet address');\n\t\t}\n\n\t\tif (!account.pubkey) {\n\t\t\tthrow new Error('Unable to derive keypair');\n\t\t}\n\n\t\tconst hash = sha256(serializeAminoSignDoc(signDoc));\n\t\tconst extraEntropy = options?.extraEntropy ? true : undefined;\n\t\tconst signature = await signSecp256k1(hash, this.privateKey, {\n\t\t\tcanonical: true,\n\t\t\textraEntropy,\n\t\t\tder: false\n\t\t});\n\n\t\treturn {\n\t\t\tsigned: signDoc,\n\t\t\tsignature: encodeSecp256k1Signature(account.pubkey, signature)\n\t\t};\n\t}\n}\n\nexport async function getWallet(account_index = 0, snapId: string): Promise<SnapWallet> {\n\tconst account: BIP44Node = await sendReqToSnap('getPrivateKey', { account_index }, snapId);\n\n\tif (account.privateKey) {\n\t\treturn SnapWallet.create(account.privateKey);\n\t}\n\tthrow new Error(`Error creating sei wallet!`);\n}\n\nexport const getMetaMaskSnapSeiWallet = (snapId: string): SeiWallet => {\n\treturn {\n\t\tgetAccounts: async (chainId) => {\n\t\t\tconst offlineSigner = new CosmJSOfflineSigner(chainId, snapId);\n\t\t\treturn offlineSigner.getAccounts();\n\t\t},\n\t\tconnect: async (_: string) => {\n\t\t\tconst provider = await getSnapEthereumProvider();\n\t\t\tconst installedSnaps: any = await provider.request({ method: 'wallet_getSnaps' });\n\t\t\tif (!installedSnaps || !installedSnaps[snapId]) {\n\t\t\t\tawait provider.request({\n\t\t\t\t\tmethod: 'wallet_requestSnaps',\n\t\t\t\t\tparams: {\n\t\t\t\t\t\t[snapId]: {}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tdisconnect: async (_: string) => {\n\t\t\tthrow new Error('Not implemented');\n\t\t},\n\t\tgetOfflineSigner: async (chainId) => {\n\t\t\treturn new CosmJSOfflineSigner(chainId, snapId);\n\t\t},\n\t\tgetOfflineSignerAmino: async (chainId) => {\n\t\t\t// This signer includes both signDirect and signAmino, so just return it\n\t\t\treturn new CosmJSOfflineSigner(chainId, snapId);\n\t\t},\n\t\tsignArbitrary: async (chainId, signer, message) => {\n\t\t\tconst offlineSigner = new CosmJSOfflineSigner(chainId, snapId);\n\t\t\treturn offlineSigner.signArbitrary(signer, message);\n\t\t},\n\t\tverifyArbitrary: async (_: string, signingAddress, data, signature) => {\n\t\t\tif (!signingAddress || !data) {\n\t\t\t\tthrow new Error('Invalid params');\n\t\t\t}\n\t\t\treturn await verifyArbitrary(signingAddress, data, signature);\n\t\t},\n\t\twalletInfo: {\n\t\t\twindowKey: 'ethereum',\n\t\t\tname: 'Sei Metamask Snap',\n\t\t\twebsite: 'https://metamask.io/',\n\t\t\ticon: 'https://github.com/MetaMask/brand-resources/raw/master/SVG/SVG_MetaMask_Icon_Color.svg'\n\t\t},\n\t\tisMobileSupported: true\n\t};\n};\n"],"mappings":"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"}
import * as _m0 from "protobufjs/minimal";
function createBaseMsgAggregateExchangeRateVote() {
  return {
    exchangeRates: "",
    feeder: "",
    validator: ""
  };
}
export const MsgAggregateExchangeRateVote = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.exchangeRates !== "") {
      writer.uint32(18).string(message.exchangeRates);
    }
    if (message.feeder !== "") {
      writer.uint32(26).string(message.feeder);
    }
    if (message.validator !== "") {
      writer.uint32(34).string(message.validator);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAggregateExchangeRateVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          message.exchangeRates = reader.string();
          break;
        case 3:
          message.feeder = reader.string();
          break;
        case 4:
          message.validator = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$exchangeRates, _object$feeder, _object$validator;
    const message = createBaseMsgAggregateExchangeRateVote();
    message.exchangeRates = (_object$exchangeRates = object.exchangeRates) !== null && _object$exchangeRates !== void 0 ? _object$exchangeRates : "";
    message.feeder = (_object$feeder = object.feeder) !== null && _object$feeder !== void 0 ? _object$feeder : "";
    message.validator = (_object$validator = object.validator) !== null && _object$validator !== void 0 ? _object$validator : "";
    return message;
  }
};
function createBaseMsgAggregateExchangeRateVoteResponse() {
  return {};
}
export const MsgAggregateExchangeRateVoteResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAggregateExchangeRateVoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgAggregateExchangeRateVoteResponse();
    return message;
  }
};
function createBaseMsgDelegateFeedConsent() {
  return {
    operator: "",
    delegate: ""
  };
}
export const MsgDelegateFeedConsent = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.operator !== "") {
      writer.uint32(10).string(message.operator);
    }
    if (message.delegate !== "") {
      writer.uint32(18).string(message.delegate);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegateFeedConsent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.operator = reader.string();
          break;
        case 2:
          message.delegate = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$operator, _object$delegate;
    const message = createBaseMsgDelegateFeedConsent();
    message.operator = (_object$operator = object.operator) !== null && _object$operator !== void 0 ? _object$operator : "";
    message.delegate = (_object$delegate = object.delegate) !== null && _object$delegate !== void 0 ? _object$delegate : "";
    return message;
  }
};
function createBaseMsgDelegateFeedConsentResponse() {
  return {};
}
export const MsgDelegateFeedConsentResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegateFeedConsentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgDelegateFeedConsentResponse();
    return message;
  }
};
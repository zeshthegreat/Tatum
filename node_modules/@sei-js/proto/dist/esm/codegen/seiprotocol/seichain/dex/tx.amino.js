//@ts-nocheck

import { Long } from "../../../helpers";
import { orderStatusFromJSON, orderTypeFromJSON, positionDirectionFromJSON, cancellationInitiatorFromJSON } from "./enums";
export const AminoConverter = {
  "/seiprotocol.seichain.dex.MsgPlaceOrders": {
    aminoType: "/seiprotocol.seichain.dex.MsgPlaceOrders",
    toAmino: ({
      creator,
      orders,
      contractAddr,
      funds
    }) => {
      return {
        creator,
        orders: orders.map(el0 => ({
          id: el0.id.toString(),
          status: el0.status,
          account: el0.account,
          contractAddr: el0.contractAddr,
          price: el0.price,
          quantity: el0.quantity,
          priceDenom: el0.priceDenom,
          assetDenom: el0.assetDenom,
          orderType: el0.orderType,
          positionDirection: el0.positionDirection,
          data: el0.data,
          statusDescription: el0.statusDescription,
          nominal: el0.nominal,
          triggerPrice: el0.triggerPrice,
          triggerStatus: el0.triggerStatus
        })),
        contractAddr,
        funds: funds.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    },
    fromAmino: ({
      creator,
      orders,
      contractAddr,
      funds
    }) => {
      return {
        creator,
        orders: orders.map(el0 => ({
          id: Long.fromString(el0.id),
          status: orderStatusFromJSON(el0.status),
          account: el0.account,
          contractAddr: el0.contractAddr,
          price: el0.price,
          quantity: el0.quantity,
          priceDenom: el0.priceDenom,
          assetDenom: el0.assetDenom,
          orderType: orderTypeFromJSON(el0.orderType),
          positionDirection: positionDirectionFromJSON(el0.positionDirection),
          data: el0.data,
          statusDescription: el0.statusDescription,
          nominal: el0.nominal,
          triggerPrice: el0.triggerPrice,
          triggerStatus: el0.triggerStatus
        })),
        contractAddr,
        funds: funds.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        }))
      };
    }
  },
  "/seiprotocol.seichain.dex.MsgCancelOrders": {
    aminoType: "/seiprotocol.seichain.dex.MsgCancelOrders",
    toAmino: ({
      creator,
      cancellations,
      contractAddr
    }) => {
      return {
        creator,
        cancellations: cancellations.map(el0 => ({
          id: el0.id.toString(),
          initiator: el0.initiator,
          creator: el0.creator,
          contractAddr: el0.contractAddr,
          priceDenom: el0.priceDenom,
          assetDenom: el0.assetDenom,
          positionDirection: el0.positionDirection,
          price: el0.price
        })),
        contractAddr
      };
    },
    fromAmino: ({
      creator,
      cancellations,
      contractAddr
    }) => {
      return {
        creator,
        cancellations: cancellations.map(el0 => ({
          id: Long.fromString(el0.id),
          initiator: cancellationInitiatorFromJSON(el0.initiator),
          creator: el0.creator,
          contractAddr: el0.contractAddr,
          priceDenom: el0.priceDenom,
          assetDenom: el0.assetDenom,
          positionDirection: positionDirectionFromJSON(el0.positionDirection),
          price: el0.price
        })),
        contractAddr
      };
    }
  },
  "/seiprotocol.seichain.dex.MsgRegisterContract": {
    aminoType: "/seiprotocol.seichain.dex.MsgRegisterContract",
    toAmino: ({
      creator,
      contract
    }) => {
      return {
        creator,
        contract: {
          codeId: contract.codeId.toString(),
          contractAddr: contract.contractAddr,
          needHook: contract.needHook,
          needOrderMatching: contract.needOrderMatching,
          dependencies: contract.dependencies.map(el0 => ({
            dependency: el0.dependency,
            immediateElderSibling: el0.immediateElderSibling,
            immediateYoungerSibling: el0.immediateYoungerSibling
          })),
          numIncomingDependencies: contract.numIncomingDependencies.toString(),
          creator: contract.creator,
          rentBalance: contract.rentBalance.toString(),
          suspended: contract.suspended,
          suspensionReason: contract.suspensionReason
        }
      };
    },
    fromAmino: ({
      creator,
      contract
    }) => {
      return {
        creator,
        contract: {
          codeId: Long.fromString(contract.codeId),
          contractAddr: contract.contractAddr,
          needHook: contract.needHook,
          needOrderMatching: contract.needOrderMatching,
          dependencies: contract.dependencies.map(el1 => ({
            dependency: el1.dependency,
            immediateElderSibling: el1.immediateElderSibling,
            immediateYoungerSibling: el1.immediateYoungerSibling
          })),
          numIncomingDependencies: Long.fromString(contract.numIncomingDependencies),
          creator: contract.creator,
          rentBalance: Long.fromString(contract.rentBalance),
          suspended: contract.suspended,
          suspensionReason: contract.suspensionReason
        }
      };
    }
  },
  "/seiprotocol.seichain.dex.MsgContractDepositRent": {
    aminoType: "/seiprotocol.seichain.dex.MsgContractDepositRent",
    toAmino: ({
      contractAddr,
      amount,
      sender
    }) => {
      return {
        contractAddr,
        amount: amount.toString(),
        sender
      };
    },
    fromAmino: ({
      contractAddr,
      amount,
      sender
    }) => {
      return {
        contractAddr,
        amount: Long.fromString(amount),
        sender
      };
    }
  },
  "/seiprotocol.seichain.dex.MsgUnregisterContract": {
    aminoType: "/seiprotocol.seichain.dex.MsgUnregisterContract",
    toAmino: ({
      creator,
      contractAddr
    }) => {
      return {
        creator,
        contractAddr
      };
    },
    fromAmino: ({
      creator,
      contractAddr
    }) => {
      return {
        creator,
        contractAddr
      };
    }
  },
  "/seiprotocol.seichain.dex.MsgRegisterPairs": {
    aminoType: "/seiprotocol.seichain.dex.MsgRegisterPairs",
    toAmino: ({
      creator,
      batchcontractpair
    }) => {
      return {
        creator,
        batchcontractpair: batchcontractpair.map(el0 => ({
          contractAddr: el0.contractAddr,
          pairs: el0.pairs.map(el1 => ({
            priceDenom: el1.priceDenom,
            assetDenom: el1.assetDenom,
            priceTicksize: el1.priceTicksize,
            quantityTicksize: el1.quantityTicksize
          }))
        }))
      };
    },
    fromAmino: ({
      creator,
      batchcontractpair
    }) => {
      return {
        creator,
        batchcontractpair: batchcontractpair.map(el0 => ({
          contractAddr: el0.contractAddr,
          pairs: el0.pairs.map(el1 => ({
            priceDenom: el1.priceDenom,
            assetDenom: el1.assetDenom,
            priceTicksize: el1.priceTicksize,
            quantityTicksize: el1.quantityTicksize
          }))
        }))
      };
    }
  },
  "/seiprotocol.seichain.dex.MsgUpdatePriceTickSize": {
    aminoType: "/seiprotocol.seichain.dex.MsgUpdatePriceTickSize",
    toAmino: ({
      creator,
      tickSizeList
    }) => {
      return {
        creator,
        tickSizeList: tickSizeList.map(el0 => ({
          pair: {
            priceDenom: el0.pair.priceDenom,
            assetDenom: el0.pair.assetDenom,
            priceTicksize: el0.pair.priceTicksize,
            quantityTicksize: el0.pair.quantityTicksize
          },
          ticksize: el0.ticksize,
          contractAddr: el0.contractAddr
        }))
      };
    },
    fromAmino: ({
      creator,
      tickSizeList
    }) => {
      return {
        creator,
        tickSizeList: tickSizeList.map(el0 => ({
          pair: {
            priceDenom: el0.pair.priceDenom,
            assetDenom: el0.pair.assetDenom,
            priceTicksize: el0.pair.priceTicksize,
            quantityTicksize: el0.pair.quantityTicksize
          },
          ticksize: el0.ticksize,
          contractAddr: el0.contractAddr
        }))
      };
    }
  },
  "/seiprotocol.seichain.dex.MsgUpdateQuantityTickSize": {
    aminoType: "/seiprotocol.seichain.dex.MsgUpdateQuantityTickSize",
    toAmino: ({
      creator,
      tickSizeList
    }) => {
      return {
        creator,
        tickSizeList: tickSizeList.map(el0 => ({
          pair: {
            priceDenom: el0.pair.priceDenom,
            assetDenom: el0.pair.assetDenom,
            priceTicksize: el0.pair.priceTicksize,
            quantityTicksize: el0.pair.quantityTicksize
          },
          ticksize: el0.ticksize,
          contractAddr: el0.contractAddr
        }))
      };
    },
    fromAmino: ({
      creator,
      tickSizeList
    }) => {
      return {
        creator,
        tickSizeList: tickSizeList.map(el0 => ({
          pair: {
            priceDenom: el0.pair.priceDenom,
            assetDenom: el0.pair.assetDenom,
            priceTicksize: el0.pair.priceTicksize,
            quantityTicksize: el0.pair.quantityTicksize
          },
          ticksize: el0.ticksize,
          contractAddr: el0.contractAddr
        }))
      };
    }
  },
  "/seiprotocol.seichain.dex.MsgUnsuspendContract": {
    aminoType: "/seiprotocol.seichain.dex.MsgUnsuspendContract",
    toAmino: ({
      creator,
      contractAddr
    }) => {
      return {
        creator,
        contractAddr
      };
    },
    fromAmino: ({
      creator,
      contractAddr
    }) => {
      return {
        creator,
        contractAddr
      };
    }
  }
};
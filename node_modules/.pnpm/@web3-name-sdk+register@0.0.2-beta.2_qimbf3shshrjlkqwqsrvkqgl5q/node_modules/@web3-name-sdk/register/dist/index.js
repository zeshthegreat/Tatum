// src/registerV2.ts
import { BigNumber as BigNumber2, Signer as Signer2, Contract as Contract2 } from "ethers";
import SID, { namehash as namehash2, validateName, getSidAddress } from "@siddomains/sidjs";
import { interfaces } from "@siddomains/sidjs/dist/constants/interfaces";
import {
  getResolverContract,
  getSIDContract
} from "@siddomains/sidjs/dist/utils/contract";

// src/utils/contract.ts
import { Contract } from "ethers";
import registrarController from "@siddomains/sid-contracts/build/contracts/IRegistrarController.json";
function getRegistrarControllerContract({
  address,
  signer
}) {
  return new Contract(address, registrarController, signer);
}

// src/utils/register.ts
import { utils, BigNumber } from "ethers";
var YEAR_IN_SECONDS = 31556952;
function calculateDuration(years) {
  return BigNumber.from(parseInt((years * YEAR_IN_SECONDS).toFixed()));
}
function genCommitSecret() {
  return utils.hexlify(utils.randomBytes(32));
}
function getBufferedPrice(price) {
  return price.mul(110).div(100);
}

// src/utils/referral.ts
import { namehash } from "@siddomains/sidjs";
var emptySignature = [
  "0x0000000000000000000000000000000000000000",
  "0x0000000000000000000000000000000000000000000000000000000000000000",
  0,
  0,
  "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
];
function getApiUrl() {
  return "https://api.prd.space.id/v1/sign-referral";
}
async function getReferralSignature(domain, chainId) {
  if (!domain || !chainId)
    return emptySignature;
  try {
    const res = await fetch(getApiUrl(), {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        domain,
        chainId
      })
    });
    const signReferral = await res.json();
    if (signReferral) {
      return [
        signReferral.referrerAddress,
        namehash(domain),
        Number(signReferral.referralCount),
        Number(signReferral.signedAt),
        signReferral.signature
      ];
    } else {
      throw new Error("sign referral fail");
    }
  } catch (e) {
    console.error(e);
    throw new Error("sign referral fail");
  }
}

// src/constants/index.ts
var ENS_COMMIT_WAIT_TIEM = 60;

// src/abi/ens.ts
var ensRegisterAbi = [
  {
    constant: true,
    inputs: [{ internalType: "string", name: "name", type: "string" }],
    name: "available",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [{ internalType: "bytes32", name: "commitment", type: "bytes32" }],
    name: "commit",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    name: "commitments",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      { internalType: "string", name: "name", type: "string" },
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      { internalType: "bytes32", name: "secret", type: "bytes32" }
    ],
    name: "makeCommitment",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "pure",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      { internalType: "string", name: "name", type: "string" },
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      { internalType: "bytes32", name: "secret", type: "bytes32" },
      {
        internalType: "address",
        name: "resolver",
        type: "address"
      },
      { internalType: "address", name: "addr", type: "address" }
    ],
    name: "makeCommitmentWithConfig",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "pure",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      { internalType: "string", name: "name", type: "string" },
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      { internalType: "uint256", name: "duration", type: "uint256" },
      {
        internalType: "bytes32",
        name: "secret",
        type: "bytes32"
      }
    ],
    name: "register",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      { internalType: "string", name: "name", type: "string" },
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      { internalType: "uint256", name: "duration", type: "uint256" },
      {
        internalType: "bytes32",
        name: "secret",
        type: "bytes32"
      },
      { internalType: "address", name: "resolver", type: "address" },
      {
        internalType: "address",
        name: "addr",
        type: "address"
      }
    ],
    name: "registerWithConfig",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      { internalType: "string", name: "name", type: "string" },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256"
      }
    ],
    name: "rentPrice",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];
var ens_default = ensRegisterAbi;

// src/utils/index.ts
var wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// src/registerV2.ts
var getTldByChainId = (chainId) => {
  switch (chainId) {
    case 1:
      return "eth";
    case 97:
    case 56:
      return "bnb";
    case 42161:
    case 421613:
      return "arb";
    default:
      return "bnb";
  }
};
var SIDRegister = class {
  constructor(options) {
    const { signer, sidAddress, chainId } = options;
    if (!Signer2.isSigner(signer))
      throw new Error("signer is required");
    if (!chainId)
      throw new Error("chainId is required");
    this.sidAddress = sidAddress ?? getSidAddress(chainId);
    this.signer = signer;
    this.chainId = chainId;
  }
  async getRegistrarController() {
    if (!this.registrarController) {
      const sidContract = getSIDContract({
        address: this.sidAddress,
        provider: this.signer.provider
      });
      const hash = namehash2(getTldByChainId(this.chainId));
      const resolverAddr = await sidContract.resolver(hash);
      const resolverContract = getResolverContract({
        address: resolverAddr,
        provider: this.signer.provider
      });
      const registrarControllerAddr = await resolverContract.interfaceImplementer(
        hash,
        interfaces.permanentRegistrar
      );
      if (this.chainId === 1) {
        this.registrarController = new Contract2(
          registrarControllerAddr,
          ens_default,
          this.signer
        );
      } else {
        this.registrarController = getRegistrarControllerContract({
          address: registrarControllerAddr,
          signer: this.signer
        });
      }
      return this.registrarController;
    }
    if (!this.registrarController)
      throw new Error("Registrar Controller is not initialized");
    return this.registrarController;
  }
  async getPublicResolver() {
    const sid = new SID({ provider: this.signer.provider, sidAddress: this.sidAddress });
    if (this.chainId === 1) {
      return sid.name("resolver.eth").getAddress();
    }
    return sid.name(`sid-resolver.${getTldByChainId(this.chainId)}`).getAddress();
  }
  /**
   * Get the rent price for a name.
   * @param label
   * @param year number of registration years
   */
  async getRentPrice(label, year) {
    const normalizedName = validateName(label);
    if (normalizedName !== label)
      throw new Error("unnormailzed name");
    const registrarController2 = await this.getRegistrarController();
    const res = await registrarController2.rentPrice(normalizedName, calculateDuration(year));
    if (this.chainId === 1) {
      return res;
    }
    return res[0].add(res[1]);
  }
  /**
   * check if the domain is available for registration
   * @param label
   */
  async getAvailable(label) {
    const normalizedName = validateName(label);
    if (normalizedName !== label)
      throw new Error("unnormailzed name");
    const registrarController2 = await this.getRegistrarController();
    return registrarController2.available(normalizedName);
  }
  /**
   * register a domain
   * @param label
   * @param address the address to register
   * @param year
   * @param options.referrer optional parameter. the referrer domain. only work for .bnb and .arb domain
   * @param options.setPrimaryName optional parameter. register and set the domain as primary name. only work for .bnb and .arb domain
   * @param options.onCommitSuccess optional parameter. callback function when the commitment is successful. only required for .eth domain
   */
  async register(label, address, year, options) {
    const referrer = options?.referrer;
    const setPrimaryName = options?.setPrimaryName;
    const normalizedName = validateName(label);
    if (normalizedName !== label)
      throw new Error("unnormailzed name");
    if (year < 1)
      throw new Error("minimum registration for one year");
    const duration = calculateDuration(year);
    const publicResolver = await this.getPublicResolver();
    const registrarController2 = await this.getRegistrarController();
    const secret = genCommitSecret();
    if (this.chainId === 1) {
      const commitment = await registrarController2.makeCommitmentWithConfig(
        normalizedName,
        address,
        secret,
        publicResolver,
        address
      );
      const tx2 = await registrarController2?.commit(commitment);
      await tx2?.wait();
      const checkRes = await registrarController2?.commitments(commitment);
      const createTime = checkRes?.toNumber() ?? 0;
      if (createTime > 0) {
        if (options?.onCommitSuccess) {
          await options.onCommitSuccess(ENS_COMMIT_WAIT_TIEM);
        } else {
          await wait(ENS_COMMIT_WAIT_TIEM * 1e3);
        }
      } else {
        throw new Error("commitment error");
      }
    }
    const priceRes = await this.getRentPrice(normalizedName, year);
    const bufferedPrice = getBufferedPrice(priceRes);
    let tx;
    if (this.chainId === 1) {
      const gas = await registrarController2.estimateGas?.registerWithConfig(
        normalizedName,
        address,
        duration,
        secret,
        publicResolver,
        address,
        {
          value: bufferedPrice
        }
      );
      const gasLimit = (gas ?? BigNumber2.from(0)).add(21e3);
      tx = await registrarController2?.registerWithConfig(
        normalizedName,
        address,
        duration,
        secret,
        publicResolver,
        address,
        {
          value: bufferedPrice,
          gasLimit: gasLimit ? BigNumber2.from(gasLimit) : void 0
        }
      );
    } else {
      const referralSign = await getReferralSignature(referrer ?? "", this.chainId);
      const gas = await registrarController2.estimateGas?.registerWithConfigAndPoint(
        normalizedName,
        address,
        duration,
        publicResolver,
        false,
        setPrimaryName,
        referralSign,
        {
          value: bufferedPrice
        }
      );
      const gasLimit = (gas ?? BigNumber2.from(0)).add(21e3);
      tx = await registrarController2.registerWithConfigAndPoint(
        normalizedName,
        address,
        duration,
        publicResolver,
        false,
        setPrimaryName,
        referralSign,
        {
          value: bufferedPrice,
          gasLimit
        }
      );
    }
    await tx.wait();
    return normalizedName;
  }
};

// src/registerV3.ts
import { encodeFunctionData, parseEther, zeroAddress } from "viem";

// src/utils/registerV3.ts
import { countCharacters, validateName as validateName2 } from "@web3-name-sdk/core/utils";
import { encodeAbiParameters } from "viem";
var YEAR_IN_SECONDS2 = 31556952;
function calculateDuration2(years) {
  return BigInt(parseInt((years * YEAR_IN_SECONDS2).toFixed()));
}
function getBufferedPrice2(price) {
  return price * BigInt(101) / BigInt(100);
}
function validateNameV3(label) {
  const res = validateName2(label);
  const len = countCharacters(res);
  if (len < 3 || len > 512) {
    throw new Error("Invalid name");
  }
  return res;
}
function encodeExtraData(usePoints, referrerAddr) {
  if (!usePoints && !referrerAddr)
    return "0x";
  let rewardHookExtraData = "0x";
  if (referrerAddr) {
    rewardHookExtraData = encodeAbiParameters(
      [{ type: "address", name: "referrerAddress" }],
      [referrerAddr]
    );
  }
  const pointHookExtraData = encodeAbiParameters(
    [{ type: "bool", name: "useGiftCardPoints" }],
    [usePoints]
  );
  const extraData = encodeAbiParameters(
    [
      {
        components: [
          { type: "bytes", name: "QualificationHookExtraData" },
          { type: "bytes", name: "PriceHookExtraData" },
          { type: "bytes", name: "PointHookExtraData" },
          { type: "bytes", name: "RewardHookExtraData" }
        ],
        name: "extraData",
        type: "tuple"
      }
    ],
    [
      {
        QualificationHookExtraData: "0x",
        PriceHookExtraData: "0x",
        PointHookExtraData: pointHookExtraData,
        RewardHookExtraData: rewardHookExtraData
      }
    ]
  );
  return extraData;
}

// src/abi/sidCtrlV3.ts
var sidV3CtrlAbi = [
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256"
      }
    ],
    name: "DurationTooShort",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string",
        name: "name",
        type: "string"
      }
    ],
    name: "NameNotAvailable",
    type: "error"
  },
  { inputs: [], name: "NotQualifiedRegister", type: "error" },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      { internalType: "uint256", name: "realPrice", type: "uint256" }
    ],
    name: "SimulateERC20Price",
    type: "error"
  },
  {
    inputs: [{ internalType: "uint256", name: "realPrice", type: "uint256" }],
    name: "SimulatePrice",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      { indexed: false, internalType: "address", name: "newAdmin", type: "address" }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: "address", name: "beacon", type: "address" }],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, internalType: "uint8", name: "version", type: "uint8" }],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "string", name: "name", type: "string" },
      {
        indexed: true,
        internalType: "bytes32",
        name: "label",
        type: "bytes32"
      },
      { indexed: true, internalType: "address", name: "owner", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "baseCost",
        type: "uint256"
      },
      { indexed: false, internalType: "uint256", name: "expires", type: "uint256" }
    ],
    name: "NameRegistered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "string", name: "name", type: "string" },
      {
        indexed: true,
        internalType: "bytes32",
        name: "label",
        type: "bytes32"
      },
      { indexed: false, internalType: "uint256", name: "cost", type: "uint256" },
      {
        indexed: false,
        internalType: "uint256",
        name: "expires",
        type: "uint256"
      }
    ],
    name: "NameRenewed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "bool", name: "hasMintCap", type: "bool" }
    ],
    name: "SetHasMintCap",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "uint256", name: "maxDomainLength", type: "uint256" }
    ],
    name: "SetMaxDomainLength",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "uint256", name: "minDomainLength", type: "uint256" }
    ],
    name: "SetMinDomainLength",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "uint256", name: "minRegistrationDuration", type: "uint256" }
    ],
    name: "SetMinRegistrationDuration",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "uint256", name: "minRenewDuration", type: "uint256" }
    ],
    name: "SetMinRenewDuration",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "uint256", name: "mintCap", type: "uint256" }
    ],
    name: "SetMintCap",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "address", name: "hook", type: "address" }
    ],
    name: "SetPointHook",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "address", name: "hook", type: "address" }
    ],
    name: "SetPriceHook",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "address", name: "hook", type: "address" }
    ],
    name: "SetQualificationHook",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "address", name: "hook", type: "address" }
    ],
    name: "SetRenewPointHook",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "address", name: "hook", type: "address" }
    ],
    name: "SetRenewPriceHook",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "address", name: "hook", type: "address" }
    ],
    name: "SetRenewRewardHook",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "address", name: "hook", type: "address" }
    ],
    name: "SetRewardHook",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "address", name: "base", type: "address" }
    ],
    name: "SetTldBase",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "address", name: "priceOracle", type: "address" }
    ],
    name: "SetTldPriceOracle",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      { indexed: false, internalType: "address", name: "token", type: "address" }
    ],
    name: "SetTldPricingToken",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: "address", name: "implementation", type: "address" }],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string",
        name: "name",
        type: "string"
      }
    ],
    name: "available",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string[]",
        name: "names",
        type: "string[]"
      },
      { internalType: "address", name: "owner", type: "address" },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256"
      },
      { internalType: "address", name: "resolver", type: "address" },
      {
        internalType: "bool",
        name: "setTldName",
        type: "bool"
      },
      { internalType: "bytes[]", name: "extraData", type: "bytes[]" }
    ],
    name: "bulkRegister",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string[]",
        name: "names",
        type: "string[]"
      },
      { internalType: "address", name: "owner", type: "address" },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256"
      },
      { internalType: "address", name: "resolver", type: "address" },
      {
        internalType: "bool",
        name: "setTldName",
        type: "bool"
      },
      { internalType: "bytes[]", name: "extraData", type: "bytes[]" }
    ],
    name: "bulkRegisterSimulate",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string[]",
        name: "names",
        type: "string[]"
      },
      { internalType: "address", name: "owner", type: "address" },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256"
      },
      { internalType: "address", name: "resolver", type: "address" },
      {
        internalType: "bool",
        name: "setTldName",
        type: "bool"
      },
      { internalType: "bytes[]", name: "extraData", type: "bytes[]" }
    ],
    name: "bulkRegisterWithERC20",
    outputs: [
      { internalType: "address", name: "token", type: "address" },
      {
        internalType: "uint256",
        name: "total",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string[]",
        name: "names",
        type: "string[]"
      },
      { internalType: "address", name: "owner", type: "address" },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256"
      },
      { internalType: "address", name: "resolver", type: "address" },
      {
        internalType: "bool",
        name: "setTldName",
        type: "bool"
      },
      { internalType: "bytes[]", name: "extraData", type: "bytes[]" }
    ],
    name: "bulkRegisterWithERC20Simulate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string[]",
        name: "names",
        type: "string[]"
      },
      { internalType: "uint256", name: "duration", type: "uint256" },
      {
        internalType: "bytes[]",
        name: "extraData",
        type: "bytes[]"
      }
    ],
    name: "bulkRenew",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string[]",
        name: "names",
        type: "string[]"
      },
      { internalType: "uint256", name: "duration", type: "uint256" },
      {
        internalType: "address",
        name: "initiatedBy",
        type: "address"
      },
      { internalType: "bytes[]", name: "extraData", type: "bytes[]" }
    ],
    name: "bulkRenewSimulate",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string[]",
        name: "names",
        type: "string[]"
      },
      { internalType: "uint256", name: "duration", type: "uint256" },
      {
        internalType: "bytes[]",
        name: "extraData",
        type: "bytes[]"
      }
    ],
    name: "bulkRenewWithERC20",
    outputs: [
      { internalType: "address", name: "token", type: "address" },
      {
        internalType: "uint256",
        name: "total",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string[]",
        name: "names",
        type: "string[]"
      },
      { internalType: "uint256", name: "duration", type: "uint256" },
      {
        internalType: "address",
        name: "initiatedBy",
        type: "address"
      },
      { internalType: "bytes[]", name: "extraData", type: "bytes[]" }
    ],
    name: "bulkRenewWithERC20Simulate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "defaultPriceOracle",
    outputs: [{ internalType: "contract IPriceOracle", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "erc20PlatformFeeBalances",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "identifier", type: "uint256" }],
    name: "getPriceOracle",
    outputs: [{ internalType: "contract IPriceOracle", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ISANN",
        name: "_sann",
        type: "address"
      },
      {
        internalType: "contract IPlatformConfig",
        name: "_platformConfig",
        type: "address"
      },
      {
        internalType: "contract IPrepaidPlatformFee",
        name: "_prepaidPlatformFee",
        type: "address"
      },
      {
        internalType: "contract IPriceOracle",
        name: "_priceOracle",
        type: "address"
      },
      { internalType: "contract IReverseRegistrar", name: "_reverseRegistrar", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "platformConfig",
    outputs: [{ internalType: "contract IPlatformConfig", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "platformFeeBalance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "prepaidPlatformFee",
    outputs: [{ internalType: "contract IPrepaidPlatformFee", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string",
        name: "_name",
        type: "string"
      },
      { internalType: "address", name: "_buyer", type: "address" },
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256"
      },
      { internalType: "bytes", name: "_extraData", type: "bytes" }
    ],
    name: "priceAfterDiscount",
    outputs: [{ internalType: "uint256", name: "cost", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "_token", type: "address" },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      { internalType: "uint256", name: "_amount", type: "uint256" }
    ],
    name: "recoverFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string",
        name: "name",
        type: "string"
      },
      { internalType: "uint256", name: "duration", type: "uint256" }
    ],
    name: "rentERC20Price",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "base",
            type: "uint256"
          },
          { internalType: "uint256", name: "premium", type: "uint256" }
        ],
        internalType: "struct IPriceOracle.Price",
        name: "price",
        type: "tuple"
      },
      { internalType: "address", name: "token", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string",
        name: "name",
        type: "string"
      },
      { internalType: "uint256", name: "duration", type: "uint256" }
    ],
    name: "rentPrice",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "base",
            type: "uint256"
          },
          { internalType: "uint256", name: "premium", type: "uint256" }
        ],
        internalType: "struct IPriceOracle.Price",
        name: "price",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "string",
        name: "name",
        type: "string"
      },
      { internalType: "uint256", name: "duration", type: "uint256" }
    ],
    name: "rentPriceInUSD",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "base",
            type: "uint256"
          },
          { internalType: "uint256", name: "premium", type: "uint256" }
        ],
        internalType: "struct IPriceOracle.Price",
        name: "price",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "reverseRegistrar",
    outputs: [{ internalType: "contract IReverseRegistrar", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "sann",
    outputs: [{ internalType: "contract ISANN", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "uint256",
        name: "_maxDomainLength",
        type: "uint256"
      }
    ],
    name: "setMaxDomainLength",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "uint256",
        name: "_minDomainLength",
        type: "uint256"
      }
    ],
    name: "setMinDomainLength",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "uint256",
        name: "_minRegistrationDuration",
        type: "uint256"
      }
    ],
    name: "setMinRegistrationDuration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "uint256",
        name: "_minRenewDuration",
        type: "uint256"
      }
    ],
    name: "setMinRenewDuration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "uint256",
        name: "_mintCap",
        type: "uint256"
      }
    ],
    name: "setMintCap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "address",
        name: "_hook",
        type: "address"
      }
    ],
    name: "setPointHook",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "address",
        name: "_hook",
        type: "address"
      }
    ],
    name: "setPriceHook",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "address",
        name: "_hook",
        type: "address"
      }
    ],
    name: "setQualificationHook",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "address",
        name: "_hook",
        type: "address"
      }
    ],
    name: "setRenewPointHook",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "address",
        name: "_hook",
        type: "address"
      }
    ],
    name: "setRenewPriceHook",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "address",
        name: "_hook",
        type: "address"
      }
    ],
    name: "setRenewRewardHook",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "address",
        name: "_hook",
        type: "address"
      }
    ],
    name: "setRewardHook",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "identifier",
        type: "uint256"
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "minDomainLength",
            type: "uint256"
          },
          { internalType: "uint256", name: "maxDomainLength", type: "uint256" },
          {
            internalType: "uint256",
            name: "minRegistrationDuration",
            type: "uint256"
          },
          { internalType: "uint256", name: "minRenewDuration", type: "uint256" },
          {
            internalType: "uint256",
            name: "mintCap",
            type: "uint256"
          }
        ],
        internalType: "struct TldConfig",
        name: "_config",
        type: "tuple"
      }
    ],
    name: "setTldConfigs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "address",
        name: "_qualificationHook",
        type: "address"
      },
      { internalType: "address", name: "_priceHook", type: "address" },
      {
        internalType: "address",
        name: "_rewardHook",
        type: "address"
      },
      { internalType: "address", name: "_renewPriceHook", type: "address" },
      {
        internalType: "address",
        name: "_renewRewardHook",
        type: "address"
      }
    ],
    name: "setTldHooks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "address",
        name: "priceOracle",
        type: "address"
      }
    ],
    name: "setTldPriceOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "identifier", type: "uint256" },
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "setTldPricingToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "tldConfigs",
    outputs: [
      {
        internalType: "uint256",
        name: "minDomainLength",
        type: "uint256"
      },
      { internalType: "uint256", name: "maxDomainLength", type: "uint256" },
      {
        internalType: "uint256",
        name: "minRegistrationDuration",
        type: "uint256"
      },
      { internalType: "uint256", name: "minRenewDuration", type: "uint256" },
      {
        internalType: "uint256",
        name: "mintCap",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "tldERC20Revenues",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "tldHooks",
    outputs: [
      {
        internalType: "contract IQualificationHook",
        name: "qualificationHook",
        type: "address"
      },
      {
        internalType: "contract IPriceHook",
        name: "priceHook",
        type: "address"
      },
      {
        internalType: "contract IPointHook",
        name: "pointHook",
        type: "address"
      },
      {
        internalType: "contract IRewardHook",
        name: "rewardHook",
        type: "address"
      },
      {
        internalType: "contract IRenewPriceHook",
        name: "renewPriceHook",
        type: "address"
      },
      {
        internalType: "contract IRenewPointHook",
        name: "renewPointHook",
        type: "address"
      },
      { internalType: "contract IRenewRewardHook", name: "renewRewardHook", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "tldPriceOracles",
    outputs: [{ internalType: "contract IPriceOracle", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "tldPricingTokens",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "tldRevenues",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "newImplementation", type: "address" }],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      { internalType: "bytes", name: "data", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "identifier", type: "uint256" }],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "identifier", type: "uint256" }],
    name: "withdrawERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "withdrawERC20PlatformFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "withdrawPlatformFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  { stateMutability: "payable", type: "receive" }
];

// src/registerV3.ts
var SIDRegisterV3 = class {
  constructor(options) {
    const { publicClient, walletClient, identifier, controllerAddr } = options;
    this.publicClient = publicClient;
    this.walletClient = walletClient;
    this.identifier = BigInt(identifier);
    this.controllerAddr = controllerAddr;
    this.resolverAddr = options.resolverAddr;
    this.simulateAccount = options.simulateAccount ?? zeroAddress;
    this.simulateValue = parseEther(options.simulateValue ?? "500");
  }
  validateName(name) {
    const res = validateNameV3(name);
    if (res !== name)
      throw new Error("unnormailzed name");
  }
  /**
   * Get the rent price for a name in wei.
   * @param label
   * @param year number of registration years
   * @param options.referrer optional parameter. the referrer domain.
   * @param options.usePoint optional parameter. use gift card points to pay for the domain.
   * @param options.setPrimaryName optional parameter. register and set the domain as primary name.
   */
  async getRentPrice(label, year, options) {
    this.validateName(label);
    const extraData = encodeExtraData(options?.usePoint ?? false, options?.referrer);
    try {
      await this.publicClient.simulateContract({
        address: this.controllerAddr,
        abi: sidV3CtrlAbi,
        account: this.simulateAccount,
        functionName: "bulkRegisterSimulate",
        args: [
          this.identifier,
          [label],
          this.resolverAddr,
          calculateDuration2(year),
          this.resolverAddr,
          false,
          [extraData]
        ],
        value: this.simulateValue
      });
    } catch (e) {
      const msg = e.metaMessages;
      if (msg[0] === "Error: SimulatePrice(uint256 realPrice)") {
        const value = msg[1]?.trim().slice(1, -1);
        return BigInt(value);
      } else {
        throw e;
      }
    }
  }
  /**
   * check if the domain is available for registration
   * @param label
   */
  async getAvailable(label) {
    this.validateName(label);
    return await this.publicClient.readContract({
      address: this.controllerAddr,
      abi: sidV3CtrlAbi,
      functionName: "available",
      args: [this.identifier, label]
    });
  }
  /**
   * register a domain
   * @param label
   * @param address the address to register
   * @param year
   * @param options.referrer optional parameter. the referrer domain. only work for .bnb and .arb domain
   * @param options.usePoint optional parameter. use gift card points to pay for the domain.
   * @param options.setPrimaryName optional parameter. register and set the domain as primary name.
   */
  async register(label, address, year, options) {
    this.validateName(label);
    const setPrimaryName = options?.setPrimaryName ?? false;
    const normalizedName = label;
    const duration = calculateDuration2(year);
    const extraData = [encodeExtraData(options?.usePoint ?? false, options?.referrer)];
    const priceRes = await this.getRentPrice(normalizedName, year);
    if (priceRes === void 0) {
      throw new Error("Failed to get rent price");
    }
    const bufferedPrice = getBufferedPrice2(priceRes);
    const data = encodeFunctionData({
      abi: sidV3CtrlAbi,
      functionName: "bulkRegister",
      args: [
        this.identifier,
        [normalizedName],
        address,
        duration,
        this.resolverAddr,
        setPrimaryName,
        extraData
      ]
    });
    let gasLimit = await this.publicClient.estimateGas({
      account: address,
      to: this.controllerAddr,
      data,
      value: bufferedPrice
    });
    if (gasLimit > 0) {
      gasLimit = gasLimit * BigInt(12) / BigInt(10);
    }
    const txHash = await this.walletClient.sendTransaction({
      account: address,
      to: this.controllerAddr,
      value: bufferedPrice,
      data,
      gas: gasLimit,
      chain: null
    });
    await this.publicClient.waitForTransactionReceipt({ hash: txHash });
    return normalizedName;
  }
};

// src/index.ts
var src_default = SIDRegister;
export {
  SIDRegister,
  SIDRegisterV3,
  src_default as default,
  validateNameV3
};

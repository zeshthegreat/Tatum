import { Order, Cancellation } from "./order";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { ContractInfoV2 } from "./contract";
import { BatchContractPair } from "./pair";
import { TickSize } from "./tick_size";
import { Long } from "../../../helpers";
import * as _m0 from "protobufjs/minimal";
function createBaseMsgPlaceOrders() {
  return {
    creator: "",
    orders: [],
    contractAddr: "",
    funds: []
  };
}
export const MsgPlaceOrders = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    for (const v of message.orders) {
      Order.encode(v, writer.uint32(18).fork()).ldelim();
    }
    if (message.contractAddr !== "") {
      writer.uint32(26).string(message.contractAddr);
    }
    for (const v of message.funds) {
      Coin.encode(v, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPlaceOrders();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.creator = reader.string();
          break;
        case 2:
          message.orders.push(Order.decode(reader, reader.uint32()));
          break;
        case 3:
          message.contractAddr = reader.string();
          break;
        case 4:
          message.funds.push(Coin.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$creator, _object$orders, _object$contractAddr, _object$funds;
    const message = createBaseMsgPlaceOrders();
    message.creator = (_object$creator = object.creator) !== null && _object$creator !== void 0 ? _object$creator : "";
    message.orders = ((_object$orders = object.orders) === null || _object$orders === void 0 ? void 0 : _object$orders.map(e => Order.fromPartial(e))) || [];
    message.contractAddr = (_object$contractAddr = object.contractAddr) !== null && _object$contractAddr !== void 0 ? _object$contractAddr : "";
    message.funds = ((_object$funds = object.funds) === null || _object$funds === void 0 ? void 0 : _object$funds.map(e => Coin.fromPartial(e))) || [];
    return message;
  }
};
function createBaseMsgPlaceOrdersResponse() {
  return {
    orderIds: []
  };
}
export const MsgPlaceOrdersResponse = {
  encode(message, writer = _m0.Writer.create()) {
    writer.uint32(10).fork();
    for (const v of message.orderIds) {
      writer.uint64(v);
    }
    writer.ldelim();
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPlaceOrdersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.orderIds.push(reader.uint64());
            }
          } else {
            message.orderIds.push(reader.uint64());
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$orderIds;
    const message = createBaseMsgPlaceOrdersResponse();
    message.orderIds = ((_object$orderIds = object.orderIds) === null || _object$orderIds === void 0 ? void 0 : _object$orderIds.map(e => Long.fromValue(e))) || [];
    return message;
  }
};
function createBaseMsgCancelOrders() {
  return {
    creator: "",
    cancellations: [],
    contractAddr: ""
  };
}
export const MsgCancelOrders = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    for (const v of message.cancellations) {
      Cancellation.encode(v, writer.uint32(18).fork()).ldelim();
    }
    if (message.contractAddr !== "") {
      writer.uint32(26).string(message.contractAddr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCancelOrders();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.creator = reader.string();
          break;
        case 2:
          message.cancellations.push(Cancellation.decode(reader, reader.uint32()));
          break;
        case 3:
          message.contractAddr = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$creator2, _object$cancellations, _object$contractAddr2;
    const message = createBaseMsgCancelOrders();
    message.creator = (_object$creator2 = object.creator) !== null && _object$creator2 !== void 0 ? _object$creator2 : "";
    message.cancellations = ((_object$cancellations = object.cancellations) === null || _object$cancellations === void 0 ? void 0 : _object$cancellations.map(e => Cancellation.fromPartial(e))) || [];
    message.contractAddr = (_object$contractAddr2 = object.contractAddr) !== null && _object$contractAddr2 !== void 0 ? _object$contractAddr2 : "";
    return message;
  }
};
function createBaseMsgCancelOrdersResponse() {
  return {};
}
export const MsgCancelOrdersResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCancelOrdersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgCancelOrdersResponse();
    return message;
  }
};
function createBaseMsgRegisterContract() {
  return {
    creator: "",
    contract: ContractInfoV2.fromPartial({})
  };
}
export const MsgRegisterContract = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.contract !== undefined) {
      ContractInfoV2.encode(message.contract, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.creator = reader.string();
          break;
        case 2:
          message.contract = ContractInfoV2.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$creator3;
    const message = createBaseMsgRegisterContract();
    message.creator = (_object$creator3 = object.creator) !== null && _object$creator3 !== void 0 ? _object$creator3 : "";
    message.contract = object.contract !== undefined && object.contract !== null ? ContractInfoV2.fromPartial(object.contract) : undefined;
    return message;
  }
};
function createBaseMsgRegisterContractResponse() {
  return {};
}
export const MsgRegisterContractResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterContractResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgRegisterContractResponse();
    return message;
  }
};
function createBaseMsgContractDepositRent() {
  return {
    contractAddr: "",
    amount: Long.UZERO,
    sender: ""
  };
}
export const MsgContractDepositRent = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractAddr !== "") {
      writer.uint32(10).string(message.contractAddr);
    }
    if (!message.amount.isZero()) {
      writer.uint32(16).uint64(message.amount);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgContractDepositRent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddr = reader.string();
          break;
        case 2:
          message.amount = reader.uint64();
          break;
        case 3:
          message.sender = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr3, _object$sender;
    const message = createBaseMsgContractDepositRent();
    message.contractAddr = (_object$contractAddr3 = object.contractAddr) !== null && _object$contractAddr3 !== void 0 ? _object$contractAddr3 : "";
    message.amount = object.amount !== undefined && object.amount !== null ? Long.fromValue(object.amount) : Long.UZERO;
    message.sender = (_object$sender = object.sender) !== null && _object$sender !== void 0 ? _object$sender : "";
    return message;
  }
};
function createBaseMsgContractDepositRentResponse() {
  return {};
}
export const MsgContractDepositRentResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgContractDepositRentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgContractDepositRentResponse();
    return message;
  }
};
function createBaseMsgUnregisterContract() {
  return {
    creator: "",
    contractAddr: ""
  };
}
export const MsgUnregisterContract = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.contractAddr !== "") {
      writer.uint32(18).string(message.contractAddr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnregisterContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.creator = reader.string();
          break;
        case 2:
          message.contractAddr = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$creator4, _object$contractAddr4;
    const message = createBaseMsgUnregisterContract();
    message.creator = (_object$creator4 = object.creator) !== null && _object$creator4 !== void 0 ? _object$creator4 : "";
    message.contractAddr = (_object$contractAddr4 = object.contractAddr) !== null && _object$contractAddr4 !== void 0 ? _object$contractAddr4 : "";
    return message;
  }
};
function createBaseMsgUnregisterContractResponse() {
  return {};
}
export const MsgUnregisterContractResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnregisterContractResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgUnregisterContractResponse();
    return message;
  }
};
function createBaseMsgRegisterPairs() {
  return {
    creator: "",
    batchcontractpair: []
  };
}
export const MsgRegisterPairs = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    for (const v of message.batchcontractpair) {
      BatchContractPair.encode(v, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterPairs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.creator = reader.string();
          break;
        case 3:
          message.batchcontractpair.push(BatchContractPair.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$creator5, _object$batchcontract;
    const message = createBaseMsgRegisterPairs();
    message.creator = (_object$creator5 = object.creator) !== null && _object$creator5 !== void 0 ? _object$creator5 : "";
    message.batchcontractpair = ((_object$batchcontract = object.batchcontractpair) === null || _object$batchcontract === void 0 ? void 0 : _object$batchcontract.map(e => BatchContractPair.fromPartial(e))) || [];
    return message;
  }
};
function createBaseMsgRegisterPairsResponse() {
  return {};
}
export const MsgRegisterPairsResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterPairsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgRegisterPairsResponse();
    return message;
  }
};
function createBaseMsgUpdatePriceTickSize() {
  return {
    creator: "",
    tickSizeList: []
  };
}
export const MsgUpdatePriceTickSize = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    for (const v of message.tickSizeList) {
      TickSize.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdatePriceTickSize();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.creator = reader.string();
          break;
        case 2:
          message.tickSizeList.push(TickSize.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$creator6, _object$tickSizeList;
    const message = createBaseMsgUpdatePriceTickSize();
    message.creator = (_object$creator6 = object.creator) !== null && _object$creator6 !== void 0 ? _object$creator6 : "";
    message.tickSizeList = ((_object$tickSizeList = object.tickSizeList) === null || _object$tickSizeList === void 0 ? void 0 : _object$tickSizeList.map(e => TickSize.fromPartial(e))) || [];
    return message;
  }
};
function createBaseMsgUpdateQuantityTickSize() {
  return {
    creator: "",
    tickSizeList: []
  };
}
export const MsgUpdateQuantityTickSize = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    for (const v of message.tickSizeList) {
      TickSize.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateQuantityTickSize();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.creator = reader.string();
          break;
        case 2:
          message.tickSizeList.push(TickSize.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$creator7, _object$tickSizeList2;
    const message = createBaseMsgUpdateQuantityTickSize();
    message.creator = (_object$creator7 = object.creator) !== null && _object$creator7 !== void 0 ? _object$creator7 : "";
    message.tickSizeList = ((_object$tickSizeList2 = object.tickSizeList) === null || _object$tickSizeList2 === void 0 ? void 0 : _object$tickSizeList2.map(e => TickSize.fromPartial(e))) || [];
    return message;
  }
};
function createBaseMsgUpdateTickSizeResponse() {
  return {};
}
export const MsgUpdateTickSizeResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateTickSizeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgUpdateTickSizeResponse();
    return message;
  }
};
function createBaseMsgUnsuspendContract() {
  return {
    creator: "",
    contractAddr: ""
  };
}
export const MsgUnsuspendContract = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.contractAddr !== "") {
      writer.uint32(18).string(message.contractAddr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnsuspendContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.creator = reader.string();
          break;
        case 2:
          message.contractAddr = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$creator8, _object$contractAddr5;
    const message = createBaseMsgUnsuspendContract();
    message.creator = (_object$creator8 = object.creator) !== null && _object$creator8 !== void 0 ? _object$creator8 : "";
    message.contractAddr = (_object$contractAddr5 = object.contractAddr) !== null && _object$contractAddr5 !== void 0 ? _object$contractAddr5 : "";
    return message;
  }
};
function createBaseMsgUnsuspendContractResponse() {
  return {};
}
export const MsgUnsuspendContractResponse = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnsuspendContractResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseMsgUnsuspendContractResponse();
    return message;
  }
};
import * as _m0 from "protobufjs/minimal";
function createBasePair() {
  return {
    priceDenom: "",
    assetDenom: "",
    priceTicksize: undefined,
    quantityTicksize: undefined
  };
}
export const Pair = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.priceDenom !== "") {
      writer.uint32(10).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(18).string(message.assetDenom);
    }
    if (message.priceTicksize !== undefined) {
      writer.uint32(26).string(message.priceTicksize);
    }
    if (message.quantityTicksize !== undefined) {
      writer.uint32(34).string(message.quantityTicksize);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.priceDenom = reader.string();
          break;
        case 2:
          message.assetDenom = reader.string();
          break;
        case 3:
          message.priceTicksize = reader.string();
          break;
        case 4:
          message.quantityTicksize = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$priceDenom, _object$assetDenom, _object$priceTicksize, _object$quantityTicks;
    const message = createBasePair();
    message.priceDenom = (_object$priceDenom = object.priceDenom) !== null && _object$priceDenom !== void 0 ? _object$priceDenom : "";
    message.assetDenom = (_object$assetDenom = object.assetDenom) !== null && _object$assetDenom !== void 0 ? _object$assetDenom : "";
    message.priceTicksize = (_object$priceTicksize = object.priceTicksize) !== null && _object$priceTicksize !== void 0 ? _object$priceTicksize : undefined;
    message.quantityTicksize = (_object$quantityTicks = object.quantityTicksize) !== null && _object$quantityTicks !== void 0 ? _object$quantityTicks : undefined;
    return message;
  }
};
function createBaseBatchContractPair() {
  return {
    contractAddr: "",
    pairs: []
  };
}
export const BatchContractPair = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractAddr !== "") {
      writer.uint32(10).string(message.contractAddr);
    }
    for (const v of message.pairs) {
      Pair.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchContractPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddr = reader.string();
          break;
        case 2:
          message.pairs.push(Pair.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr, _object$pairs;
    const message = createBaseBatchContractPair();
    message.contractAddr = (_object$contractAddr = object.contractAddr) !== null && _object$contractAddr !== void 0 ? _object$contractAddr : "";
    message.pairs = ((_object$pairs = object.pairs) === null || _object$pairs === void 0 ? void 0 : _object$pairs.map(e => Pair.fromPartial(e))) || [];
    return message;
  }
};
import { Long } from "../../../helpers";
import * as _m0 from "protobufjs/minimal";
function createBaseParams() {
  return {
    votePeriod: Long.UZERO,
    voteThreshold: "",
    rewardBand: "",
    whitelist: [],
    slashFraction: "",
    slashWindow: Long.UZERO,
    minValidPerWindow: "",
    lookbackDuration: Long.UZERO
  };
}
export const Params = {
  encode(message, writer = _m0.Writer.create()) {
    if (!message.votePeriod.isZero()) {
      writer.uint32(8).uint64(message.votePeriod);
    }
    if (message.voteThreshold !== "") {
      writer.uint32(18).string(message.voteThreshold);
    }
    if (message.rewardBand !== "") {
      writer.uint32(26).string(message.rewardBand);
    }
    for (const v of message.whitelist) {
      Denom.encode(v, writer.uint32(34).fork()).ldelim();
    }
    if (message.slashFraction !== "") {
      writer.uint32(42).string(message.slashFraction);
    }
    if (!message.slashWindow.isZero()) {
      writer.uint32(48).uint64(message.slashWindow);
    }
    if (message.minValidPerWindow !== "") {
      writer.uint32(58).string(message.minValidPerWindow);
    }
    if (!message.lookbackDuration.isZero()) {
      writer.uint32(72).uint64(message.lookbackDuration);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.votePeriod = reader.uint64();
          break;
        case 2:
          message.voteThreshold = reader.string();
          break;
        case 3:
          message.rewardBand = reader.string();
          break;
        case 4:
          message.whitelist.push(Denom.decode(reader, reader.uint32()));
          break;
        case 5:
          message.slashFraction = reader.string();
          break;
        case 6:
          message.slashWindow = reader.uint64();
          break;
        case 7:
          message.minValidPerWindow = reader.string();
          break;
        case 9:
          message.lookbackDuration = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$voteThreshold, _object$rewardBand, _object$whitelist, _object$slashFraction, _object$minValidPerWi;
    const message = createBaseParams();
    message.votePeriod = object.votePeriod !== undefined && object.votePeriod !== null ? Long.fromValue(object.votePeriod) : Long.UZERO;
    message.voteThreshold = (_object$voteThreshold = object.voteThreshold) !== null && _object$voteThreshold !== void 0 ? _object$voteThreshold : "";
    message.rewardBand = (_object$rewardBand = object.rewardBand) !== null && _object$rewardBand !== void 0 ? _object$rewardBand : "";
    message.whitelist = ((_object$whitelist = object.whitelist) === null || _object$whitelist === void 0 ? void 0 : _object$whitelist.map(e => Denom.fromPartial(e))) || [];
    message.slashFraction = (_object$slashFraction = object.slashFraction) !== null && _object$slashFraction !== void 0 ? _object$slashFraction : "";
    message.slashWindow = object.slashWindow !== undefined && object.slashWindow !== null ? Long.fromValue(object.slashWindow) : Long.UZERO;
    message.minValidPerWindow = (_object$minValidPerWi = object.minValidPerWindow) !== null && _object$minValidPerWi !== void 0 ? _object$minValidPerWi : "";
    message.lookbackDuration = object.lookbackDuration !== undefined && object.lookbackDuration !== null ? Long.fromValue(object.lookbackDuration) : Long.UZERO;
    return message;
  }
};
function createBaseDenom() {
  return {
    name: ""
  };
}
export const Denom = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$name;
    const message = createBaseDenom();
    message.name = (_object$name = object.name) !== null && _object$name !== void 0 ? _object$name : "";
    return message;
  }
};
function createBaseAggregateExchangeRateVote() {
  return {
    exchangeRateTuples: [],
    voter: ""
  };
}
export const AggregateExchangeRateVote = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.exchangeRateTuples) {
      ExchangeRateTuple.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.voter !== "") {
      writer.uint32(18).string(message.voter);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregateExchangeRateVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.exchangeRateTuples.push(ExchangeRateTuple.decode(reader, reader.uint32()));
          break;
        case 2:
          message.voter = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$exchangeRateT, _object$voter;
    const message = createBaseAggregateExchangeRateVote();
    message.exchangeRateTuples = ((_object$exchangeRateT = object.exchangeRateTuples) === null || _object$exchangeRateT === void 0 ? void 0 : _object$exchangeRateT.map(e => ExchangeRateTuple.fromPartial(e))) || [];
    message.voter = (_object$voter = object.voter) !== null && _object$voter !== void 0 ? _object$voter : "";
    return message;
  }
};
function createBaseExchangeRateTuple() {
  return {
    denom: "",
    exchangeRate: ""
  };
}
export const ExchangeRateTuple = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.exchangeRate !== "") {
      writer.uint32(18).string(message.exchangeRate);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExchangeRateTuple();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        case 2:
          message.exchangeRate = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$denom, _object$exchangeRate;
    const message = createBaseExchangeRateTuple();
    message.denom = (_object$denom = object.denom) !== null && _object$denom !== void 0 ? _object$denom : "";
    message.exchangeRate = (_object$exchangeRate = object.exchangeRate) !== null && _object$exchangeRate !== void 0 ? _object$exchangeRate : "";
    return message;
  }
};
function createBaseOracleExchangeRate() {
  return {
    exchangeRate: "",
    lastUpdate: ""
  };
}
export const OracleExchangeRate = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.exchangeRate !== "") {
      writer.uint32(10).string(message.exchangeRate);
    }
    if (message.lastUpdate !== "") {
      writer.uint32(18).string(message.lastUpdate);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOracleExchangeRate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.exchangeRate = reader.string();
          break;
        case 2:
          message.lastUpdate = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$exchangeRate2, _object$lastUpdate;
    const message = createBaseOracleExchangeRate();
    message.exchangeRate = (_object$exchangeRate2 = object.exchangeRate) !== null && _object$exchangeRate2 !== void 0 ? _object$exchangeRate2 : "";
    message.lastUpdate = (_object$lastUpdate = object.lastUpdate) !== null && _object$lastUpdate !== void 0 ? _object$lastUpdate : "";
    return message;
  }
};
function createBasePriceSnapshotItem() {
  return {
    denom: "",
    oracleExchangeRate: OracleExchangeRate.fromPartial({})
  };
}
export const PriceSnapshotItem = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.oracleExchangeRate !== undefined) {
      OracleExchangeRate.encode(message.oracleExchangeRate, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceSnapshotItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        case 2:
          message.oracleExchangeRate = OracleExchangeRate.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$denom2;
    const message = createBasePriceSnapshotItem();
    message.denom = (_object$denom2 = object.denom) !== null && _object$denom2 !== void 0 ? _object$denom2 : "";
    message.oracleExchangeRate = object.oracleExchangeRate !== undefined && object.oracleExchangeRate !== null ? OracleExchangeRate.fromPartial(object.oracleExchangeRate) : undefined;
    return message;
  }
};
function createBasePriceSnapshot() {
  return {
    snapshotTimestamp: Long.ZERO,
    priceSnapshotItems: []
  };
}
export const PriceSnapshot = {
  encode(message, writer = _m0.Writer.create()) {
    if (!message.snapshotTimestamp.isZero()) {
      writer.uint32(8).int64(message.snapshotTimestamp);
    }
    for (const v of message.priceSnapshotItems) {
      PriceSnapshotItem.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePriceSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.snapshotTimestamp = reader.int64();
          break;
        case 2:
          message.priceSnapshotItems.push(PriceSnapshotItem.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$priceSnapshot;
    const message = createBasePriceSnapshot();
    message.snapshotTimestamp = object.snapshotTimestamp !== undefined && object.snapshotTimestamp !== null ? Long.fromValue(object.snapshotTimestamp) : Long.ZERO;
    message.priceSnapshotItems = ((_object$priceSnapshot = object.priceSnapshotItems) === null || _object$priceSnapshot === void 0 ? void 0 : _object$priceSnapshot.map(e => PriceSnapshotItem.fromPartial(e))) || [];
    return message;
  }
};
function createBaseOracleTwap() {
  return {
    denom: "",
    twap: "",
    lookbackSeconds: Long.ZERO
  };
}
export const OracleTwap = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.twap !== "") {
      writer.uint32(18).string(message.twap);
    }
    if (!message.lookbackSeconds.isZero()) {
      writer.uint32(24).int64(message.lookbackSeconds);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOracleTwap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        case 2:
          message.twap = reader.string();
          break;
        case 3:
          message.lookbackSeconds = reader.int64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$denom3, _object$twap;
    const message = createBaseOracleTwap();
    message.denom = (_object$denom3 = object.denom) !== null && _object$denom3 !== void 0 ? _object$denom3 : "";
    message.twap = (_object$twap = object.twap) !== null && _object$twap !== void 0 ? _object$twap : "";
    message.lookbackSeconds = object.lookbackSeconds !== undefined && object.lookbackSeconds !== null ? Long.fromValue(object.lookbackSeconds) : Long.ZERO;
    return message;
  }
};
function createBaseVotePenaltyCounter() {
  return {
    missCount: Long.UZERO,
    abstainCount: Long.UZERO,
    successCount: Long.UZERO
  };
}
export const VotePenaltyCounter = {
  encode(message, writer = _m0.Writer.create()) {
    if (!message.missCount.isZero()) {
      writer.uint32(8).uint64(message.missCount);
    }
    if (!message.abstainCount.isZero()) {
      writer.uint32(16).uint64(message.abstainCount);
    }
    if (!message.successCount.isZero()) {
      writer.uint32(24).uint64(message.successCount);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVotePenaltyCounter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.missCount = reader.uint64();
          break;
        case 2:
          message.abstainCount = reader.uint64();
          break;
        case 3:
          message.successCount = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseVotePenaltyCounter();
    message.missCount = object.missCount !== undefined && object.missCount !== null ? Long.fromValue(object.missCount) : Long.UZERO;
    message.abstainCount = object.abstainCount !== undefined && object.abstainCount !== null ? Long.fromValue(object.abstainCount) : Long.UZERO;
    message.successCount = object.successCount !== undefined && object.successCount !== null ? Long.fromValue(object.successCount) : Long.UZERO;
    return message;
  }
};
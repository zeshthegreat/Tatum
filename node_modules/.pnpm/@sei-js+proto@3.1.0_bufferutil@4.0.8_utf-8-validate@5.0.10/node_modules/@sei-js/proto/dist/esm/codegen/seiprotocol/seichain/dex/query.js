import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Order } from "./order";
import { Params } from "./params";
import { LongBook } from "./long_book";
import { ShortBook } from "./short_book";
import { Price, PriceCandlestick } from "./price";
import { Twap } from "./twap";
import { AssetMetadata } from "./asset_list";
import { Pair } from "./pair";
import { ContractInfoV2 } from "./contract";
import { MatchResult } from "./match_result";
import { Long } from "../../../helpers";
import * as _m0 from "protobufjs/minimal";
/** QueryParamsRequest is request type for the Query/Params RPC method. */

function createBaseQueryParamsRequest() {
  return {};
}
export const QueryParamsRequest = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseQueryParamsRequest();
    return message;
  }
};
function createBaseQueryParamsResponse() {
  return {
    params: Params.fromPartial({})
  };
}
export const QueryParamsResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.params = Params.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryParamsResponse();
    message.params = object.params !== undefined && object.params !== null ? Params.fromPartial(object.params) : undefined;
    return message;
  }
};
function createBaseQueryGetLongBookRequest() {
  return {
    price: "",
    contractAddr: "",
    priceDenom: "",
    assetDenom: ""
  };
}
export const QueryGetLongBookRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.price !== "") {
      writer.uint32(10).string(message.price);
    }
    if (message.contractAddr !== "") {
      writer.uint32(18).string(message.contractAddr);
    }
    if (message.priceDenom !== "") {
      writer.uint32(26).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(34).string(message.assetDenom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetLongBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.price = reader.string();
          break;
        case 2:
          message.contractAddr = reader.string();
          break;
        case 3:
          message.priceDenom = reader.string();
          break;
        case 4:
          message.assetDenom = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$price, _object$contractAddr, _object$priceDenom, _object$assetDenom;
    const message = createBaseQueryGetLongBookRequest();
    message.price = (_object$price = object.price) !== null && _object$price !== void 0 ? _object$price : "";
    message.contractAddr = (_object$contractAddr = object.contractAddr) !== null && _object$contractAddr !== void 0 ? _object$contractAddr : "";
    message.priceDenom = (_object$priceDenom = object.priceDenom) !== null && _object$priceDenom !== void 0 ? _object$priceDenom : "";
    message.assetDenom = (_object$assetDenom = object.assetDenom) !== null && _object$assetDenom !== void 0 ? _object$assetDenom : "";
    return message;
  }
};
function createBaseQueryGetLongBookResponse() {
  return {
    LongBook: LongBook.fromPartial({})
  };
}
export const QueryGetLongBookResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.LongBook !== undefined) {
      LongBook.encode(message.LongBook, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetLongBookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.LongBook = LongBook.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryGetLongBookResponse();
    message.LongBook = object.LongBook !== undefined && object.LongBook !== null ? LongBook.fromPartial(object.LongBook) : undefined;
    return message;
  }
};
function createBaseQueryAllLongBookRequest() {
  return {
    pagination: PageRequest.fromPartial({}),
    contractAddr: "",
    priceDenom: "",
    assetDenom: ""
  };
}
export const QueryAllLongBookRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.contractAddr !== "") {
      writer.uint32(18).string(message.contractAddr);
    }
    if (message.priceDenom !== "") {
      writer.uint32(26).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(34).string(message.assetDenom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllLongBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pagination = PageRequest.decode(reader, reader.uint32());
          break;
        case 2:
          message.contractAddr = reader.string();
          break;
        case 3:
          message.priceDenom = reader.string();
          break;
        case 4:
          message.assetDenom = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr2, _object$priceDenom2, _object$assetDenom2;
    const message = createBaseQueryAllLongBookRequest();
    message.pagination = object.pagination !== undefined && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : undefined;
    message.contractAddr = (_object$contractAddr2 = object.contractAddr) !== null && _object$contractAddr2 !== void 0 ? _object$contractAddr2 : "";
    message.priceDenom = (_object$priceDenom2 = object.priceDenom) !== null && _object$priceDenom2 !== void 0 ? _object$priceDenom2 : "";
    message.assetDenom = (_object$assetDenom2 = object.assetDenom) !== null && _object$assetDenom2 !== void 0 ? _object$assetDenom2 : "";
    return message;
  }
};
function createBaseQueryAllLongBookResponse() {
  return {
    LongBook: [],
    pagination: PageResponse.fromPartial({})
  };
}
export const QueryAllLongBookResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.LongBook) {
      LongBook.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllLongBookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.LongBook.push(LongBook.decode(reader, reader.uint32()));
          break;
        case 2:
          message.pagination = PageResponse.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$LongBook;
    const message = createBaseQueryAllLongBookResponse();
    message.LongBook = ((_object$LongBook = object.LongBook) === null || _object$LongBook === void 0 ? void 0 : _object$LongBook.map(e => LongBook.fromPartial(e))) || [];
    message.pagination = object.pagination !== undefined && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : undefined;
    return message;
  }
};
function createBaseQueryGetShortBookRequest() {
  return {
    price: "",
    contractAddr: "",
    priceDenom: "",
    assetDenom: ""
  };
}
export const QueryGetShortBookRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.price !== "") {
      writer.uint32(10).string(message.price);
    }
    if (message.contractAddr !== "") {
      writer.uint32(18).string(message.contractAddr);
    }
    if (message.priceDenom !== "") {
      writer.uint32(26).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(34).string(message.assetDenom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetShortBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.price = reader.string();
          break;
        case 2:
          message.contractAddr = reader.string();
          break;
        case 3:
          message.priceDenom = reader.string();
          break;
        case 4:
          message.assetDenom = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$price2, _object$contractAddr3, _object$priceDenom3, _object$assetDenom3;
    const message = createBaseQueryGetShortBookRequest();
    message.price = (_object$price2 = object.price) !== null && _object$price2 !== void 0 ? _object$price2 : "";
    message.contractAddr = (_object$contractAddr3 = object.contractAddr) !== null && _object$contractAddr3 !== void 0 ? _object$contractAddr3 : "";
    message.priceDenom = (_object$priceDenom3 = object.priceDenom) !== null && _object$priceDenom3 !== void 0 ? _object$priceDenom3 : "";
    message.assetDenom = (_object$assetDenom3 = object.assetDenom) !== null && _object$assetDenom3 !== void 0 ? _object$assetDenom3 : "";
    return message;
  }
};
function createBaseQueryGetShortBookResponse() {
  return {
    ShortBook: ShortBook.fromPartial({})
  };
}
export const QueryGetShortBookResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.ShortBook !== undefined) {
      ShortBook.encode(message.ShortBook, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetShortBookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ShortBook = ShortBook.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryGetShortBookResponse();
    message.ShortBook = object.ShortBook !== undefined && object.ShortBook !== null ? ShortBook.fromPartial(object.ShortBook) : undefined;
    return message;
  }
};
function createBaseQueryAllShortBookRequest() {
  return {
    pagination: PageRequest.fromPartial({}),
    contractAddr: "",
    priceDenom: "",
    assetDenom: ""
  };
}
export const QueryAllShortBookRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    if (message.contractAddr !== "") {
      writer.uint32(18).string(message.contractAddr);
    }
    if (message.priceDenom !== "") {
      writer.uint32(26).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(34).string(message.assetDenom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllShortBookRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pagination = PageRequest.decode(reader, reader.uint32());
          break;
        case 2:
          message.contractAddr = reader.string();
          break;
        case 3:
          message.priceDenom = reader.string();
          break;
        case 4:
          message.assetDenom = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr4, _object$priceDenom4, _object$assetDenom4;
    const message = createBaseQueryAllShortBookRequest();
    message.pagination = object.pagination !== undefined && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : undefined;
    message.contractAddr = (_object$contractAddr4 = object.contractAddr) !== null && _object$contractAddr4 !== void 0 ? _object$contractAddr4 : "";
    message.priceDenom = (_object$priceDenom4 = object.priceDenom) !== null && _object$priceDenom4 !== void 0 ? _object$priceDenom4 : "";
    message.assetDenom = (_object$assetDenom4 = object.assetDenom) !== null && _object$assetDenom4 !== void 0 ? _object$assetDenom4 : "";
    return message;
  }
};
function createBaseQueryAllShortBookResponse() {
  return {
    ShortBook: [],
    pagination: PageResponse.fromPartial({})
  };
}
export const QueryAllShortBookResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.ShortBook) {
      ShortBook.encode(v, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllShortBookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ShortBook.push(ShortBook.decode(reader, reader.uint32()));
          break;
        case 2:
          message.pagination = PageResponse.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$ShortBook;
    const message = createBaseQueryAllShortBookResponse();
    message.ShortBook = ((_object$ShortBook = object.ShortBook) === null || _object$ShortBook === void 0 ? void 0 : _object$ShortBook.map(e => ShortBook.fromPartial(e))) || [];
    message.pagination = object.pagination !== undefined && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : undefined;
    return message;
  }
};
function createBaseQueryGetPricesRequest() {
  return {
    priceDenom: "",
    assetDenom: "",
    contractAddr: ""
  };
}
export const QueryGetPricesRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.priceDenom !== "") {
      writer.uint32(10).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(18).string(message.assetDenom);
    }
    if (message.contractAddr !== "") {
      writer.uint32(26).string(message.contractAddr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPricesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.priceDenom = reader.string();
          break;
        case 2:
          message.assetDenom = reader.string();
          break;
        case 3:
          message.contractAddr = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$priceDenom5, _object$assetDenom5, _object$contractAddr5;
    const message = createBaseQueryGetPricesRequest();
    message.priceDenom = (_object$priceDenom5 = object.priceDenom) !== null && _object$priceDenom5 !== void 0 ? _object$priceDenom5 : "";
    message.assetDenom = (_object$assetDenom5 = object.assetDenom) !== null && _object$assetDenom5 !== void 0 ? _object$assetDenom5 : "";
    message.contractAddr = (_object$contractAddr5 = object.contractAddr) !== null && _object$contractAddr5 !== void 0 ? _object$contractAddr5 : "";
    return message;
  }
};
function createBaseQueryGetPricesResponse() {
  return {
    prices: []
  };
}
export const QueryGetPricesResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.prices) {
      Price.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPricesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.prices.push(Price.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$prices;
    const message = createBaseQueryGetPricesResponse();
    message.prices = ((_object$prices = object.prices) === null || _object$prices === void 0 ? void 0 : _object$prices.map(e => Price.fromPartial(e))) || [];
    return message;
  }
};
function createBaseQueryGetPriceRequest() {
  return {
    priceDenom: "",
    assetDenom: "",
    contractAddr: "",
    timestamp: Long.UZERO
  };
}
export const QueryGetPriceRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.priceDenom !== "") {
      writer.uint32(10).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(18).string(message.assetDenom);
    }
    if (message.contractAddr !== "") {
      writer.uint32(26).string(message.contractAddr);
    }
    if (!message.timestamp.isZero()) {
      writer.uint32(32).uint64(message.timestamp);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPriceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.priceDenom = reader.string();
          break;
        case 2:
          message.assetDenom = reader.string();
          break;
        case 3:
          message.contractAddr = reader.string();
          break;
        case 4:
          message.timestamp = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$priceDenom6, _object$assetDenom6, _object$contractAddr6;
    const message = createBaseQueryGetPriceRequest();
    message.priceDenom = (_object$priceDenom6 = object.priceDenom) !== null && _object$priceDenom6 !== void 0 ? _object$priceDenom6 : "";
    message.assetDenom = (_object$assetDenom6 = object.assetDenom) !== null && _object$assetDenom6 !== void 0 ? _object$assetDenom6 : "";
    message.contractAddr = (_object$contractAddr6 = object.contractAddr) !== null && _object$contractAddr6 !== void 0 ? _object$contractAddr6 : "";
    message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? Long.fromValue(object.timestamp) : Long.UZERO;
    return message;
  }
};
function createBaseQueryGetPriceResponse() {
  return {
    price: Price.fromPartial({}),
    found: false
  };
}
export const QueryGetPriceResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.price !== undefined) {
      Price.encode(message.price, writer.uint32(10).fork()).ldelim();
    }
    if (message.found === true) {
      writer.uint32(16).bool(message.found);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPriceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.price = Price.decode(reader, reader.uint32());
          break;
        case 2:
          message.found = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$found;
    const message = createBaseQueryGetPriceResponse();
    message.price = object.price !== undefined && object.price !== null ? Price.fromPartial(object.price) : undefined;
    message.found = (_object$found = object.found) !== null && _object$found !== void 0 ? _object$found : false;
    return message;
  }
};
function createBaseQueryGetLatestPriceRequest() {
  return {
    priceDenom: "",
    assetDenom: "",
    contractAddr: ""
  };
}
export const QueryGetLatestPriceRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.priceDenom !== "") {
      writer.uint32(10).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(18).string(message.assetDenom);
    }
    if (message.contractAddr !== "") {
      writer.uint32(26).string(message.contractAddr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetLatestPriceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.priceDenom = reader.string();
          break;
        case 2:
          message.assetDenom = reader.string();
          break;
        case 3:
          message.contractAddr = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$priceDenom7, _object$assetDenom7, _object$contractAddr7;
    const message = createBaseQueryGetLatestPriceRequest();
    message.priceDenom = (_object$priceDenom7 = object.priceDenom) !== null && _object$priceDenom7 !== void 0 ? _object$priceDenom7 : "";
    message.assetDenom = (_object$assetDenom7 = object.assetDenom) !== null && _object$assetDenom7 !== void 0 ? _object$assetDenom7 : "";
    message.contractAddr = (_object$contractAddr7 = object.contractAddr) !== null && _object$contractAddr7 !== void 0 ? _object$contractAddr7 : "";
    return message;
  }
};
function createBaseQueryGetLatestPriceResponse() {
  return {
    price: Price.fromPartial({})
  };
}
export const QueryGetLatestPriceResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.price !== undefined) {
      Price.encode(message.price, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetLatestPriceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.price = Price.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryGetLatestPriceResponse();
    message.price = object.price !== undefined && object.price !== null ? Price.fromPartial(object.price) : undefined;
    return message;
  }
};
function createBaseQueryGetTwapsRequest() {
  return {
    contractAddr: "",
    lookbackSeconds: Long.UZERO
  };
}
export const QueryGetTwapsRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractAddr !== "") {
      writer.uint32(10).string(message.contractAddr);
    }
    if (!message.lookbackSeconds.isZero()) {
      writer.uint32(16).uint64(message.lookbackSeconds);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTwapsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddr = reader.string();
          break;
        case 2:
          message.lookbackSeconds = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr8;
    const message = createBaseQueryGetTwapsRequest();
    message.contractAddr = (_object$contractAddr8 = object.contractAddr) !== null && _object$contractAddr8 !== void 0 ? _object$contractAddr8 : "";
    message.lookbackSeconds = object.lookbackSeconds !== undefined && object.lookbackSeconds !== null ? Long.fromValue(object.lookbackSeconds) : Long.UZERO;
    return message;
  }
};
function createBaseQueryGetTwapsResponse() {
  return {
    twaps: []
  };
}
export const QueryGetTwapsResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.twaps) {
      Twap.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetTwapsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.twaps.push(Twap.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$twaps;
    const message = createBaseQueryGetTwapsResponse();
    message.twaps = ((_object$twaps = object.twaps) === null || _object$twaps === void 0 ? void 0 : _object$twaps.map(e => Twap.fromPartial(e))) || [];
    return message;
  }
};
function createBaseQueryAssetListRequest() {
  return {};
}
export const QueryAssetListRequest = {
  encode(_, writer = _m0.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAssetListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(_) {
    const message = createBaseQueryAssetListRequest();
    return message;
  }
};
function createBaseQueryAssetListResponse() {
  return {
    assetList: []
  };
}
export const QueryAssetListResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.assetList) {
      AssetMetadata.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAssetListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.assetList.push(AssetMetadata.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$assetList;
    const message = createBaseQueryAssetListResponse();
    message.assetList = ((_object$assetList = object.assetList) === null || _object$assetList === void 0 ? void 0 : _object$assetList.map(e => AssetMetadata.fromPartial(e))) || [];
    return message;
  }
};
function createBaseQueryAssetMetadataRequest() {
  return {
    denom: ""
  };
}
export const QueryAssetMetadataRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAssetMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$denom;
    const message = createBaseQueryAssetMetadataRequest();
    message.denom = (_object$denom = object.denom) !== null && _object$denom !== void 0 ? _object$denom : "";
    return message;
  }
};
function createBaseQueryAssetMetadataResponse() {
  return {
    metadata: AssetMetadata.fromPartial({})
  };
}
export const QueryAssetMetadataResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.metadata !== undefined) {
      AssetMetadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAssetMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.metadata = AssetMetadata.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryAssetMetadataResponse();
    message.metadata = object.metadata !== undefined && object.metadata !== null ? AssetMetadata.fromPartial(object.metadata) : undefined;
    return message;
  }
};
function createBaseQueryRegisteredPairsRequest() {
  return {
    contractAddr: ""
  };
}
export const QueryRegisteredPairsRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractAddr !== "") {
      writer.uint32(10).string(message.contractAddr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRegisteredPairsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddr = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr9;
    const message = createBaseQueryRegisteredPairsRequest();
    message.contractAddr = (_object$contractAddr9 = object.contractAddr) !== null && _object$contractAddr9 !== void 0 ? _object$contractAddr9 : "";
    return message;
  }
};
function createBaseQueryRegisteredPairsResponse() {
  return {
    pairs: []
  };
}
export const QueryRegisteredPairsResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.pairs) {
      Pair.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRegisteredPairsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pairs.push(Pair.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$pairs;
    const message = createBaseQueryRegisteredPairsResponse();
    message.pairs = ((_object$pairs = object.pairs) === null || _object$pairs === void 0 ? void 0 : _object$pairs.map(e => Pair.fromPartial(e))) || [];
    return message;
  }
};
function createBaseQueryRegisteredContractRequest() {
  return {
    contractAddr: ""
  };
}
export const QueryRegisteredContractRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractAddr !== "") {
      writer.uint32(10).string(message.contractAddr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRegisteredContractRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddr = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr10;
    const message = createBaseQueryRegisteredContractRequest();
    message.contractAddr = (_object$contractAddr10 = object.contractAddr) !== null && _object$contractAddr10 !== void 0 ? _object$contractAddr10 : "";
    return message;
  }
};
function createBaseQueryRegisteredContractResponse() {
  return {
    contractInfo: ContractInfoV2.fromPartial({})
  };
}
export const QueryRegisteredContractResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractInfo !== undefined) {
      ContractInfoV2.encode(message.contractInfo, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRegisteredContractResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractInfo = ContractInfoV2.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryRegisteredContractResponse();
    message.contractInfo = object.contractInfo !== undefined && object.contractInfo !== null ? ContractInfoV2.fromPartial(object.contractInfo) : undefined;
    return message;
  }
};
function createBaseQueryGetOrdersRequest() {
  return {
    contractAddr: "",
    account: ""
  };
}
export const QueryGetOrdersRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractAddr !== "") {
      writer.uint32(10).string(message.contractAddr);
    }
    if (message.account !== "") {
      writer.uint32(18).string(message.account);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetOrdersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddr = reader.string();
          break;
        case 2:
          message.account = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr11, _object$account;
    const message = createBaseQueryGetOrdersRequest();
    message.contractAddr = (_object$contractAddr11 = object.contractAddr) !== null && _object$contractAddr11 !== void 0 ? _object$contractAddr11 : "";
    message.account = (_object$account = object.account) !== null && _object$account !== void 0 ? _object$account : "";
    return message;
  }
};
function createBaseQueryGetOrdersResponse() {
  return {
    orders: []
  };
}
export const QueryGetOrdersResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.orders) {
      Order.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetOrdersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.orders.push(Order.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$orders;
    const message = createBaseQueryGetOrdersResponse();
    message.orders = ((_object$orders = object.orders) === null || _object$orders === void 0 ? void 0 : _object$orders.map(e => Order.fromPartial(e))) || [];
    return message;
  }
};
function createBaseQueryGetOrderByIDRequest() {
  return {
    contractAddr: "",
    priceDenom: "",
    assetDenom: "",
    id: Long.UZERO
  };
}
export const QueryGetOrderByIDRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractAddr !== "") {
      writer.uint32(10).string(message.contractAddr);
    }
    if (message.priceDenom !== "") {
      writer.uint32(18).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(26).string(message.assetDenom);
    }
    if (!message.id.isZero()) {
      writer.uint32(32).uint64(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetOrderByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddr = reader.string();
          break;
        case 2:
          message.priceDenom = reader.string();
          break;
        case 3:
          message.assetDenom = reader.string();
          break;
        case 4:
          message.id = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr12, _object$priceDenom8, _object$assetDenom8;
    const message = createBaseQueryGetOrderByIDRequest();
    message.contractAddr = (_object$contractAddr12 = object.contractAddr) !== null && _object$contractAddr12 !== void 0 ? _object$contractAddr12 : "";
    message.priceDenom = (_object$priceDenom8 = object.priceDenom) !== null && _object$priceDenom8 !== void 0 ? _object$priceDenom8 : "";
    message.assetDenom = (_object$assetDenom8 = object.assetDenom) !== null && _object$assetDenom8 !== void 0 ? _object$assetDenom8 : "";
    message.id = object.id !== undefined && object.id !== null ? Long.fromValue(object.id) : Long.UZERO;
    return message;
  }
};
function createBaseQueryGetOrderByIDResponse() {
  return {
    order: Order.fromPartial({})
  };
}
export const QueryGetOrderByIDResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetOrderByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.order = Order.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryGetOrderByIDResponse();
    message.order = object.order !== undefined && object.order !== null ? Order.fromPartial(object.order) : undefined;
    return message;
  }
};
function createBaseQueryGetHistoricalPricesRequest() {
  return {
    contractAddr: "",
    priceDenom: "",
    assetDenom: "",
    periodLengthInSeconds: Long.UZERO,
    numOfPeriods: Long.UZERO
  };
}
export const QueryGetHistoricalPricesRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractAddr !== "") {
      writer.uint32(10).string(message.contractAddr);
    }
    if (message.priceDenom !== "") {
      writer.uint32(18).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(26).string(message.assetDenom);
    }
    if (!message.periodLengthInSeconds.isZero()) {
      writer.uint32(32).uint64(message.periodLengthInSeconds);
    }
    if (!message.numOfPeriods.isZero()) {
      writer.uint32(40).uint64(message.numOfPeriods);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetHistoricalPricesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddr = reader.string();
          break;
        case 2:
          message.priceDenom = reader.string();
          break;
        case 3:
          message.assetDenom = reader.string();
          break;
        case 4:
          message.periodLengthInSeconds = reader.uint64();
          break;
        case 5:
          message.numOfPeriods = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr13, _object$priceDenom9, _object$assetDenom9;
    const message = createBaseQueryGetHistoricalPricesRequest();
    message.contractAddr = (_object$contractAddr13 = object.contractAddr) !== null && _object$contractAddr13 !== void 0 ? _object$contractAddr13 : "";
    message.priceDenom = (_object$priceDenom9 = object.priceDenom) !== null && _object$priceDenom9 !== void 0 ? _object$priceDenom9 : "";
    message.assetDenom = (_object$assetDenom9 = object.assetDenom) !== null && _object$assetDenom9 !== void 0 ? _object$assetDenom9 : "";
    message.periodLengthInSeconds = object.periodLengthInSeconds !== undefined && object.periodLengthInSeconds !== null ? Long.fromValue(object.periodLengthInSeconds) : Long.UZERO;
    message.numOfPeriods = object.numOfPeriods !== undefined && object.numOfPeriods !== null ? Long.fromValue(object.numOfPeriods) : Long.UZERO;
    return message;
  }
};
function createBaseQueryGetHistoricalPricesResponse() {
  return {
    prices: []
  };
}
export const QueryGetHistoricalPricesResponse = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.prices) {
      PriceCandlestick.encode(v, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetHistoricalPricesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.prices.push(PriceCandlestick.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$prices2;
    const message = createBaseQueryGetHistoricalPricesResponse();
    message.prices = ((_object$prices2 = object.prices) === null || _object$prices2 === void 0 ? void 0 : _object$prices2.map(e => PriceCandlestick.fromPartial(e))) || [];
    return message;
  }
};
function createBaseQueryGetMarketSummaryRequest() {
  return {
    contractAddr: "",
    priceDenom: "",
    assetDenom: "",
    lookbackInSeconds: Long.UZERO
  };
}
export const QueryGetMarketSummaryRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractAddr !== "") {
      writer.uint32(10).string(message.contractAddr);
    }
    if (message.priceDenom !== "") {
      writer.uint32(18).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(26).string(message.assetDenom);
    }
    if (!message.lookbackInSeconds.isZero()) {
      writer.uint32(32).uint64(message.lookbackInSeconds);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMarketSummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddr = reader.string();
          break;
        case 2:
          message.priceDenom = reader.string();
          break;
        case 3:
          message.assetDenom = reader.string();
          break;
        case 4:
          message.lookbackInSeconds = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr14, _object$priceDenom10, _object$assetDenom10;
    const message = createBaseQueryGetMarketSummaryRequest();
    message.contractAddr = (_object$contractAddr14 = object.contractAddr) !== null && _object$contractAddr14 !== void 0 ? _object$contractAddr14 : "";
    message.priceDenom = (_object$priceDenom10 = object.priceDenom) !== null && _object$priceDenom10 !== void 0 ? _object$priceDenom10 : "";
    message.assetDenom = (_object$assetDenom10 = object.assetDenom) !== null && _object$assetDenom10 !== void 0 ? _object$assetDenom10 : "";
    message.lookbackInSeconds = object.lookbackInSeconds !== undefined && object.lookbackInSeconds !== null ? Long.fromValue(object.lookbackInSeconds) : Long.UZERO;
    return message;
  }
};
function createBaseQueryGetMarketSummaryResponse() {
  return {
    totalVolume: "",
    totalVolumeNotional: "",
    highPrice: "",
    lowPrice: "",
    lastPrice: ""
  };
}
export const QueryGetMarketSummaryResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.totalVolume !== "") {
      writer.uint32(10).string(message.totalVolume);
    }
    if (message.totalVolumeNotional !== "") {
      writer.uint32(18).string(message.totalVolumeNotional);
    }
    if (message.highPrice !== "") {
      writer.uint32(26).string(message.highPrice);
    }
    if (message.lowPrice !== "") {
      writer.uint32(34).string(message.lowPrice);
    }
    if (message.lastPrice !== "") {
      writer.uint32(42).string(message.lastPrice);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMarketSummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.totalVolume = reader.string();
          break;
        case 2:
          message.totalVolumeNotional = reader.string();
          break;
        case 3:
          message.highPrice = reader.string();
          break;
        case 4:
          message.lowPrice = reader.string();
          break;
        case 5:
          message.lastPrice = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$totalVolume, _object$totalVolumeNo, _object$highPrice, _object$lowPrice, _object$lastPrice;
    const message = createBaseQueryGetMarketSummaryResponse();
    message.totalVolume = (_object$totalVolume = object.totalVolume) !== null && _object$totalVolume !== void 0 ? _object$totalVolume : "";
    message.totalVolumeNotional = (_object$totalVolumeNo = object.totalVolumeNotional) !== null && _object$totalVolumeNo !== void 0 ? _object$totalVolumeNo : "";
    message.highPrice = (_object$highPrice = object.highPrice) !== null && _object$highPrice !== void 0 ? _object$highPrice : "";
    message.lowPrice = (_object$lowPrice = object.lowPrice) !== null && _object$lowPrice !== void 0 ? _object$lowPrice : "";
    message.lastPrice = (_object$lastPrice = object.lastPrice) !== null && _object$lastPrice !== void 0 ? _object$lastPrice : "";
    return message;
  }
};
function createBaseQueryOrderSimulationRequest() {
  return {
    order: Order.fromPartial({}),
    contractAddr: ""
  };
}
export const QueryOrderSimulationRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(10).fork()).ldelim();
    }
    if (message.contractAddr !== "") {
      writer.uint32(18).string(message.contractAddr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOrderSimulationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.order = Order.decode(reader, reader.uint32());
          break;
        case 2:
          message.contractAddr = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr15;
    const message = createBaseQueryOrderSimulationRequest();
    message.order = object.order !== undefined && object.order !== null ? Order.fromPartial(object.order) : undefined;
    message.contractAddr = (_object$contractAddr15 = object.contractAddr) !== null && _object$contractAddr15 !== void 0 ? _object$contractAddr15 : "";
    return message;
  }
};
function createBaseQueryOrderSimulationResponse() {
  return {
    ExecutedQuantity: ""
  };
}
export const QueryOrderSimulationResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.ExecutedQuantity !== "") {
      writer.uint32(10).string(message.ExecutedQuantity);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOrderSimulationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ExecutedQuantity = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$ExecutedQuant;
    const message = createBaseQueryOrderSimulationResponse();
    message.ExecutedQuantity = (_object$ExecutedQuant = object.ExecutedQuantity) !== null && _object$ExecutedQuant !== void 0 ? _object$ExecutedQuant : "";
    return message;
  }
};
function createBaseQueryGetMatchResultRequest() {
  return {
    contractAddr: ""
  };
}
export const QueryGetMatchResultRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractAddr !== "") {
      writer.uint32(10).string(message.contractAddr);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMatchResultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddr = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr16;
    const message = createBaseQueryGetMatchResultRequest();
    message.contractAddr = (_object$contractAddr16 = object.contractAddr) !== null && _object$contractAddr16 !== void 0 ? _object$contractAddr16 : "";
    return message;
  }
};
function createBaseQueryGetMatchResultResponse() {
  return {
    result: MatchResult.fromPartial({})
  };
}
export const QueryGetMatchResultResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.result !== undefined) {
      MatchResult.encode(message.result, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetMatchResultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.result = MatchResult.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryGetMatchResultResponse();
    message.result = object.result !== undefined && object.result !== null ? MatchResult.fromPartial(object.result) : undefined;
    return message;
  }
};
function createBaseQueryGetOrderCountRequest() {
  return {
    contractAddr: "",
    priceDenom: "",
    assetDenom: "",
    price: "",
    positionDirection: 0
  };
}
export const QueryGetOrderCountRequest = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractAddr !== "") {
      writer.uint32(10).string(message.contractAddr);
    }
    if (message.priceDenom !== "") {
      writer.uint32(18).string(message.priceDenom);
    }
    if (message.assetDenom !== "") {
      writer.uint32(26).string(message.assetDenom);
    }
    if (message.price !== "") {
      writer.uint32(34).string(message.price);
    }
    if (message.positionDirection !== 0) {
      writer.uint32(40).int32(message.positionDirection);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetOrderCountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddr = reader.string();
          break;
        case 2:
          message.priceDenom = reader.string();
          break;
        case 3:
          message.assetDenom = reader.string();
          break;
        case 4:
          message.price = reader.string();
          break;
        case 5:
          message.positionDirection = reader.int32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractAddr17, _object$priceDenom11, _object$assetDenom11, _object$price3, _object$positionDirec;
    const message = createBaseQueryGetOrderCountRequest();
    message.contractAddr = (_object$contractAddr17 = object.contractAddr) !== null && _object$contractAddr17 !== void 0 ? _object$contractAddr17 : "";
    message.priceDenom = (_object$priceDenom11 = object.priceDenom) !== null && _object$priceDenom11 !== void 0 ? _object$priceDenom11 : "";
    message.assetDenom = (_object$assetDenom11 = object.assetDenom) !== null && _object$assetDenom11 !== void 0 ? _object$assetDenom11 : "";
    message.price = (_object$price3 = object.price) !== null && _object$price3 !== void 0 ? _object$price3 : "";
    message.positionDirection = (_object$positionDirec = object.positionDirection) !== null && _object$positionDirec !== void 0 ? _object$positionDirec : 0;
    return message;
  }
};
function createBaseQueryGetOrderCountResponse() {
  return {
    count: Long.UZERO
  };
}
export const QueryGetOrderCountResponse = {
  encode(message, writer = _m0.Writer.create()) {
    if (!message.count.isZero()) {
      writer.uint32(8).uint64(message.count);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetOrderCountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.count = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    const message = createBaseQueryGetOrderCountResponse();
    message.count = object.count !== undefined && object.count !== null ? Long.fromValue(object.count) : Long.UZERO;
    return message;
  }
};
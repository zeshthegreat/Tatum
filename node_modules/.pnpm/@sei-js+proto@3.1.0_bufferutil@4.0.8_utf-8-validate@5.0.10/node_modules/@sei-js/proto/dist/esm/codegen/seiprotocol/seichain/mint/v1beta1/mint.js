import { Long } from "../../../../helpers";
import * as _m0 from "protobufjs/minimal";
/** Minter represents the most recent */

function createBaseMinter() {
  return {
    startDate: "",
    endDate: "",
    denom: "",
    totalMintAmount: Long.UZERO,
    remainingMintAmount: Long.UZERO,
    lastMintAmount: Long.UZERO,
    lastMintDate: "",
    lastMintHeight: Long.UZERO
  };
}
export const Minter = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.startDate !== "") {
      writer.uint32(10).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(18).string(message.endDate);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (!message.totalMintAmount.isZero()) {
      writer.uint32(32).uint64(message.totalMintAmount);
    }
    if (!message.remainingMintAmount.isZero()) {
      writer.uint32(40).uint64(message.remainingMintAmount);
    }
    if (!message.lastMintAmount.isZero()) {
      writer.uint32(48).uint64(message.lastMintAmount);
    }
    if (message.lastMintDate !== "") {
      writer.uint32(58).string(message.lastMintDate);
    }
    if (!message.lastMintHeight.isZero()) {
      writer.uint32(64).uint64(message.lastMintHeight);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMinter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.startDate = reader.string();
          break;
        case 2:
          message.endDate = reader.string();
          break;
        case 3:
          message.denom = reader.string();
          break;
        case 4:
          message.totalMintAmount = reader.uint64();
          break;
        case 5:
          message.remainingMintAmount = reader.uint64();
          break;
        case 6:
          message.lastMintAmount = reader.uint64();
          break;
        case 7:
          message.lastMintDate = reader.string();
          break;
        case 8:
          message.lastMintHeight = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$startDate, _object$endDate, _object$denom, _object$lastMintDate;
    const message = createBaseMinter();
    message.startDate = (_object$startDate = object.startDate) !== null && _object$startDate !== void 0 ? _object$startDate : "";
    message.endDate = (_object$endDate = object.endDate) !== null && _object$endDate !== void 0 ? _object$endDate : "";
    message.denom = (_object$denom = object.denom) !== null && _object$denom !== void 0 ? _object$denom : "";
    message.totalMintAmount = object.totalMintAmount !== undefined && object.totalMintAmount !== null ? Long.fromValue(object.totalMintAmount) : Long.UZERO;
    message.remainingMintAmount = object.remainingMintAmount !== undefined && object.remainingMintAmount !== null ? Long.fromValue(object.remainingMintAmount) : Long.UZERO;
    message.lastMintAmount = object.lastMintAmount !== undefined && object.lastMintAmount !== null ? Long.fromValue(object.lastMintAmount) : Long.UZERO;
    message.lastMintDate = (_object$lastMintDate = object.lastMintDate) !== null && _object$lastMintDate !== void 0 ? _object$lastMintDate : "";
    message.lastMintHeight = object.lastMintHeight !== undefined && object.lastMintHeight !== null ? Long.fromValue(object.lastMintHeight) : Long.UZERO;
    return message;
  }
};
function createBaseScheduledTokenRelease() {
  return {
    startDate: "",
    endDate: "",
    tokenReleaseAmount: Long.UZERO
  };
}
export const ScheduledTokenRelease = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.startDate !== "") {
      writer.uint32(10).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(18).string(message.endDate);
    }
    if (!message.tokenReleaseAmount.isZero()) {
      writer.uint32(24).uint64(message.tokenReleaseAmount);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduledTokenRelease();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.startDate = reader.string();
          break;
        case 2:
          message.endDate = reader.string();
          break;
        case 3:
          message.tokenReleaseAmount = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$startDate2, _object$endDate2;
    const message = createBaseScheduledTokenRelease();
    message.startDate = (_object$startDate2 = object.startDate) !== null && _object$startDate2 !== void 0 ? _object$startDate2 : "";
    message.endDate = (_object$endDate2 = object.endDate) !== null && _object$endDate2 !== void 0 ? _object$endDate2 : "";
    message.tokenReleaseAmount = object.tokenReleaseAmount !== undefined && object.tokenReleaseAmount !== null ? Long.fromValue(object.tokenReleaseAmount) : Long.UZERO;
    return message;
  }
};
function createBaseParams() {
  return {
    mintDenom: "",
    tokenReleaseSchedule: []
  };
}
export const Params = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.mintDenom !== "") {
      writer.uint32(10).string(message.mintDenom);
    }
    for (const v of message.tokenReleaseSchedule) {
      ScheduledTokenRelease.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.mintDenom = reader.string();
          break;
        case 2:
          message.tokenReleaseSchedule.push(ScheduledTokenRelease.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$mintDenom, _object$tokenReleaseS;
    const message = createBaseParams();
    message.mintDenom = (_object$mintDenom = object.mintDenom) !== null && _object$mintDenom !== void 0 ? _object$mintDenom : "";
    message.tokenReleaseSchedule = ((_object$tokenReleaseS = object.tokenReleaseSchedule) === null || _object$tokenReleaseS === void 0 ? void 0 : _object$tokenReleaseS.map(e => ScheduledTokenRelease.fromPartial(e))) || [];
    return message;
  }
};
function createBaseVersion2Minter() {
  return {
    lastMintAmount: "",
    lastMintDate: "",
    lastMintHeight: Long.ZERO,
    denom: ""
  };
}
export const Version2Minter = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.lastMintAmount !== "") {
      writer.uint32(10).string(message.lastMintAmount);
    }
    if (message.lastMintDate !== "") {
      writer.uint32(18).string(message.lastMintDate);
    }
    if (!message.lastMintHeight.isZero()) {
      writer.uint32(24).int64(message.lastMintHeight);
    }
    if (message.denom !== "") {
      writer.uint32(34).string(message.denom);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersion2Minter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.lastMintAmount = reader.string();
          break;
        case 2:
          message.lastMintDate = reader.string();
          break;
        case 3:
          message.lastMintHeight = reader.int64();
          break;
        case 4:
          message.denom = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$lastMintAmoun, _object$lastMintDate2, _object$denom2;
    const message = createBaseVersion2Minter();
    message.lastMintAmount = (_object$lastMintAmoun = object.lastMintAmount) !== null && _object$lastMintAmoun !== void 0 ? _object$lastMintAmoun : "";
    message.lastMintDate = (_object$lastMintDate2 = object.lastMintDate) !== null && _object$lastMintDate2 !== void 0 ? _object$lastMintDate2 : "";
    message.lastMintHeight = object.lastMintHeight !== undefined && object.lastMintHeight !== null ? Long.fromValue(object.lastMintHeight) : Long.ZERO;
    message.denom = (_object$denom2 = object.denom) !== null && _object$denom2 !== void 0 ? _object$denom2 : "";
    return message;
  }
};
function createBaseVersion2ScheduledTokenRelease() {
  return {
    date: "",
    tokenReleaseAmount: Long.ZERO
  };
}
export const Version2ScheduledTokenRelease = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.date !== "") {
      writer.uint32(10).string(message.date);
    }
    if (!message.tokenReleaseAmount.isZero()) {
      writer.uint32(16).int64(message.tokenReleaseAmount);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersion2ScheduledTokenRelease();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.date = reader.string();
          break;
        case 2:
          message.tokenReleaseAmount = reader.int64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$date;
    const message = createBaseVersion2ScheduledTokenRelease();
    message.date = (_object$date = object.date) !== null && _object$date !== void 0 ? _object$date : "";
    message.tokenReleaseAmount = object.tokenReleaseAmount !== undefined && object.tokenReleaseAmount !== null ? Long.fromValue(object.tokenReleaseAmount) : Long.ZERO;
    return message;
  }
};
function createBaseVersion2Params() {
  return {
    mintDenom: "",
    tokenReleaseSchedule: []
  };
}
export const Version2Params = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.mintDenom !== "") {
      writer.uint32(10).string(message.mintDenom);
    }
    for (const v of message.tokenReleaseSchedule) {
      Version2ScheduledTokenRelease.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVersion2Params();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.mintDenom = reader.string();
          break;
        case 2:
          message.tokenReleaseSchedule.push(Version2ScheduledTokenRelease.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$mintDenom2, _object$tokenReleaseS2;
    const message = createBaseVersion2Params();
    message.mintDenom = (_object$mintDenom2 = object.mintDenom) !== null && _object$mintDenom2 !== void 0 ? _object$mintDenom2 : "";
    message.tokenReleaseSchedule = ((_object$tokenReleaseS2 = object.tokenReleaseSchedule) === null || _object$tokenReleaseS2 === void 0 ? void 0 : _object$tokenReleaseS2.map(e => Version2ScheduledTokenRelease.fromPartial(e))) || [];
    return message;
  }
};
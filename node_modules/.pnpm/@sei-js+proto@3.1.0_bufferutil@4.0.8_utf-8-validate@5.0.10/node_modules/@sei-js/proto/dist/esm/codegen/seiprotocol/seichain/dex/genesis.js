import { Params } from "./params";
import { ContractInfoV2 } from "./contract";
import { LongBook } from "./long_book";
import { ShortBook } from "./short_book";
import { Order } from "./order";
import { Pair } from "./pair";
import { Price } from "./price";
import { Long } from "../../../helpers";
import * as _m0 from "protobufjs/minimal";
/** GenesisState defines the dex module's genesis state. */

function createBaseGenesisState() {
  return {
    params: Params.fromPartial({}),
    contractState: [],
    lastEpoch: Long.UZERO
  };
}
export const GenesisState = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.contractState) {
      ContractState.encode(v, writer.uint32(18).fork()).ldelim();
    }
    if (!message.lastEpoch.isZero()) {
      writer.uint32(24).uint64(message.lastEpoch);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.params = Params.decode(reader, reader.uint32());
          break;
        case 2:
          message.contractState.push(ContractState.decode(reader, reader.uint32()));
          break;
        case 3:
          message.lastEpoch = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$contractState;
    const message = createBaseGenesisState();
    message.params = object.params !== undefined && object.params !== null ? Params.fromPartial(object.params) : undefined;
    message.contractState = ((_object$contractState = object.contractState) === null || _object$contractState === void 0 ? void 0 : _object$contractState.map(e => ContractState.fromPartial(e))) || [];
    message.lastEpoch = object.lastEpoch !== undefined && object.lastEpoch !== null ? Long.fromValue(object.lastEpoch) : Long.UZERO;
    return message;
  }
};
function createBaseContractState() {
  return {
    contractInfo: ContractInfoV2.fromPartial({}),
    longBookList: [],
    shortBookList: [],
    triggeredOrdersList: [],
    pairList: [],
    priceList: [],
    nextOrderId: Long.UZERO
  };
}
export const ContractState = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.contractInfo !== undefined) {
      ContractInfoV2.encode(message.contractInfo, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.longBookList) {
      LongBook.encode(v, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.shortBookList) {
      ShortBook.encode(v, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.triggeredOrdersList) {
      Order.encode(v, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.pairList) {
      Pair.encode(v, writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.priceList) {
      ContractPairPrices.encode(v, writer.uint32(50).fork()).ldelim();
    }
    if (!message.nextOrderId.isZero()) {
      writer.uint32(56).uint64(message.nextOrderId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContractState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractInfo = ContractInfoV2.decode(reader, reader.uint32());
          break;
        case 2:
          message.longBookList.push(LongBook.decode(reader, reader.uint32()));
          break;
        case 3:
          message.shortBookList.push(ShortBook.decode(reader, reader.uint32()));
          break;
        case 4:
          message.triggeredOrdersList.push(Order.decode(reader, reader.uint32()));
          break;
        case 5:
          message.pairList.push(Pair.decode(reader, reader.uint32()));
          break;
        case 6:
          message.priceList.push(ContractPairPrices.decode(reader, reader.uint32()));
          break;
        case 7:
          message.nextOrderId = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$longBookList, _object$shortBookList, _object$triggeredOrde, _object$pairList, _object$priceList;
    const message = createBaseContractState();
    message.contractInfo = object.contractInfo !== undefined && object.contractInfo !== null ? ContractInfoV2.fromPartial(object.contractInfo) : undefined;
    message.longBookList = ((_object$longBookList = object.longBookList) === null || _object$longBookList === void 0 ? void 0 : _object$longBookList.map(e => LongBook.fromPartial(e))) || [];
    message.shortBookList = ((_object$shortBookList = object.shortBookList) === null || _object$shortBookList === void 0 ? void 0 : _object$shortBookList.map(e => ShortBook.fromPartial(e))) || [];
    message.triggeredOrdersList = ((_object$triggeredOrde = object.triggeredOrdersList) === null || _object$triggeredOrde === void 0 ? void 0 : _object$triggeredOrde.map(e => Order.fromPartial(e))) || [];
    message.pairList = ((_object$pairList = object.pairList) === null || _object$pairList === void 0 ? void 0 : _object$pairList.map(e => Pair.fromPartial(e))) || [];
    message.priceList = ((_object$priceList = object.priceList) === null || _object$priceList === void 0 ? void 0 : _object$priceList.map(e => ContractPairPrices.fromPartial(e))) || [];
    message.nextOrderId = object.nextOrderId !== undefined && object.nextOrderId !== null ? Long.fromValue(object.nextOrderId) : Long.UZERO;
    return message;
  }
};
function createBaseContractPairPrices() {
  return {
    pricePair: Pair.fromPartial({}),
    prices: []
  };
}
export const ContractPairPrices = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.pricePair !== undefined) {
      Pair.encode(message.pricePair, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.prices) {
      Price.encode(v, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContractPairPrices();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pricePair = Pair.decode(reader, reader.uint32());
          break;
        case 2:
          message.prices.push(Price.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$prices;
    const message = createBaseContractPairPrices();
    message.pricePair = object.pricePair !== undefined && object.pricePair !== null ? Pair.fromPartial(object.pricePair) : undefined;
    message.prices = ((_object$prices = object.prices) === null || _object$prices === void 0 ? void 0 : _object$prices.map(e => Price.fromPartial(e))) || [];
    return message;
  }
};
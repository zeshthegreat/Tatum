import { Params, ExchangeRateTuple, AggregateExchangeRateVote, PriceSnapshot, VotePenaltyCounter } from "./oracle";
import * as _m0 from "protobufjs/minimal";
function createBaseGenesisState() {
  return {
    params: Params.fromPartial({}),
    feederDelegations: [],
    exchangeRates: [],
    penaltyCounters: [],
    aggregateExchangeRateVotes: [],
    priceSnapshots: []
  };
}
export const GenesisState = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.feederDelegations) {
      FeederDelegation.encode(v, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.exchangeRates) {
      ExchangeRateTuple.encode(v, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.penaltyCounters) {
      PenaltyCounter.encode(v, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.aggregateExchangeRateVotes) {
      AggregateExchangeRateVote.encode(v, writer.uint32(50).fork()).ldelim();
    }
    for (const v of message.priceSnapshots) {
      PriceSnapshot.encode(v, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.params = Params.decode(reader, reader.uint32());
          break;
        case 2:
          message.feederDelegations.push(FeederDelegation.decode(reader, reader.uint32()));
          break;
        case 3:
          message.exchangeRates.push(ExchangeRateTuple.decode(reader, reader.uint32()));
          break;
        case 4:
          message.penaltyCounters.push(PenaltyCounter.decode(reader, reader.uint32()));
          break;
        case 6:
          message.aggregateExchangeRateVotes.push(AggregateExchangeRateVote.decode(reader, reader.uint32()));
          break;
        case 7:
          message.priceSnapshots.push(PriceSnapshot.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$feederDelegat, _object$exchangeRates, _object$penaltyCounte, _object$aggregateExch, _object$priceSnapshot;
    const message = createBaseGenesisState();
    message.params = object.params !== undefined && object.params !== null ? Params.fromPartial(object.params) : undefined;
    message.feederDelegations = ((_object$feederDelegat = object.feederDelegations) === null || _object$feederDelegat === void 0 ? void 0 : _object$feederDelegat.map(e => FeederDelegation.fromPartial(e))) || [];
    message.exchangeRates = ((_object$exchangeRates = object.exchangeRates) === null || _object$exchangeRates === void 0 ? void 0 : _object$exchangeRates.map(e => ExchangeRateTuple.fromPartial(e))) || [];
    message.penaltyCounters = ((_object$penaltyCounte = object.penaltyCounters) === null || _object$penaltyCounte === void 0 ? void 0 : _object$penaltyCounte.map(e => PenaltyCounter.fromPartial(e))) || [];
    message.aggregateExchangeRateVotes = ((_object$aggregateExch = object.aggregateExchangeRateVotes) === null || _object$aggregateExch === void 0 ? void 0 : _object$aggregateExch.map(e => AggregateExchangeRateVote.fromPartial(e))) || [];
    message.priceSnapshots = ((_object$priceSnapshot = object.priceSnapshots) === null || _object$priceSnapshot === void 0 ? void 0 : _object$priceSnapshot.map(e => PriceSnapshot.fromPartial(e))) || [];
    return message;
  }
};
function createBaseFeederDelegation() {
  return {
    feederAddress: "",
    validatorAddress: ""
  };
}
export const FeederDelegation = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.feederAddress !== "") {
      writer.uint32(10).string(message.feederAddress);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(18).string(message.validatorAddress);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeederDelegation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.feederAddress = reader.string();
          break;
        case 2:
          message.validatorAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$feederAddress, _object$validatorAddr;
    const message = createBaseFeederDelegation();
    message.feederAddress = (_object$feederAddress = object.feederAddress) !== null && _object$feederAddress !== void 0 ? _object$feederAddress : "";
    message.validatorAddress = (_object$validatorAddr = object.validatorAddress) !== null && _object$validatorAddr !== void 0 ? _object$validatorAddr : "";
    return message;
  }
};
function createBasePenaltyCounter() {
  return {
    validatorAddress: "",
    votePenaltyCounter: VotePenaltyCounter.fromPartial({})
  };
}
export const PenaltyCounter = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.validatorAddress !== "") {
      writer.uint32(10).string(message.validatorAddress);
    }
    if (message.votePenaltyCounter !== undefined) {
      VotePenaltyCounter.encode(message.votePenaltyCounter, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePenaltyCounter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.validatorAddress = reader.string();
          break;
        case 2:
          message.votePenaltyCounter = VotePenaltyCounter.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromPartial(object) {
    var _object$validatorAddr2;
    const message = createBasePenaltyCounter();
    message.validatorAddress = (_object$validatorAddr2 = object.validatorAddress) !== null && _object$validatorAddr2 !== void 0 ? _object$validatorAddr2 : "";
    message.votePenaltyCounter = object.votePenaltyCounter !== undefined && object.votePenaltyCounter !== null ? VotePenaltyCounter.fromPartial(object.votePenaltyCounter) : undefined;
    return message;
  }
};
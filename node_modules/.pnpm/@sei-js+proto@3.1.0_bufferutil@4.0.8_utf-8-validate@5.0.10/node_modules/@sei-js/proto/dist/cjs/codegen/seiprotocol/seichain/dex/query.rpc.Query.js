"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRpcQueryExtension = exports.QueryClientImpl = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));
var _stargate = require("@cosmjs/stargate");
var _query = require("./query");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var QueryClientImpl = /*#__PURE__*/function () {
  function QueryClientImpl(rpc) {
    (0, _classCallCheck2["default"])(this, QueryClientImpl);
    (0, _defineProperty2["default"])(this, "rpc", void 0);
    this.rpc = rpc;
    this.params = this.params.bind(this);
    this.longBook = this.longBook.bind(this);
    this.longBookAll = this.longBookAll.bind(this);
    this.shortBook = this.shortBook.bind(this);
    this.shortBookAll = this.shortBookAll.bind(this);
    this.getPrice = this.getPrice.bind(this);
    this.getLatestPrice = this.getLatestPrice.bind(this);
    this.getPrices = this.getPrices.bind(this);
    this.getTwaps = this.getTwaps.bind(this);
    this.assetMetadata = this.assetMetadata.bind(this);
    this.assetList = this.assetList.bind(this);
    this.getRegisteredPairs = this.getRegisteredPairs.bind(this);
    this.getRegisteredContract = this.getRegisteredContract.bind(this);
    this.getOrders = this.getOrders.bind(this);
    this.getOrder = this.getOrder.bind(this);
    this.getHistoricalPrices = this.getHistoricalPrices.bind(this);
    this.getMarketSummary = this.getMarketSummary.bind(this);
    this.getOrderSimulation = this.getOrderSimulation.bind(this);
    this.getMatchResult = this.getMatchResult.bind(this);
    this.getOrderCount = this.getOrderCount.bind(this);
  }
  (0, _createClass2["default"])(QueryClientImpl, [{
    key: "params",
    value: function params() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryParamsRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "Params", data);
      return promise.then(function (data) {
        return _query.QueryParamsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "longBook",
    value: function longBook(request) {
      var data = _query.QueryGetLongBookRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "LongBook", data);
      return promise.then(function (data) {
        return _query.QueryGetLongBookResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "longBookAll",
    value: function longBookAll(request) {
      var data = _query.QueryAllLongBookRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "LongBookAll", data);
      return promise.then(function (data) {
        return _query.QueryAllLongBookResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "shortBook",
    value: function shortBook(request) {
      var data = _query.QueryGetShortBookRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "ShortBook", data);
      return promise.then(function (data) {
        return _query.QueryGetShortBookResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "shortBookAll",
    value: function shortBookAll(request) {
      var data = _query.QueryAllShortBookRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "ShortBookAll", data);
      return promise.then(function (data) {
        return _query.QueryAllShortBookResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getPrice",
    value: function getPrice(request) {
      var data = _query.QueryGetPriceRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetPrice", data);
      return promise.then(function (data) {
        return _query.QueryGetPriceResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getLatestPrice",
    value: function getLatestPrice(request) {
      var data = _query.QueryGetLatestPriceRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetLatestPrice", data);
      return promise.then(function (data) {
        return _query.QueryGetLatestPriceResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getPrices",
    value: function getPrices(request) {
      var data = _query.QueryGetPricesRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetPrices", data);
      return promise.then(function (data) {
        return _query.QueryGetPricesResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getTwaps",
    value: function getTwaps(request) {
      var data = _query.QueryGetTwapsRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetTwaps", data);
      return promise.then(function (data) {
        return _query.QueryGetTwapsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "assetMetadata",
    value: function assetMetadata(request) {
      var data = _query.QueryAssetMetadataRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "AssetMetadata", data);
      return promise.then(function (data) {
        return _query.QueryAssetMetadataResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "assetList",
    value: function assetList() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = _query.QueryAssetListRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "AssetList", data);
      return promise.then(function (data) {
        return _query.QueryAssetListResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getRegisteredPairs",
    value: function getRegisteredPairs(request) {
      var data = _query.QueryRegisteredPairsRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetRegisteredPairs", data);
      return promise.then(function (data) {
        return _query.QueryRegisteredPairsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getRegisteredContract",
    value: function getRegisteredContract(request) {
      var data = _query.QueryRegisteredContractRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetRegisteredContract", data);
      return promise.then(function (data) {
        return _query.QueryRegisteredContractResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getOrders",
    value: function getOrders(request) {
      var data = _query.QueryGetOrdersRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetOrders", data);
      return promise.then(function (data) {
        return _query.QueryGetOrdersResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getOrder",
    value: function getOrder(request) {
      var data = _query.QueryGetOrderByIDRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetOrder", data);
      return promise.then(function (data) {
        return _query.QueryGetOrderByIDResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getHistoricalPrices",
    value: function getHistoricalPrices(request) {
      var data = _query.QueryGetHistoricalPricesRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetHistoricalPrices", data);
      return promise.then(function (data) {
        return _query.QueryGetHistoricalPricesResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getMarketSummary",
    value: function getMarketSummary(request) {
      var data = _query.QueryGetMarketSummaryRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetMarketSummary", data);
      return promise.then(function (data) {
        return _query.QueryGetMarketSummaryResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getOrderSimulation",
    value: function getOrderSimulation(request) {
      var data = _query.QueryOrderSimulationRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetOrderSimulation", data);
      return promise.then(function (data) {
        return _query.QueryOrderSimulationResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getMatchResult",
    value: function getMatchResult(request) {
      var data = _query.QueryGetMatchResultRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetMatchResult", data);
      return promise.then(function (data) {
        return _query.QueryGetMatchResultResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "getOrderCount",
    value: function getOrderCount(request) {
      var data = _query.QueryGetOrderCountRequest.encode(request).finish();
      var promise = this.rpc.request("seiprotocol.seichain.dex.Query", "GetOrderCount", data);
      return promise.then(function (data) {
        return _query.QueryGetOrderCountResponse.decode(new _m0.Reader(data));
      });
    }
  }]);
  return QueryClientImpl;
}();
exports.QueryClientImpl = QueryClientImpl;
var createRpcQueryExtension = function createRpcQueryExtension(base) {
  var rpc = (0, _stargate.createProtobufRpcClient)(base);
  var queryService = new QueryClientImpl(rpc);
  return {
    params: function params(request) {
      return queryService.params(request);
    },
    longBook: function longBook(request) {
      return queryService.longBook(request);
    },
    longBookAll: function longBookAll(request) {
      return queryService.longBookAll(request);
    },
    shortBook: function shortBook(request) {
      return queryService.shortBook(request);
    },
    shortBookAll: function shortBookAll(request) {
      return queryService.shortBookAll(request);
    },
    getPrice: function getPrice(request) {
      return queryService.getPrice(request);
    },
    getLatestPrice: function getLatestPrice(request) {
      return queryService.getLatestPrice(request);
    },
    getPrices: function getPrices(request) {
      return queryService.getPrices(request);
    },
    getTwaps: function getTwaps(request) {
      return queryService.getTwaps(request);
    },
    assetMetadata: function assetMetadata(request) {
      return queryService.assetMetadata(request);
    },
    assetList: function assetList(request) {
      return queryService.assetList(request);
    },
    getRegisteredPairs: function getRegisteredPairs(request) {
      return queryService.getRegisteredPairs(request);
    },
    getRegisteredContract: function getRegisteredContract(request) {
      return queryService.getRegisteredContract(request);
    },
    getOrders: function getOrders(request) {
      return queryService.getOrders(request);
    },
    getOrder: function getOrder(request) {
      return queryService.getOrder(request);
    },
    getHistoricalPrices: function getHistoricalPrices(request) {
      return queryService.getHistoricalPrices(request);
    },
    getMarketSummary: function getMarketSummary(request) {
      return queryService.getMarketSummary(request);
    },
    getOrderSimulation: function getOrderSimulation(request) {
      return queryService.getOrderSimulation(request);
    },
    getMatchResult: function getMatchResult(request) {
      return queryService.getMatchResult(request);
    },
    getOrderCount: function getOrderCount(request) {
      return queryService.getOrderCount(request);
    }
  };
};
exports.createRpcQueryExtension = createRpcQueryExtension;
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Order } from "./order";
import { Params } from "./params";
import { LongBook } from "./long_book";
import { ShortBook } from "./short_book";
import { Price, PriceCandlestick } from "./price";
import { Twap } from "./twap";
import { AssetMetadata } from "./asset_list";
import { Pair } from "./pair";
import { ContractInfoV2 } from "./contract";
import { MatchResult } from "./match_result";
import { Long } from "../../../helpers";
import * as _m0 from "protobufjs/minimal";
function createBaseQueryParamsRequest() {
    return {};
}
export const QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: Params.fromPartial({})
    };
}
export const QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? Params.fromPartial(object.params) : undefined;
        return message;
    }
};
function createBaseQueryGetLongBookRequest() {
    return {
        price: "",
        contractAddr: "",
        priceDenom: "",
        assetDenom: ""
    };
}
export const QueryGetLongBookRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.price !== "") {
            writer.uint32(10).string(message.price);
        }
        if (message.contractAddr !== "") {
            writer.uint32(18).string(message.contractAddr);
        }
        if (message.priceDenom !== "") {
            writer.uint32(26).string(message.priceDenom);
        }
        if (message.assetDenom !== "") {
            writer.uint32(34).string(message.assetDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetLongBookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.price = reader.string();
                    break;
                case 2:
                    message.contractAddr = reader.string();
                    break;
                case 3:
                    message.priceDenom = reader.string();
                    break;
                case 4:
                    message.assetDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetLongBookRequest();
        message.price = object.price ?? "";
        message.contractAddr = object.contractAddr ?? "";
        message.priceDenom = object.priceDenom ?? "";
        message.assetDenom = object.assetDenom ?? "";
        return message;
    }
};
function createBaseQueryGetLongBookResponse() {
    return {
        LongBook: LongBook.fromPartial({})
    };
}
export const QueryGetLongBookResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.LongBook !== undefined) {
            LongBook.encode(message.LongBook, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetLongBookResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.LongBook = LongBook.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetLongBookResponse();
        message.LongBook = object.LongBook !== undefined && object.LongBook !== null ? LongBook.fromPartial(object.LongBook) : undefined;
        return message;
    }
};
function createBaseQueryAllLongBookRequest() {
    return {
        pagination: PageRequest.fromPartial({}),
        contractAddr: "",
        priceDenom: "",
        assetDenom: ""
    };
}
export const QueryAllLongBookRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.contractAddr !== "") {
            writer.uint32(18).string(message.contractAddr);
        }
        if (message.priceDenom !== "") {
            writer.uint32(26).string(message.priceDenom);
        }
        if (message.assetDenom !== "") {
            writer.uint32(34).string(message.assetDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllLongBookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.contractAddr = reader.string();
                    break;
                case 3:
                    message.priceDenom = reader.string();
                    break;
                case 4:
                    message.assetDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryAllLongBookRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : undefined;
        message.contractAddr = object.contractAddr ?? "";
        message.priceDenom = object.priceDenom ?? "";
        message.assetDenom = object.assetDenom ?? "";
        return message;
    }
};
function createBaseQueryAllLongBookResponse() {
    return {
        LongBook: [],
        pagination: PageResponse.fromPartial({})
    };
}
export const QueryAllLongBookResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.LongBook) {
            LongBook.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllLongBookResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.LongBook.push(LongBook.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryAllLongBookResponse();
        message.LongBook = object.LongBook?.map(e => LongBook.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    }
};
function createBaseQueryGetShortBookRequest() {
    return {
        price: "",
        contractAddr: "",
        priceDenom: "",
        assetDenom: ""
    };
}
export const QueryGetShortBookRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.price !== "") {
            writer.uint32(10).string(message.price);
        }
        if (message.contractAddr !== "") {
            writer.uint32(18).string(message.contractAddr);
        }
        if (message.priceDenom !== "") {
            writer.uint32(26).string(message.priceDenom);
        }
        if (message.assetDenom !== "") {
            writer.uint32(34).string(message.assetDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetShortBookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.price = reader.string();
                    break;
                case 2:
                    message.contractAddr = reader.string();
                    break;
                case 3:
                    message.priceDenom = reader.string();
                    break;
                case 4:
                    message.assetDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetShortBookRequest();
        message.price = object.price ?? "";
        message.contractAddr = object.contractAddr ?? "";
        message.priceDenom = object.priceDenom ?? "";
        message.assetDenom = object.assetDenom ?? "";
        return message;
    }
};
function createBaseQueryGetShortBookResponse() {
    return {
        ShortBook: ShortBook.fromPartial({})
    };
}
export const QueryGetShortBookResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.ShortBook !== undefined) {
            ShortBook.encode(message.ShortBook, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetShortBookResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.ShortBook = ShortBook.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetShortBookResponse();
        message.ShortBook = object.ShortBook !== undefined && object.ShortBook !== null ? ShortBook.fromPartial(object.ShortBook) : undefined;
        return message;
    }
};
function createBaseQueryAllShortBookRequest() {
    return {
        pagination: PageRequest.fromPartial({}),
        contractAddr: "",
        priceDenom: "",
        assetDenom: ""
    };
}
export const QueryAllShortBookRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.contractAddr !== "") {
            writer.uint32(18).string(message.contractAddr);
        }
        if (message.priceDenom !== "") {
            writer.uint32(26).string(message.priceDenom);
        }
        if (message.assetDenom !== "") {
            writer.uint32(34).string(message.assetDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllShortBookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.contractAddr = reader.string();
                    break;
                case 3:
                    message.priceDenom = reader.string();
                    break;
                case 4:
                    message.assetDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryAllShortBookRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? PageRequest.fromPartial(object.pagination) : undefined;
        message.contractAddr = object.contractAddr ?? "";
        message.priceDenom = object.priceDenom ?? "";
        message.assetDenom = object.assetDenom ?? "";
        return message;
    }
};
function createBaseQueryAllShortBookResponse() {
    return {
        ShortBook: [],
        pagination: PageResponse.fromPartial({})
    };
}
export const QueryAllShortBookResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.ShortBook) {
            ShortBook.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllShortBookResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.ShortBook.push(ShortBook.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryAllShortBookResponse();
        message.ShortBook = object.ShortBook?.map(e => ShortBook.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    }
};
function createBaseQueryGetPricesRequest() {
    return {
        priceDenom: "",
        assetDenom: "",
        contractAddr: ""
    };
}
export const QueryGetPricesRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.priceDenom !== "") {
            writer.uint32(10).string(message.priceDenom);
        }
        if (message.assetDenom !== "") {
            writer.uint32(18).string(message.assetDenom);
        }
        if (message.contractAddr !== "") {
            writer.uint32(26).string(message.contractAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetPricesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.priceDenom = reader.string();
                    break;
                case 2:
                    message.assetDenom = reader.string();
                    break;
                case 3:
                    message.contractAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetPricesRequest();
        message.priceDenom = object.priceDenom ?? "";
        message.assetDenom = object.assetDenom ?? "";
        message.contractAddr = object.contractAddr ?? "";
        return message;
    }
};
function createBaseQueryGetPricesResponse() {
    return {
        prices: []
    };
}
export const QueryGetPricesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.prices) {
            Price.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetPricesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.prices.push(Price.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetPricesResponse();
        message.prices = object.prices?.map(e => Price.fromPartial(e)) || [];
        return message;
    }
};
function createBaseQueryGetPriceRequest() {
    return {
        priceDenom: "",
        assetDenom: "",
        contractAddr: "",
        timestamp: Long.UZERO
    };
}
export const QueryGetPriceRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.priceDenom !== "") {
            writer.uint32(10).string(message.priceDenom);
        }
        if (message.assetDenom !== "") {
            writer.uint32(18).string(message.assetDenom);
        }
        if (message.contractAddr !== "") {
            writer.uint32(26).string(message.contractAddr);
        }
        if (!message.timestamp.isZero()) {
            writer.uint32(32).uint64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetPriceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.priceDenom = reader.string();
                    break;
                case 2:
                    message.assetDenom = reader.string();
                    break;
                case 3:
                    message.contractAddr = reader.string();
                    break;
                case 4:
                    message.timestamp = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetPriceRequest();
        message.priceDenom = object.priceDenom ?? "";
        message.assetDenom = object.assetDenom ?? "";
        message.contractAddr = object.contractAddr ?? "";
        message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? Long.fromValue(object.timestamp) : Long.UZERO;
        return message;
    }
};
function createBaseQueryGetPriceResponse() {
    return {
        price: Price.fromPartial({}),
        found: false
    };
}
export const QueryGetPriceResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.price !== undefined) {
            Price.encode(message.price, writer.uint32(10).fork()).ldelim();
        }
        if (message.found === true) {
            writer.uint32(16).bool(message.found);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetPriceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.price = Price.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.found = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetPriceResponse();
        message.price = object.price !== undefined && object.price !== null ? Price.fromPartial(object.price) : undefined;
        message.found = object.found ?? false;
        return message;
    }
};
function createBaseQueryGetLatestPriceRequest() {
    return {
        priceDenom: "",
        assetDenom: "",
        contractAddr: ""
    };
}
export const QueryGetLatestPriceRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.priceDenom !== "") {
            writer.uint32(10).string(message.priceDenom);
        }
        if (message.assetDenom !== "") {
            writer.uint32(18).string(message.assetDenom);
        }
        if (message.contractAddr !== "") {
            writer.uint32(26).string(message.contractAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetLatestPriceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.priceDenom = reader.string();
                    break;
                case 2:
                    message.assetDenom = reader.string();
                    break;
                case 3:
                    message.contractAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetLatestPriceRequest();
        message.priceDenom = object.priceDenom ?? "";
        message.assetDenom = object.assetDenom ?? "";
        message.contractAddr = object.contractAddr ?? "";
        return message;
    }
};
function createBaseQueryGetLatestPriceResponse() {
    return {
        price: Price.fromPartial({})
    };
}
export const QueryGetLatestPriceResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.price !== undefined) {
            Price.encode(message.price, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetLatestPriceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.price = Price.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetLatestPriceResponse();
        message.price = object.price !== undefined && object.price !== null ? Price.fromPartial(object.price) : undefined;
        return message;
    }
};
function createBaseQueryGetTwapsRequest() {
    return {
        contractAddr: "",
        lookbackSeconds: Long.UZERO
    };
}
export const QueryGetTwapsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        if (!message.lookbackSeconds.isZero()) {
            writer.uint32(16).uint64(message.lookbackSeconds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetTwapsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddr = reader.string();
                    break;
                case 2:
                    message.lookbackSeconds = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetTwapsRequest();
        message.contractAddr = object.contractAddr ?? "";
        message.lookbackSeconds = object.lookbackSeconds !== undefined && object.lookbackSeconds !== null ? Long.fromValue(object.lookbackSeconds) : Long.UZERO;
        return message;
    }
};
function createBaseQueryGetTwapsResponse() {
    return {
        twaps: []
    };
}
export const QueryGetTwapsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.twaps) {
            Twap.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetTwapsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.twaps.push(Twap.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetTwapsResponse();
        message.twaps = object.twaps?.map(e => Twap.fromPartial(e)) || [];
        return message;
    }
};
function createBaseQueryAssetListRequest() {
    return {};
}
export const QueryAssetListRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAssetListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryAssetListRequest();
        return message;
    }
};
function createBaseQueryAssetListResponse() {
    return {
        assetList: []
    };
}
export const QueryAssetListResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.assetList) {
            AssetMetadata.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAssetListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.assetList.push(AssetMetadata.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryAssetListResponse();
        message.assetList = object.assetList?.map(e => AssetMetadata.fromPartial(e)) || [];
        return message;
    }
};
function createBaseQueryAssetMetadataRequest() {
    return {
        denom: ""
    };
}
export const QueryAssetMetadataRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAssetMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryAssetMetadataRequest();
        message.denom = object.denom ?? "";
        return message;
    }
};
function createBaseQueryAssetMetadataResponse() {
    return {
        metadata: AssetMetadata.fromPartial({})
    };
}
export const QueryAssetMetadataResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.metadata !== undefined) {
            AssetMetadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAssetMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metadata = AssetMetadata.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryAssetMetadataResponse();
        message.metadata = object.metadata !== undefined && object.metadata !== null ? AssetMetadata.fromPartial(object.metadata) : undefined;
        return message;
    }
};
function createBaseQueryRegisteredPairsRequest() {
    return {
        contractAddr: ""
    };
}
export const QueryRegisteredPairsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRegisteredPairsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryRegisteredPairsRequest();
        message.contractAddr = object.contractAddr ?? "";
        return message;
    }
};
function createBaseQueryRegisteredPairsResponse() {
    return {
        pairs: []
    };
}
export const QueryRegisteredPairsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.pairs) {
            Pair.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRegisteredPairsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pairs.push(Pair.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryRegisteredPairsResponse();
        message.pairs = object.pairs?.map(e => Pair.fromPartial(e)) || [];
        return message;
    }
};
function createBaseQueryRegisteredContractRequest() {
    return {
        contractAddr: ""
    };
}
export const QueryRegisteredContractRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRegisteredContractRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryRegisteredContractRequest();
        message.contractAddr = object.contractAddr ?? "";
        return message;
    }
};
function createBaseQueryRegisteredContractResponse() {
    return {
        contractInfo: ContractInfoV2.fromPartial({})
    };
}
export const QueryRegisteredContractResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractInfo !== undefined) {
            ContractInfoV2.encode(message.contractInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRegisteredContractResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractInfo = ContractInfoV2.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryRegisteredContractResponse();
        message.contractInfo = object.contractInfo !== undefined && object.contractInfo !== null ? ContractInfoV2.fromPartial(object.contractInfo) : undefined;
        return message;
    }
};
function createBaseQueryGetOrdersRequest() {
    return {
        contractAddr: "",
        account: ""
    };
}
export const QueryGetOrdersRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        if (message.account !== "") {
            writer.uint32(18).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetOrdersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddr = reader.string();
                    break;
                case 2:
                    message.account = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetOrdersRequest();
        message.contractAddr = object.contractAddr ?? "";
        message.account = object.account ?? "";
        return message;
    }
};
function createBaseQueryGetOrdersResponse() {
    return {
        orders: []
    };
}
export const QueryGetOrdersResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.orders) {
            Order.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetOrdersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.orders.push(Order.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetOrdersResponse();
        message.orders = object.orders?.map(e => Order.fromPartial(e)) || [];
        return message;
    }
};
function createBaseQueryGetOrderByIDRequest() {
    return {
        contractAddr: "",
        priceDenom: "",
        assetDenom: "",
        id: Long.UZERO
    };
}
export const QueryGetOrderByIDRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        if (message.priceDenom !== "") {
            writer.uint32(18).string(message.priceDenom);
        }
        if (message.assetDenom !== "") {
            writer.uint32(26).string(message.assetDenom);
        }
        if (!message.id.isZero()) {
            writer.uint32(32).uint64(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetOrderByIDRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddr = reader.string();
                    break;
                case 2:
                    message.priceDenom = reader.string();
                    break;
                case 3:
                    message.assetDenom = reader.string();
                    break;
                case 4:
                    message.id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetOrderByIDRequest();
        message.contractAddr = object.contractAddr ?? "";
        message.priceDenom = object.priceDenom ?? "";
        message.assetDenom = object.assetDenom ?? "";
        message.id = object.id !== undefined && object.id !== null ? Long.fromValue(object.id) : Long.UZERO;
        return message;
    }
};
function createBaseQueryGetOrderByIDResponse() {
    return {
        order: Order.fromPartial({})
    };
}
export const QueryGetOrderByIDResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.order !== undefined) {
            Order.encode(message.order, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetOrderByIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.order = Order.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetOrderByIDResponse();
        message.order = object.order !== undefined && object.order !== null ? Order.fromPartial(object.order) : undefined;
        return message;
    }
};
function createBaseQueryGetHistoricalPricesRequest() {
    return {
        contractAddr: "",
        priceDenom: "",
        assetDenom: "",
        periodLengthInSeconds: Long.UZERO,
        numOfPeriods: Long.UZERO
    };
}
export const QueryGetHistoricalPricesRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        if (message.priceDenom !== "") {
            writer.uint32(18).string(message.priceDenom);
        }
        if (message.assetDenom !== "") {
            writer.uint32(26).string(message.assetDenom);
        }
        if (!message.periodLengthInSeconds.isZero()) {
            writer.uint32(32).uint64(message.periodLengthInSeconds);
        }
        if (!message.numOfPeriods.isZero()) {
            writer.uint32(40).uint64(message.numOfPeriods);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetHistoricalPricesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddr = reader.string();
                    break;
                case 2:
                    message.priceDenom = reader.string();
                    break;
                case 3:
                    message.assetDenom = reader.string();
                    break;
                case 4:
                    message.periodLengthInSeconds = reader.uint64();
                    break;
                case 5:
                    message.numOfPeriods = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetHistoricalPricesRequest();
        message.contractAddr = object.contractAddr ?? "";
        message.priceDenom = object.priceDenom ?? "";
        message.assetDenom = object.assetDenom ?? "";
        message.periodLengthInSeconds = object.periodLengthInSeconds !== undefined && object.periodLengthInSeconds !== null ? Long.fromValue(object.periodLengthInSeconds) : Long.UZERO;
        message.numOfPeriods = object.numOfPeriods !== undefined && object.numOfPeriods !== null ? Long.fromValue(object.numOfPeriods) : Long.UZERO;
        return message;
    }
};
function createBaseQueryGetHistoricalPricesResponse() {
    return {
        prices: []
    };
}
export const QueryGetHistoricalPricesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.prices) {
            PriceCandlestick.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetHistoricalPricesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.prices.push(PriceCandlestick.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetHistoricalPricesResponse();
        message.prices = object.prices?.map(e => PriceCandlestick.fromPartial(e)) || [];
        return message;
    }
};
function createBaseQueryGetMarketSummaryRequest() {
    return {
        contractAddr: "",
        priceDenom: "",
        assetDenom: "",
        lookbackInSeconds: Long.UZERO
    };
}
export const QueryGetMarketSummaryRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        if (message.priceDenom !== "") {
            writer.uint32(18).string(message.priceDenom);
        }
        if (message.assetDenom !== "") {
            writer.uint32(26).string(message.assetDenom);
        }
        if (!message.lookbackInSeconds.isZero()) {
            writer.uint32(32).uint64(message.lookbackInSeconds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetMarketSummaryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddr = reader.string();
                    break;
                case 2:
                    message.priceDenom = reader.string();
                    break;
                case 3:
                    message.assetDenom = reader.string();
                    break;
                case 4:
                    message.lookbackInSeconds = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetMarketSummaryRequest();
        message.contractAddr = object.contractAddr ?? "";
        message.priceDenom = object.priceDenom ?? "";
        message.assetDenom = object.assetDenom ?? "";
        message.lookbackInSeconds = object.lookbackInSeconds !== undefined && object.lookbackInSeconds !== null ? Long.fromValue(object.lookbackInSeconds) : Long.UZERO;
        return message;
    }
};
function createBaseQueryGetMarketSummaryResponse() {
    return {
        totalVolume: "",
        totalVolumeNotional: "",
        highPrice: "",
        lowPrice: "",
        lastPrice: ""
    };
}
export const QueryGetMarketSummaryResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.totalVolume !== "") {
            writer.uint32(10).string(message.totalVolume);
        }
        if (message.totalVolumeNotional !== "") {
            writer.uint32(18).string(message.totalVolumeNotional);
        }
        if (message.highPrice !== "") {
            writer.uint32(26).string(message.highPrice);
        }
        if (message.lowPrice !== "") {
            writer.uint32(34).string(message.lowPrice);
        }
        if (message.lastPrice !== "") {
            writer.uint32(42).string(message.lastPrice);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetMarketSummaryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.totalVolume = reader.string();
                    break;
                case 2:
                    message.totalVolumeNotional = reader.string();
                    break;
                case 3:
                    message.highPrice = reader.string();
                    break;
                case 4:
                    message.lowPrice = reader.string();
                    break;
                case 5:
                    message.lastPrice = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetMarketSummaryResponse();
        message.totalVolume = object.totalVolume ?? "";
        message.totalVolumeNotional = object.totalVolumeNotional ?? "";
        message.highPrice = object.highPrice ?? "";
        message.lowPrice = object.lowPrice ?? "";
        message.lastPrice = object.lastPrice ?? "";
        return message;
    }
};
function createBaseQueryOrderSimulationRequest() {
    return {
        order: Order.fromPartial({}),
        contractAddr: ""
    };
}
export const QueryOrderSimulationRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.order !== undefined) {
            Order.encode(message.order, writer.uint32(10).fork()).ldelim();
        }
        if (message.contractAddr !== "") {
            writer.uint32(18).string(message.contractAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOrderSimulationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.order = Order.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.contractAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryOrderSimulationRequest();
        message.order = object.order !== undefined && object.order !== null ? Order.fromPartial(object.order) : undefined;
        message.contractAddr = object.contractAddr ?? "";
        return message;
    }
};
function createBaseQueryOrderSimulationResponse() {
    return {
        ExecutedQuantity: ""
    };
}
export const QueryOrderSimulationResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.ExecutedQuantity !== "") {
            writer.uint32(10).string(message.ExecutedQuantity);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOrderSimulationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.ExecutedQuantity = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryOrderSimulationResponse();
        message.ExecutedQuantity = object.ExecutedQuantity ?? "";
        return message;
    }
};
function createBaseQueryGetMatchResultRequest() {
    return {
        contractAddr: ""
    };
}
export const QueryGetMatchResultRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetMatchResultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetMatchResultRequest();
        message.contractAddr = object.contractAddr ?? "";
        return message;
    }
};
function createBaseQueryGetMatchResultResponse() {
    return {
        result: MatchResult.fromPartial({})
    };
}
export const QueryGetMatchResultResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.result !== undefined) {
            MatchResult.encode(message.result, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetMatchResultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.result = MatchResult.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetMatchResultResponse();
        message.result = object.result !== undefined && object.result !== null ? MatchResult.fromPartial(object.result) : undefined;
        return message;
    }
};
function createBaseQueryGetOrderCountRequest() {
    return {
        contractAddr: "",
        priceDenom: "",
        assetDenom: "",
        price: "",
        positionDirection: 0
    };
}
export const QueryGetOrderCountRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        if (message.priceDenom !== "") {
            writer.uint32(18).string(message.priceDenom);
        }
        if (message.assetDenom !== "") {
            writer.uint32(26).string(message.assetDenom);
        }
        if (message.price !== "") {
            writer.uint32(34).string(message.price);
        }
        if (message.positionDirection !== 0) {
            writer.uint32(40).int32(message.positionDirection);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetOrderCountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddr = reader.string();
                    break;
                case 2:
                    message.priceDenom = reader.string();
                    break;
                case 3:
                    message.assetDenom = reader.string();
                    break;
                case 4:
                    message.price = reader.string();
                    break;
                case 5:
                    message.positionDirection = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetOrderCountRequest();
        message.contractAddr = object.contractAddr ?? "";
        message.priceDenom = object.priceDenom ?? "";
        message.assetDenom = object.assetDenom ?? "";
        message.price = object.price ?? "";
        message.positionDirection = object.positionDirection ?? 0;
        return message;
    }
};
function createBaseQueryGetOrderCountResponse() {
    return {
        count: Long.UZERO
    };
}
export const QueryGetOrderCountResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.count.isZero()) {
            writer.uint32(8).uint64(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetOrderCountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.count = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetOrderCountResponse();
        message.count = object.count !== undefined && object.count !== null ? Long.fromValue(object.count) : Long.UZERO;
        return message;
    }
};

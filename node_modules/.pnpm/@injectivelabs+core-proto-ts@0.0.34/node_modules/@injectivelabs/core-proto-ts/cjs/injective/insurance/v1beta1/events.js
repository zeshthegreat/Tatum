"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventInsuranceWithdraw = exports.EventUnderwrite = exports.EventWithdrawRedemption = exports.EventRequestRedemption = exports.EventInsuranceFundUpdate = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const insurance_1 = require("./insurance");
exports.protobufPackage = "injective.insurance.v1beta1";
function createBaseEventInsuranceFundUpdate() {
    return { fund: undefined };
}
exports.EventInsuranceFundUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fund !== undefined) {
            insurance_1.InsuranceFund.encode(message.fund, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventInsuranceFundUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fund = insurance_1.InsuranceFund.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { fund: isSet(object.fund) ? insurance_1.InsuranceFund.fromJSON(object.fund) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.fund !== undefined && (obj.fund = message.fund ? insurance_1.InsuranceFund.toJSON(message.fund) : undefined);
        return obj;
    },
    create(base) {
        return exports.EventInsuranceFundUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseEventInsuranceFundUpdate();
        message.fund = (object.fund !== undefined && object.fund !== null)
            ? insurance_1.InsuranceFund.fromPartial(object.fund)
            : undefined;
        return message;
    },
};
function createBaseEventRequestRedemption() {
    return { schedule: undefined };
}
exports.EventRequestRedemption = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.schedule !== undefined) {
            insurance_1.RedemptionSchedule.encode(message.schedule, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRequestRedemption();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.schedule = insurance_1.RedemptionSchedule.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { schedule: isSet(object.schedule) ? insurance_1.RedemptionSchedule.fromJSON(object.schedule) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.schedule !== undefined &&
            (obj.schedule = message.schedule ? insurance_1.RedemptionSchedule.toJSON(message.schedule) : undefined);
        return obj;
    },
    create(base) {
        return exports.EventRequestRedemption.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseEventRequestRedemption();
        message.schedule = (object.schedule !== undefined && object.schedule !== null)
            ? insurance_1.RedemptionSchedule.fromPartial(object.schedule)
            : undefined;
        return message;
    },
};
function createBaseEventWithdrawRedemption() {
    return { schedule: undefined, redeemCoin: undefined };
}
exports.EventWithdrawRedemption = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.schedule !== undefined) {
            insurance_1.RedemptionSchedule.encode(message.schedule, writer.uint32(10).fork()).ldelim();
        }
        if (message.redeemCoin !== undefined) {
            coin_1.Coin.encode(message.redeemCoin, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventWithdrawRedemption();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.schedule = insurance_1.RedemptionSchedule.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.redeemCoin = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            schedule: isSet(object.schedule) ? insurance_1.RedemptionSchedule.fromJSON(object.schedule) : undefined,
            redeemCoin: isSet(object.redeemCoin) ? coin_1.Coin.fromJSON(object.redeemCoin) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.schedule !== undefined &&
            (obj.schedule = message.schedule ? insurance_1.RedemptionSchedule.toJSON(message.schedule) : undefined);
        message.redeemCoin !== undefined &&
            (obj.redeemCoin = message.redeemCoin ? coin_1.Coin.toJSON(message.redeemCoin) : undefined);
        return obj;
    },
    create(base) {
        return exports.EventWithdrawRedemption.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseEventWithdrawRedemption();
        message.schedule = (object.schedule !== undefined && object.schedule !== null)
            ? insurance_1.RedemptionSchedule.fromPartial(object.schedule)
            : undefined;
        message.redeemCoin = (object.redeemCoin !== undefined && object.redeemCoin !== null)
            ? coin_1.Coin.fromPartial(object.redeemCoin)
            : undefined;
        return message;
    },
};
function createBaseEventUnderwrite() {
    return { underwriter: "", marketId: "", deposit: undefined, shares: undefined };
}
exports.EventUnderwrite = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.underwriter !== "") {
            writer.uint32(10).string(message.underwriter);
        }
        if (message.marketId !== "") {
            writer.uint32(18).string(message.marketId);
        }
        if (message.deposit !== undefined) {
            coin_1.Coin.encode(message.deposit, writer.uint32(26).fork()).ldelim();
        }
        if (message.shares !== undefined) {
            coin_1.Coin.encode(message.shares, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUnderwrite();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.underwriter = reader.string();
                    break;
                case 2:
                    message.marketId = reader.string();
                    break;
                case 3:
                    message.deposit = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.shares = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            underwriter: isSet(object.underwriter) ? String(object.underwriter) : "",
            marketId: isSet(object.marketId) ? String(object.marketId) : "",
            deposit: isSet(object.deposit) ? coin_1.Coin.fromJSON(object.deposit) : undefined,
            shares: isSet(object.shares) ? coin_1.Coin.fromJSON(object.shares) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.underwriter !== undefined && (obj.underwriter = message.underwriter);
        message.marketId !== undefined && (obj.marketId = message.marketId);
        message.deposit !== undefined && (obj.deposit = message.deposit ? coin_1.Coin.toJSON(message.deposit) : undefined);
        message.shares !== undefined && (obj.shares = message.shares ? coin_1.Coin.toJSON(message.shares) : undefined);
        return obj;
    },
    create(base) {
        return exports.EventUnderwrite.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventUnderwrite();
        message.underwriter = (_a = object.underwriter) !== null && _a !== void 0 ? _a : "";
        message.marketId = (_b = object.marketId) !== null && _b !== void 0 ? _b : "";
        message.deposit = (object.deposit !== undefined && object.deposit !== null)
            ? coin_1.Coin.fromPartial(object.deposit)
            : undefined;
        message.shares = (object.shares !== undefined && object.shares !== null)
            ? coin_1.Coin.fromPartial(object.shares)
            : undefined;
        return message;
    },
};
function createBaseEventInsuranceWithdraw() {
    return { marketId: "", marketTicker: "", withdrawal: undefined };
}
exports.EventInsuranceWithdraw = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.marketId !== "") {
            writer.uint32(10).string(message.marketId);
        }
        if (message.marketTicker !== "") {
            writer.uint32(18).string(message.marketTicker);
        }
        if (message.withdrawal !== undefined) {
            coin_1.Coin.encode(message.withdrawal, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventInsuranceWithdraw();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.marketId = reader.string();
                    break;
                case 2:
                    message.marketTicker = reader.string();
                    break;
                case 3:
                    message.withdrawal = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            marketId: isSet(object.marketId) ? String(object.marketId) : "",
            marketTicker: isSet(object.marketTicker) ? String(object.marketTicker) : "",
            withdrawal: isSet(object.withdrawal) ? coin_1.Coin.fromJSON(object.withdrawal) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.marketId !== undefined && (obj.marketId = message.marketId);
        message.marketTicker !== undefined && (obj.marketTicker = message.marketTicker);
        message.withdrawal !== undefined &&
            (obj.withdrawal = message.withdrawal ? coin_1.Coin.toJSON(message.withdrawal) : undefined);
        return obj;
    },
    create(base) {
        return exports.EventInsuranceWithdraw.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventInsuranceWithdraw();
        message.marketId = (_a = object.marketId) !== null && _a !== void 0 ? _a : "";
        message.marketTicker = (_b = object.marketTicker) !== null && _b !== void 0 ? _b : "";
        message.withdrawal = (object.withdrawal !== undefined && object.withdrawal !== null)
            ? coin_1.Coin.fromPartial(object.withdrawal)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}

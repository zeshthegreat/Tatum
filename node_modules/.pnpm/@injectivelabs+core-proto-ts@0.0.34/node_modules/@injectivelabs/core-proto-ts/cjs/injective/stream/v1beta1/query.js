"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.StreamStreamDesc = exports.StreamDesc = exports.StreamClientImpl = exports.OraclePriceFilter = exports.SubaccountDepositsFilter = exports.BankBalancesFilter = exports.OrderbookFilter = exports.OrdersFilter = exports.PositionsFilter = exports.TradesFilter = exports.DerivativeTrade = exports.SpotTrade = exports.OraclePrice = exports.Position = exports.DerivativeOrder = exports.DerivativeOrderUpdate = exports.SpotOrder = exports.SpotOrderUpdate = exports.SubaccountDeposit = exports.SubaccountDeposits = exports.BankBalance = exports.Orderbook = exports.OrderbookUpdate = exports.StreamResponse = exports.StreamRequest = exports.orderUpdateStatusToJSON = exports.orderUpdateStatusFromJSON = exports.OrderUpdateStatus = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@injectivelabs/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const exchange_1 = require("../../exchange/v1beta1/exchange");
exports.protobufPackage = "injective.stream.v1beta1";
var OrderUpdateStatus;
(function (OrderUpdateStatus) {
    OrderUpdateStatus[OrderUpdateStatus["Unspecified"] = 0] = "Unspecified";
    OrderUpdateStatus[OrderUpdateStatus["Booked"] = 1] = "Booked";
    OrderUpdateStatus[OrderUpdateStatus["Matched"] = 2] = "Matched";
    OrderUpdateStatus[OrderUpdateStatus["Cancelled"] = 3] = "Cancelled";
    OrderUpdateStatus[OrderUpdateStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(OrderUpdateStatus = exports.OrderUpdateStatus || (exports.OrderUpdateStatus = {}));
function orderUpdateStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "Unspecified":
            return OrderUpdateStatus.Unspecified;
        case 1:
        case "Booked":
            return OrderUpdateStatus.Booked;
        case 2:
        case "Matched":
            return OrderUpdateStatus.Matched;
        case 3:
        case "Cancelled":
            return OrderUpdateStatus.Cancelled;
        case -1:
        case "UNRECOGNIZED":
        default:
            return OrderUpdateStatus.UNRECOGNIZED;
    }
}
exports.orderUpdateStatusFromJSON = orderUpdateStatusFromJSON;
function orderUpdateStatusToJSON(object) {
    switch (object) {
        case OrderUpdateStatus.Unspecified:
            return "Unspecified";
        case OrderUpdateStatus.Booked:
            return "Booked";
        case OrderUpdateStatus.Matched:
            return "Matched";
        case OrderUpdateStatus.Cancelled:
            return "Cancelled";
        case OrderUpdateStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.orderUpdateStatusToJSON = orderUpdateStatusToJSON;
function createBaseStreamRequest() {
    return {
        bankBalancesFilter: undefined,
        subaccountDepositsFilter: undefined,
        spotTradesFilter: undefined,
        derivativeTradesFilter: undefined,
        spotOrdersFilter: undefined,
        derivativeOrdersFilter: undefined,
        spotOrderbooksFilter: undefined,
        derivativeOrderbooksFilter: undefined,
        positionsFilter: undefined,
        oraclePriceFilter: undefined,
    };
}
exports.StreamRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.bankBalancesFilter !== undefined) {
            exports.BankBalancesFilter.encode(message.bankBalancesFilter, writer.uint32(10).fork()).ldelim();
        }
        if (message.subaccountDepositsFilter !== undefined) {
            exports.SubaccountDepositsFilter.encode(message.subaccountDepositsFilter, writer.uint32(18).fork()).ldelim();
        }
        if (message.spotTradesFilter !== undefined) {
            exports.TradesFilter.encode(message.spotTradesFilter, writer.uint32(26).fork()).ldelim();
        }
        if (message.derivativeTradesFilter !== undefined) {
            exports.TradesFilter.encode(message.derivativeTradesFilter, writer.uint32(34).fork()).ldelim();
        }
        if (message.spotOrdersFilter !== undefined) {
            exports.OrdersFilter.encode(message.spotOrdersFilter, writer.uint32(42).fork()).ldelim();
        }
        if (message.derivativeOrdersFilter !== undefined) {
            exports.OrdersFilter.encode(message.derivativeOrdersFilter, writer.uint32(50).fork()).ldelim();
        }
        if (message.spotOrderbooksFilter !== undefined) {
            exports.OrderbookFilter.encode(message.spotOrderbooksFilter, writer.uint32(58).fork()).ldelim();
        }
        if (message.derivativeOrderbooksFilter !== undefined) {
            exports.OrderbookFilter.encode(message.derivativeOrderbooksFilter, writer.uint32(66).fork()).ldelim();
        }
        if (message.positionsFilter !== undefined) {
            exports.PositionsFilter.encode(message.positionsFilter, writer.uint32(74).fork()).ldelim();
        }
        if (message.oraclePriceFilter !== undefined) {
            exports.OraclePriceFilter.encode(message.oraclePriceFilter, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bankBalancesFilter = exports.BankBalancesFilter.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.subaccountDepositsFilter = exports.SubaccountDepositsFilter.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.spotTradesFilter = exports.TradesFilter.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.derivativeTradesFilter = exports.TradesFilter.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.spotOrdersFilter = exports.OrdersFilter.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.derivativeOrdersFilter = exports.OrdersFilter.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.spotOrderbooksFilter = exports.OrderbookFilter.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.derivativeOrderbooksFilter = exports.OrderbookFilter.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.positionsFilter = exports.PositionsFilter.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.oraclePriceFilter = exports.OraclePriceFilter.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bankBalancesFilter: isSet(object.bankBalancesFilter)
                ? exports.BankBalancesFilter.fromJSON(object.bankBalancesFilter)
                : undefined,
            subaccountDepositsFilter: isSet(object.subaccountDepositsFilter)
                ? exports.SubaccountDepositsFilter.fromJSON(object.subaccountDepositsFilter)
                : undefined,
            spotTradesFilter: isSet(object.spotTradesFilter) ? exports.TradesFilter.fromJSON(object.spotTradesFilter) : undefined,
            derivativeTradesFilter: isSet(object.derivativeTradesFilter)
                ? exports.TradesFilter.fromJSON(object.derivativeTradesFilter)
                : undefined,
            spotOrdersFilter: isSet(object.spotOrdersFilter) ? exports.OrdersFilter.fromJSON(object.spotOrdersFilter) : undefined,
            derivativeOrdersFilter: isSet(object.derivativeOrdersFilter)
                ? exports.OrdersFilter.fromJSON(object.derivativeOrdersFilter)
                : undefined,
            spotOrderbooksFilter: isSet(object.spotOrderbooksFilter)
                ? exports.OrderbookFilter.fromJSON(object.spotOrderbooksFilter)
                : undefined,
            derivativeOrderbooksFilter: isSet(object.derivativeOrderbooksFilter)
                ? exports.OrderbookFilter.fromJSON(object.derivativeOrderbooksFilter)
                : undefined,
            positionsFilter: isSet(object.positionsFilter) ? exports.PositionsFilter.fromJSON(object.positionsFilter) : undefined,
            oraclePriceFilter: isSet(object.oraclePriceFilter)
                ? exports.OraclePriceFilter.fromJSON(object.oraclePriceFilter)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.bankBalancesFilter !== undefined && (obj.bankBalancesFilter = message.bankBalancesFilter
            ? exports.BankBalancesFilter.toJSON(message.bankBalancesFilter)
            : undefined);
        message.subaccountDepositsFilter !== undefined && (obj.subaccountDepositsFilter = message.subaccountDepositsFilter
            ? exports.SubaccountDepositsFilter.toJSON(message.subaccountDepositsFilter)
            : undefined);
        message.spotTradesFilter !== undefined &&
            (obj.spotTradesFilter = message.spotTradesFilter ? exports.TradesFilter.toJSON(message.spotTradesFilter) : undefined);
        message.derivativeTradesFilter !== undefined && (obj.derivativeTradesFilter = message.derivativeTradesFilter
            ? exports.TradesFilter.toJSON(message.derivativeTradesFilter)
            : undefined);
        message.spotOrdersFilter !== undefined &&
            (obj.spotOrdersFilter = message.spotOrdersFilter ? exports.OrdersFilter.toJSON(message.spotOrdersFilter) : undefined);
        message.derivativeOrdersFilter !== undefined && (obj.derivativeOrdersFilter = message.derivativeOrdersFilter
            ? exports.OrdersFilter.toJSON(message.derivativeOrdersFilter)
            : undefined);
        message.spotOrderbooksFilter !== undefined && (obj.spotOrderbooksFilter = message.spotOrderbooksFilter
            ? exports.OrderbookFilter.toJSON(message.spotOrderbooksFilter)
            : undefined);
        message.derivativeOrderbooksFilter !== undefined &&
            (obj.derivativeOrderbooksFilter = message.derivativeOrderbooksFilter
                ? exports.OrderbookFilter.toJSON(message.derivativeOrderbooksFilter)
                : undefined);
        message.positionsFilter !== undefined &&
            (obj.positionsFilter = message.positionsFilter ? exports.PositionsFilter.toJSON(message.positionsFilter) : undefined);
        message.oraclePriceFilter !== undefined && (obj.oraclePriceFilter = message.oraclePriceFilter
            ? exports.OraclePriceFilter.toJSON(message.oraclePriceFilter)
            : undefined);
        return obj;
    },
    create(base) {
        return exports.StreamRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseStreamRequest();
        message.bankBalancesFilter = (object.bankBalancesFilter !== undefined && object.bankBalancesFilter !== null)
            ? exports.BankBalancesFilter.fromPartial(object.bankBalancesFilter)
            : undefined;
        message.subaccountDepositsFilter =
            (object.subaccountDepositsFilter !== undefined && object.subaccountDepositsFilter !== null)
                ? exports.SubaccountDepositsFilter.fromPartial(object.subaccountDepositsFilter)
                : undefined;
        message.spotTradesFilter = (object.spotTradesFilter !== undefined && object.spotTradesFilter !== null)
            ? exports.TradesFilter.fromPartial(object.spotTradesFilter)
            : undefined;
        message.derivativeTradesFilter =
            (object.derivativeTradesFilter !== undefined && object.derivativeTradesFilter !== null)
                ? exports.TradesFilter.fromPartial(object.derivativeTradesFilter)
                : undefined;
        message.spotOrdersFilter = (object.spotOrdersFilter !== undefined && object.spotOrdersFilter !== null)
            ? exports.OrdersFilter.fromPartial(object.spotOrdersFilter)
            : undefined;
        message.derivativeOrdersFilter =
            (object.derivativeOrdersFilter !== undefined && object.derivativeOrdersFilter !== null)
                ? exports.OrdersFilter.fromPartial(object.derivativeOrdersFilter)
                : undefined;
        message.spotOrderbooksFilter = (object.spotOrderbooksFilter !== undefined && object.spotOrderbooksFilter !== null)
            ? exports.OrderbookFilter.fromPartial(object.spotOrderbooksFilter)
            : undefined;
        message.derivativeOrderbooksFilter =
            (object.derivativeOrderbooksFilter !== undefined && object.derivativeOrderbooksFilter !== null)
                ? exports.OrderbookFilter.fromPartial(object.derivativeOrderbooksFilter)
                : undefined;
        message.positionsFilter = (object.positionsFilter !== undefined && object.positionsFilter !== null)
            ? exports.PositionsFilter.fromPartial(object.positionsFilter)
            : undefined;
        message.oraclePriceFilter = (object.oraclePriceFilter !== undefined && object.oraclePriceFilter !== null)
            ? exports.OraclePriceFilter.fromPartial(object.oraclePriceFilter)
            : undefined;
        return message;
    },
};
function createBaseStreamResponse() {
    return {
        blockHeight: "0",
        blockTime: "0",
        bankBalances: [],
        subaccountDeposits: [],
        spotTrades: [],
        derivativeTrades: [],
        spotOrders: [],
        derivativeOrders: [],
        spotOrderbookUpdates: [],
        derivativeOrderbookUpdates: [],
        positions: [],
        oraclePrices: [],
    };
}
exports.StreamResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.blockHeight !== "0") {
            writer.uint32(8).uint64(message.blockHeight);
        }
        if (message.blockTime !== "0") {
            writer.uint32(16).int64(message.blockTime);
        }
        for (const v of message.bankBalances) {
            exports.BankBalance.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.subaccountDeposits) {
            exports.SubaccountDeposits.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.spotTrades) {
            exports.SpotTrade.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.derivativeTrades) {
            exports.DerivativeTrade.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.spotOrders) {
            exports.SpotOrderUpdate.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.derivativeOrders) {
            exports.DerivativeOrderUpdate.encode(v, writer.uint32(66).fork()).ldelim();
        }
        for (const v of message.spotOrderbookUpdates) {
            exports.OrderbookUpdate.encode(v, writer.uint32(74).fork()).ldelim();
        }
        for (const v of message.derivativeOrderbookUpdates) {
            exports.OrderbookUpdate.encode(v, writer.uint32(82).fork()).ldelim();
        }
        for (const v of message.positions) {
            exports.Position.encode(v, writer.uint32(90).fork()).ldelim();
        }
        for (const v of message.oraclePrices) {
            exports.OraclePrice.encode(v, writer.uint32(98).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.blockHeight = longToString(reader.uint64());
                    break;
                case 2:
                    message.blockTime = longToString(reader.int64());
                    break;
                case 3:
                    message.bankBalances.push(exports.BankBalance.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.subaccountDeposits.push(exports.SubaccountDeposits.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.spotTrades.push(exports.SpotTrade.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.derivativeTrades.push(exports.DerivativeTrade.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.spotOrders.push(exports.SpotOrderUpdate.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.derivativeOrders.push(exports.DerivativeOrderUpdate.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.spotOrderbookUpdates.push(exports.OrderbookUpdate.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.derivativeOrderbookUpdates.push(exports.OrderbookUpdate.decode(reader, reader.uint32()));
                    break;
                case 11:
                    message.positions.push(exports.Position.decode(reader, reader.uint32()));
                    break;
                case 12:
                    message.oraclePrices.push(exports.OraclePrice.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHeight: isSet(object.blockHeight) ? String(object.blockHeight) : "0",
            blockTime: isSet(object.blockTime) ? String(object.blockTime) : "0",
            bankBalances: Array.isArray(object === null || object === void 0 ? void 0 : object.bankBalances)
                ? object.bankBalances.map((e) => exports.BankBalance.fromJSON(e))
                : [],
            subaccountDeposits: Array.isArray(object === null || object === void 0 ? void 0 : object.subaccountDeposits)
                ? object.subaccountDeposits.map((e) => exports.SubaccountDeposits.fromJSON(e))
                : [],
            spotTrades: Array.isArray(object === null || object === void 0 ? void 0 : object.spotTrades) ? object.spotTrades.map((e) => exports.SpotTrade.fromJSON(e)) : [],
            derivativeTrades: Array.isArray(object === null || object === void 0 ? void 0 : object.derivativeTrades)
                ? object.derivativeTrades.map((e) => exports.DerivativeTrade.fromJSON(e))
                : [],
            spotOrders: Array.isArray(object === null || object === void 0 ? void 0 : object.spotOrders)
                ? object.spotOrders.map((e) => exports.SpotOrderUpdate.fromJSON(e))
                : [],
            derivativeOrders: Array.isArray(object === null || object === void 0 ? void 0 : object.derivativeOrders)
                ? object.derivativeOrders.map((e) => exports.DerivativeOrderUpdate.fromJSON(e))
                : [],
            spotOrderbookUpdates: Array.isArray(object === null || object === void 0 ? void 0 : object.spotOrderbookUpdates)
                ? object.spotOrderbookUpdates.map((e) => exports.OrderbookUpdate.fromJSON(e))
                : [],
            derivativeOrderbookUpdates: Array.isArray(object === null || object === void 0 ? void 0 : object.derivativeOrderbookUpdates)
                ? object.derivativeOrderbookUpdates.map((e) => exports.OrderbookUpdate.fromJSON(e))
                : [],
            positions: Array.isArray(object === null || object === void 0 ? void 0 : object.positions) ? object.positions.map((e) => exports.Position.fromJSON(e)) : [],
            oraclePrices: Array.isArray(object === null || object === void 0 ? void 0 : object.oraclePrices)
                ? object.oraclePrices.map((e) => exports.OraclePrice.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.blockHeight !== undefined && (obj.blockHeight = message.blockHeight);
        message.blockTime !== undefined && (obj.blockTime = message.blockTime);
        if (message.bankBalances) {
            obj.bankBalances = message.bankBalances.map((e) => e ? exports.BankBalance.toJSON(e) : undefined);
        }
        else {
            obj.bankBalances = [];
        }
        if (message.subaccountDeposits) {
            obj.subaccountDeposits = message.subaccountDeposits.map((e) => e ? exports.SubaccountDeposits.toJSON(e) : undefined);
        }
        else {
            obj.subaccountDeposits = [];
        }
        if (message.spotTrades) {
            obj.spotTrades = message.spotTrades.map((e) => e ? exports.SpotTrade.toJSON(e) : undefined);
        }
        else {
            obj.spotTrades = [];
        }
        if (message.derivativeTrades) {
            obj.derivativeTrades = message.derivativeTrades.map((e) => e ? exports.DerivativeTrade.toJSON(e) : undefined);
        }
        else {
            obj.derivativeTrades = [];
        }
        if (message.spotOrders) {
            obj.spotOrders = message.spotOrders.map((e) => e ? exports.SpotOrderUpdate.toJSON(e) : undefined);
        }
        else {
            obj.spotOrders = [];
        }
        if (message.derivativeOrders) {
            obj.derivativeOrders = message.derivativeOrders.map((e) => e ? exports.DerivativeOrderUpdate.toJSON(e) : undefined);
        }
        else {
            obj.derivativeOrders = [];
        }
        if (message.spotOrderbookUpdates) {
            obj.spotOrderbookUpdates = message.spotOrderbookUpdates.map((e) => e ? exports.OrderbookUpdate.toJSON(e) : undefined);
        }
        else {
            obj.spotOrderbookUpdates = [];
        }
        if (message.derivativeOrderbookUpdates) {
            obj.derivativeOrderbookUpdates = message.derivativeOrderbookUpdates.map((e) => e ? exports.OrderbookUpdate.toJSON(e) : undefined);
        }
        else {
            obj.derivativeOrderbookUpdates = [];
        }
        if (message.positions) {
            obj.positions = message.positions.map((e) => e ? exports.Position.toJSON(e) : undefined);
        }
        else {
            obj.positions = [];
        }
        if (message.oraclePrices) {
            obj.oraclePrices = message.oraclePrices.map((e) => e ? exports.OraclePrice.toJSON(e) : undefined);
        }
        else {
            obj.oraclePrices = [];
        }
        return obj;
    },
    create(base) {
        return exports.StreamResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const message = createBaseStreamResponse();
        message.blockHeight = (_a = object.blockHeight) !== null && _a !== void 0 ? _a : "0";
        message.blockTime = (_b = object.blockTime) !== null && _b !== void 0 ? _b : "0";
        message.bankBalances = ((_c = object.bankBalances) === null || _c === void 0 ? void 0 : _c.map((e) => exports.BankBalance.fromPartial(e))) || [];
        message.subaccountDeposits = ((_d = object.subaccountDeposits) === null || _d === void 0 ? void 0 : _d.map((e) => exports.SubaccountDeposits.fromPartial(e))) || [];
        message.spotTrades = ((_e = object.spotTrades) === null || _e === void 0 ? void 0 : _e.map((e) => exports.SpotTrade.fromPartial(e))) || [];
        message.derivativeTrades = ((_f = object.derivativeTrades) === null || _f === void 0 ? void 0 : _f.map((e) => exports.DerivativeTrade.fromPartial(e))) || [];
        message.spotOrders = ((_g = object.spotOrders) === null || _g === void 0 ? void 0 : _g.map((e) => exports.SpotOrderUpdate.fromPartial(e))) || [];
        message.derivativeOrders = ((_h = object.derivativeOrders) === null || _h === void 0 ? void 0 : _h.map((e) => exports.DerivativeOrderUpdate.fromPartial(e))) || [];
        message.spotOrderbookUpdates = ((_j = object.spotOrderbookUpdates) === null || _j === void 0 ? void 0 : _j.map((e) => exports.OrderbookUpdate.fromPartial(e))) || [];
        message.derivativeOrderbookUpdates =
            ((_k = object.derivativeOrderbookUpdates) === null || _k === void 0 ? void 0 : _k.map((e) => exports.OrderbookUpdate.fromPartial(e))) || [];
        message.positions = ((_l = object.positions) === null || _l === void 0 ? void 0 : _l.map((e) => exports.Position.fromPartial(e))) || [];
        message.oraclePrices = ((_m = object.oraclePrices) === null || _m === void 0 ? void 0 : _m.map((e) => exports.OraclePrice.fromPartial(e))) || [];
        return message;
    },
};
function createBaseOrderbookUpdate() {
    return { seq: "0", orderbook: undefined };
}
exports.OrderbookUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.seq !== "0") {
            writer.uint32(8).uint64(message.seq);
        }
        if (message.orderbook !== undefined) {
            exports.Orderbook.encode(message.orderbook, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderbookUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.seq = longToString(reader.uint64());
                    break;
                case 2:
                    message.orderbook = exports.Orderbook.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            seq: isSet(object.seq) ? String(object.seq) : "0",
            orderbook: isSet(object.orderbook) ? exports.Orderbook.fromJSON(object.orderbook) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.seq !== undefined && (obj.seq = message.seq);
        message.orderbook !== undefined &&
            (obj.orderbook = message.orderbook ? exports.Orderbook.toJSON(message.orderbook) : undefined);
        return obj;
    },
    create(base) {
        return exports.OrderbookUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseOrderbookUpdate();
        message.seq = (_a = object.seq) !== null && _a !== void 0 ? _a : "0";
        message.orderbook = (object.orderbook !== undefined && object.orderbook !== null)
            ? exports.Orderbook.fromPartial(object.orderbook)
            : undefined;
        return message;
    },
};
function createBaseOrderbook() {
    return { marketId: "", buyLevels: [], sellLevels: [] };
}
exports.Orderbook = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.marketId !== "") {
            writer.uint32(10).string(message.marketId);
        }
        for (const v of message.buyLevels) {
            exchange_1.Level.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.sellLevels) {
            exchange_1.Level.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderbook();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.marketId = reader.string();
                    break;
                case 2:
                    message.buyLevels.push(exchange_1.Level.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.sellLevels.push(exchange_1.Level.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            marketId: isSet(object.marketId) ? String(object.marketId) : "",
            buyLevels: Array.isArray(object === null || object === void 0 ? void 0 : object.buyLevels) ? object.buyLevels.map((e) => exchange_1.Level.fromJSON(e)) : [],
            sellLevels: Array.isArray(object === null || object === void 0 ? void 0 : object.sellLevels) ? object.sellLevels.map((e) => exchange_1.Level.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.marketId !== undefined && (obj.marketId = message.marketId);
        if (message.buyLevels) {
            obj.buyLevels = message.buyLevels.map((e) => e ? exchange_1.Level.toJSON(e) : undefined);
        }
        else {
            obj.buyLevels = [];
        }
        if (message.sellLevels) {
            obj.sellLevels = message.sellLevels.map((e) => e ? exchange_1.Level.toJSON(e) : undefined);
        }
        else {
            obj.sellLevels = [];
        }
        return obj;
    },
    create(base) {
        return exports.Orderbook.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseOrderbook();
        message.marketId = (_a = object.marketId) !== null && _a !== void 0 ? _a : "";
        message.buyLevels = ((_b = object.buyLevels) === null || _b === void 0 ? void 0 : _b.map((e) => exchange_1.Level.fromPartial(e))) || [];
        message.sellLevels = ((_c = object.sellLevels) === null || _c === void 0 ? void 0 : _c.map((e) => exchange_1.Level.fromPartial(e))) || [];
        return message;
    },
};
function createBaseBankBalance() {
    return { account: "", balances: [] };
}
exports.BankBalance = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        for (const v of message.balances) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBankBalance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.balances.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? String(object.account) : "",
            balances: Array.isArray(object === null || object === void 0 ? void 0 : object.balances) ? object.balances.map((e) => coin_1.Coin.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        if (message.balances) {
            obj.balances = message.balances.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.balances = [];
        }
        return obj;
    },
    create(base) {
        return exports.BankBalance.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBankBalance();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.balances = ((_b = object.balances) === null || _b === void 0 ? void 0 : _b.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSubaccountDeposits() {
    return { subaccountId: "", deposits: [] };
}
exports.SubaccountDeposits = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.subaccountId !== "") {
            writer.uint32(10).string(message.subaccountId);
        }
        for (const v of message.deposits) {
            exports.SubaccountDeposit.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubaccountDeposits();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subaccountId = reader.string();
                    break;
                case 2:
                    message.deposits.push(exports.SubaccountDeposit.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
            deposits: Array.isArray(object === null || object === void 0 ? void 0 : object.deposits) ? object.deposits.map((e) => exports.SubaccountDeposit.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
        if (message.deposits) {
            obj.deposits = message.deposits.map((e) => e ? exports.SubaccountDeposit.toJSON(e) : undefined);
        }
        else {
            obj.deposits = [];
        }
        return obj;
    },
    create(base) {
        return exports.SubaccountDeposits.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSubaccountDeposits();
        message.subaccountId = (_a = object.subaccountId) !== null && _a !== void 0 ? _a : "";
        message.deposits = ((_b = object.deposits) === null || _b === void 0 ? void 0 : _b.map((e) => exports.SubaccountDeposit.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSubaccountDeposit() {
    return { denom: "", deposit: undefined };
}
exports.SubaccountDeposit = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.deposit !== undefined) {
            exchange_1.Deposit.encode(message.deposit, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubaccountDeposit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.deposit = exchange_1.Deposit.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? String(object.denom) : "",
            deposit: isSet(object.deposit) ? exchange_1.Deposit.fromJSON(object.deposit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.deposit !== undefined && (obj.deposit = message.deposit ? exchange_1.Deposit.toJSON(message.deposit) : undefined);
        return obj;
    },
    create(base) {
        return exports.SubaccountDeposit.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSubaccountDeposit();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.deposit = (object.deposit !== undefined && object.deposit !== null)
            ? exchange_1.Deposit.fromPartial(object.deposit)
            : undefined;
        return message;
    },
};
function createBaseSpotOrderUpdate() {
    return { status: 0, orderHash: new Uint8Array(), cid: "", order: undefined };
}
exports.SpotOrderUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        if (message.orderHash.length !== 0) {
            writer.uint32(18).bytes(message.orderHash);
        }
        if (message.cid !== "") {
            writer.uint32(26).string(message.cid);
        }
        if (message.order !== undefined) {
            exports.SpotOrder.encode(message.order, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpotOrderUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.int32();
                    break;
                case 2:
                    message.orderHash = reader.bytes();
                    break;
                case 3:
                    message.cid = reader.string();
                    break;
                case 4:
                    message.order = exports.SpotOrder.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? orderUpdateStatusFromJSON(object.status) : 0,
            orderHash: isSet(object.orderHash) ? bytesFromBase64(object.orderHash) : new Uint8Array(),
            cid: isSet(object.cid) ? String(object.cid) : "",
            order: isSet(object.order) ? exports.SpotOrder.fromJSON(object.order) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.status !== undefined && (obj.status = orderUpdateStatusToJSON(message.status));
        message.orderHash !== undefined &&
            (obj.orderHash = base64FromBytes(message.orderHash !== undefined ? message.orderHash : new Uint8Array()));
        message.cid !== undefined && (obj.cid = message.cid);
        message.order !== undefined && (obj.order = message.order ? exports.SpotOrder.toJSON(message.order) : undefined);
        return obj;
    },
    create(base) {
        return exports.SpotOrderUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSpotOrderUpdate();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;
        message.orderHash = (_b = object.orderHash) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.cid = (_c = object.cid) !== null && _c !== void 0 ? _c : "";
        message.order = (object.order !== undefined && object.order !== null)
            ? exports.SpotOrder.fromPartial(object.order)
            : undefined;
        return message;
    },
};
function createBaseSpotOrder() {
    return { marketId: "", order: undefined };
}
exports.SpotOrder = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.marketId !== "") {
            writer.uint32(10).string(message.marketId);
        }
        if (message.order !== undefined) {
            exchange_1.SpotLimitOrder.encode(message.order, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpotOrder();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.marketId = reader.string();
                    break;
                case 2:
                    message.order = exchange_1.SpotLimitOrder.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            marketId: isSet(object.marketId) ? String(object.marketId) : "",
            order: isSet(object.order) ? exchange_1.SpotLimitOrder.fromJSON(object.order) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.marketId !== undefined && (obj.marketId = message.marketId);
        message.order !== undefined && (obj.order = message.order ? exchange_1.SpotLimitOrder.toJSON(message.order) : undefined);
        return obj;
    },
    create(base) {
        return exports.SpotOrder.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSpotOrder();
        message.marketId = (_a = object.marketId) !== null && _a !== void 0 ? _a : "";
        message.order = (object.order !== undefined && object.order !== null)
            ? exchange_1.SpotLimitOrder.fromPartial(object.order)
            : undefined;
        return message;
    },
};
function createBaseDerivativeOrderUpdate() {
    return { status: 0, orderHash: new Uint8Array(), cid: "", order: undefined };
}
exports.DerivativeOrderUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        if (message.orderHash.length !== 0) {
            writer.uint32(18).bytes(message.orderHash);
        }
        if (message.cid !== "") {
            writer.uint32(26).string(message.cid);
        }
        if (message.order !== undefined) {
            exports.DerivativeOrder.encode(message.order, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDerivativeOrderUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.int32();
                    break;
                case 2:
                    message.orderHash = reader.bytes();
                    break;
                case 3:
                    message.cid = reader.string();
                    break;
                case 4:
                    message.order = exports.DerivativeOrder.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? orderUpdateStatusFromJSON(object.status) : 0,
            orderHash: isSet(object.orderHash) ? bytesFromBase64(object.orderHash) : new Uint8Array(),
            cid: isSet(object.cid) ? String(object.cid) : "",
            order: isSet(object.order) ? exports.DerivativeOrder.fromJSON(object.order) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.status !== undefined && (obj.status = orderUpdateStatusToJSON(message.status));
        message.orderHash !== undefined &&
            (obj.orderHash = base64FromBytes(message.orderHash !== undefined ? message.orderHash : new Uint8Array()));
        message.cid !== undefined && (obj.cid = message.cid);
        message.order !== undefined && (obj.order = message.order ? exports.DerivativeOrder.toJSON(message.order) : undefined);
        return obj;
    },
    create(base) {
        return exports.DerivativeOrderUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseDerivativeOrderUpdate();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;
        message.orderHash = (_b = object.orderHash) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.cid = (_c = object.cid) !== null && _c !== void 0 ? _c : "";
        message.order = (object.order !== undefined && object.order !== null)
            ? exports.DerivativeOrder.fromPartial(object.order)
            : undefined;
        return message;
    },
};
function createBaseDerivativeOrder() {
    return { marketId: "", order: undefined, isMarket: false };
}
exports.DerivativeOrder = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.marketId !== "") {
            writer.uint32(10).string(message.marketId);
        }
        if (message.order !== undefined) {
            exchange_1.DerivativeLimitOrder.encode(message.order, writer.uint32(18).fork()).ldelim();
        }
        if (message.isMarket === true) {
            writer.uint32(24).bool(message.isMarket);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDerivativeOrder();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.marketId = reader.string();
                    break;
                case 2:
                    message.order = exchange_1.DerivativeLimitOrder.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.isMarket = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            marketId: isSet(object.marketId) ? String(object.marketId) : "",
            order: isSet(object.order) ? exchange_1.DerivativeLimitOrder.fromJSON(object.order) : undefined,
            isMarket: isSet(object.isMarket) ? Boolean(object.isMarket) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.marketId !== undefined && (obj.marketId = message.marketId);
        message.order !== undefined && (obj.order = message.order ? exchange_1.DerivativeLimitOrder.toJSON(message.order) : undefined);
        message.isMarket !== undefined && (obj.isMarket = message.isMarket);
        return obj;
    },
    create(base) {
        return exports.DerivativeOrder.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDerivativeOrder();
        message.marketId = (_a = object.marketId) !== null && _a !== void 0 ? _a : "";
        message.order = (object.order !== undefined && object.order !== null)
            ? exchange_1.DerivativeLimitOrder.fromPartial(object.order)
            : undefined;
        message.isMarket = (_b = object.isMarket) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBasePosition() {
    return {
        marketId: "",
        subaccountId: "",
        isLong: false,
        quantity: "",
        entryPrice: "",
        margin: "",
        cumulativeFundingEntry: "",
    };
}
exports.Position = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.marketId !== "") {
            writer.uint32(10).string(message.marketId);
        }
        if (message.subaccountId !== "") {
            writer.uint32(18).string(message.subaccountId);
        }
        if (message.isLong === true) {
            writer.uint32(24).bool(message.isLong);
        }
        if (message.quantity !== "") {
            writer.uint32(34).string(message.quantity);
        }
        if (message.entryPrice !== "") {
            writer.uint32(42).string(message.entryPrice);
        }
        if (message.margin !== "") {
            writer.uint32(50).string(message.margin);
        }
        if (message.cumulativeFundingEntry !== "") {
            writer.uint32(58).string(message.cumulativeFundingEntry);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.marketId = reader.string();
                    break;
                case 2:
                    message.subaccountId = reader.string();
                    break;
                case 3:
                    message.isLong = reader.bool();
                    break;
                case 4:
                    message.quantity = reader.string();
                    break;
                case 5:
                    message.entryPrice = reader.string();
                    break;
                case 6:
                    message.margin = reader.string();
                    break;
                case 7:
                    message.cumulativeFundingEntry = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            marketId: isSet(object.marketId) ? String(object.marketId) : "",
            subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
            isLong: isSet(object.isLong) ? Boolean(object.isLong) : false,
            quantity: isSet(object.quantity) ? String(object.quantity) : "",
            entryPrice: isSet(object.entryPrice) ? String(object.entryPrice) : "",
            margin: isSet(object.margin) ? String(object.margin) : "",
            cumulativeFundingEntry: isSet(object.cumulativeFundingEntry) ? String(object.cumulativeFundingEntry) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.marketId !== undefined && (obj.marketId = message.marketId);
        message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
        message.isLong !== undefined && (obj.isLong = message.isLong);
        message.quantity !== undefined && (obj.quantity = message.quantity);
        message.entryPrice !== undefined && (obj.entryPrice = message.entryPrice);
        message.margin !== undefined && (obj.margin = message.margin);
        message.cumulativeFundingEntry !== undefined && (obj.cumulativeFundingEntry = message.cumulativeFundingEntry);
        return obj;
    },
    create(base) {
        return exports.Position.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBasePosition();
        message.marketId = (_a = object.marketId) !== null && _a !== void 0 ? _a : "";
        message.subaccountId = (_b = object.subaccountId) !== null && _b !== void 0 ? _b : "";
        message.isLong = (_c = object.isLong) !== null && _c !== void 0 ? _c : false;
        message.quantity = (_d = object.quantity) !== null && _d !== void 0 ? _d : "";
        message.entryPrice = (_e = object.entryPrice) !== null && _e !== void 0 ? _e : "";
        message.margin = (_f = object.margin) !== null && _f !== void 0 ? _f : "";
        message.cumulativeFundingEntry = (_g = object.cumulativeFundingEntry) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseOraclePrice() {
    return { symbol: "", price: "", type: "" };
}
exports.OraclePrice = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.symbol !== "") {
            writer.uint32(10).string(message.symbol);
        }
        if (message.price !== "") {
            writer.uint32(18).string(message.price);
        }
        if (message.type !== "") {
            writer.uint32(26).string(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOraclePrice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.symbol = reader.string();
                    break;
                case 2:
                    message.price = reader.string();
                    break;
                case 3:
                    message.type = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            symbol: isSet(object.symbol) ? String(object.symbol) : "",
            price: isSet(object.price) ? String(object.price) : "",
            type: isSet(object.type) ? String(object.type) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.symbol !== undefined && (obj.symbol = message.symbol);
        message.price !== undefined && (obj.price = message.price);
        message.type !== undefined && (obj.type = message.type);
        return obj;
    },
    create(base) {
        return exports.OraclePrice.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseOraclePrice();
        message.symbol = (_a = object.symbol) !== null && _a !== void 0 ? _a : "";
        message.price = (_b = object.price) !== null && _b !== void 0 ? _b : "";
        message.type = (_c = object.type) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseSpotTrade() {
    return {
        marketId: "",
        isBuy: false,
        executionType: "",
        quantity: "",
        price: "",
        subaccountId: "",
        fee: "",
        orderHash: new Uint8Array(),
        feeRecipientAddress: "",
        cid: "",
        tradeId: "",
    };
}
exports.SpotTrade = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.marketId !== "") {
            writer.uint32(10).string(message.marketId);
        }
        if (message.isBuy === true) {
            writer.uint32(16).bool(message.isBuy);
        }
        if (message.executionType !== "") {
            writer.uint32(26).string(message.executionType);
        }
        if (message.quantity !== "") {
            writer.uint32(34).string(message.quantity);
        }
        if (message.price !== "") {
            writer.uint32(42).string(message.price);
        }
        if (message.subaccountId !== "") {
            writer.uint32(50).string(message.subaccountId);
        }
        if (message.fee !== "") {
            writer.uint32(58).string(message.fee);
        }
        if (message.orderHash.length !== 0) {
            writer.uint32(66).bytes(message.orderHash);
        }
        if (message.feeRecipientAddress !== "") {
            writer.uint32(74).string(message.feeRecipientAddress);
        }
        if (message.cid !== "") {
            writer.uint32(82).string(message.cid);
        }
        if (message.tradeId !== "") {
            writer.uint32(90).string(message.tradeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpotTrade();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.marketId = reader.string();
                    break;
                case 2:
                    message.isBuy = reader.bool();
                    break;
                case 3:
                    message.executionType = reader.string();
                    break;
                case 4:
                    message.quantity = reader.string();
                    break;
                case 5:
                    message.price = reader.string();
                    break;
                case 6:
                    message.subaccountId = reader.string();
                    break;
                case 7:
                    message.fee = reader.string();
                    break;
                case 8:
                    message.orderHash = reader.bytes();
                    break;
                case 9:
                    message.feeRecipientAddress = reader.string();
                    break;
                case 10:
                    message.cid = reader.string();
                    break;
                case 11:
                    message.tradeId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            marketId: isSet(object.marketId) ? String(object.marketId) : "",
            isBuy: isSet(object.isBuy) ? Boolean(object.isBuy) : false,
            executionType: isSet(object.executionType) ? String(object.executionType) : "",
            quantity: isSet(object.quantity) ? String(object.quantity) : "",
            price: isSet(object.price) ? String(object.price) : "",
            subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
            fee: isSet(object.fee) ? String(object.fee) : "",
            orderHash: isSet(object.orderHash) ? bytesFromBase64(object.orderHash) : new Uint8Array(),
            feeRecipientAddress: isSet(object.feeRecipientAddress) ? String(object.feeRecipientAddress) : "",
            cid: isSet(object.cid) ? String(object.cid) : "",
            tradeId: isSet(object.tradeId) ? String(object.tradeId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.marketId !== undefined && (obj.marketId = message.marketId);
        message.isBuy !== undefined && (obj.isBuy = message.isBuy);
        message.executionType !== undefined && (obj.executionType = message.executionType);
        message.quantity !== undefined && (obj.quantity = message.quantity);
        message.price !== undefined && (obj.price = message.price);
        message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
        message.fee !== undefined && (obj.fee = message.fee);
        message.orderHash !== undefined &&
            (obj.orderHash = base64FromBytes(message.orderHash !== undefined ? message.orderHash : new Uint8Array()));
        message.feeRecipientAddress !== undefined && (obj.feeRecipientAddress = message.feeRecipientAddress);
        message.cid !== undefined && (obj.cid = message.cid);
        message.tradeId !== undefined && (obj.tradeId = message.tradeId);
        return obj;
    },
    create(base) {
        return exports.SpotTrade.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseSpotTrade();
        message.marketId = (_a = object.marketId) !== null && _a !== void 0 ? _a : "";
        message.isBuy = (_b = object.isBuy) !== null && _b !== void 0 ? _b : false;
        message.executionType = (_c = object.executionType) !== null && _c !== void 0 ? _c : "";
        message.quantity = (_d = object.quantity) !== null && _d !== void 0 ? _d : "";
        message.price = (_e = object.price) !== null && _e !== void 0 ? _e : "";
        message.subaccountId = (_f = object.subaccountId) !== null && _f !== void 0 ? _f : "";
        message.fee = (_g = object.fee) !== null && _g !== void 0 ? _g : "";
        message.orderHash = (_h = object.orderHash) !== null && _h !== void 0 ? _h : new Uint8Array();
        message.feeRecipientAddress = (_j = object.feeRecipientAddress) !== null && _j !== void 0 ? _j : "";
        message.cid = (_k = object.cid) !== null && _k !== void 0 ? _k : "";
        message.tradeId = (_l = object.tradeId) !== null && _l !== void 0 ? _l : "";
        return message;
    },
};
function createBaseDerivativeTrade() {
    return {
        marketId: "",
        isBuy: false,
        executionType: "",
        subaccountId: "",
        positionDelta: undefined,
        payout: "",
        fee: "",
        orderHash: "",
        feeRecipientAddress: "",
        cid: "",
        tradeId: "",
    };
}
exports.DerivativeTrade = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.marketId !== "") {
            writer.uint32(10).string(message.marketId);
        }
        if (message.isBuy === true) {
            writer.uint32(16).bool(message.isBuy);
        }
        if (message.executionType !== "") {
            writer.uint32(26).string(message.executionType);
        }
        if (message.subaccountId !== "") {
            writer.uint32(34).string(message.subaccountId);
        }
        if (message.positionDelta !== undefined) {
            exchange_1.PositionDelta.encode(message.positionDelta, writer.uint32(42).fork()).ldelim();
        }
        if (message.payout !== "") {
            writer.uint32(50).string(message.payout);
        }
        if (message.fee !== "") {
            writer.uint32(58).string(message.fee);
        }
        if (message.orderHash !== "") {
            writer.uint32(66).string(message.orderHash);
        }
        if (message.feeRecipientAddress !== "") {
            writer.uint32(74).string(message.feeRecipientAddress);
        }
        if (message.cid !== "") {
            writer.uint32(82).string(message.cid);
        }
        if (message.tradeId !== "") {
            writer.uint32(90).string(message.tradeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDerivativeTrade();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.marketId = reader.string();
                    break;
                case 2:
                    message.isBuy = reader.bool();
                    break;
                case 3:
                    message.executionType = reader.string();
                    break;
                case 4:
                    message.subaccountId = reader.string();
                    break;
                case 5:
                    message.positionDelta = exchange_1.PositionDelta.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.payout = reader.string();
                    break;
                case 7:
                    message.fee = reader.string();
                    break;
                case 8:
                    message.orderHash = reader.string();
                    break;
                case 9:
                    message.feeRecipientAddress = reader.string();
                    break;
                case 10:
                    message.cid = reader.string();
                    break;
                case 11:
                    message.tradeId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            marketId: isSet(object.marketId) ? String(object.marketId) : "",
            isBuy: isSet(object.isBuy) ? Boolean(object.isBuy) : false,
            executionType: isSet(object.executionType) ? String(object.executionType) : "",
            subaccountId: isSet(object.subaccountId) ? String(object.subaccountId) : "",
            positionDelta: isSet(object.positionDelta) ? exchange_1.PositionDelta.fromJSON(object.positionDelta) : undefined,
            payout: isSet(object.payout) ? String(object.payout) : "",
            fee: isSet(object.fee) ? String(object.fee) : "",
            orderHash: isSet(object.orderHash) ? String(object.orderHash) : "",
            feeRecipientAddress: isSet(object.feeRecipientAddress) ? String(object.feeRecipientAddress) : "",
            cid: isSet(object.cid) ? String(object.cid) : "",
            tradeId: isSet(object.tradeId) ? String(object.tradeId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.marketId !== undefined && (obj.marketId = message.marketId);
        message.isBuy !== undefined && (obj.isBuy = message.isBuy);
        message.executionType !== undefined && (obj.executionType = message.executionType);
        message.subaccountId !== undefined && (obj.subaccountId = message.subaccountId);
        message.positionDelta !== undefined &&
            (obj.positionDelta = message.positionDelta ? exchange_1.PositionDelta.toJSON(message.positionDelta) : undefined);
        message.payout !== undefined && (obj.payout = message.payout);
        message.fee !== undefined && (obj.fee = message.fee);
        message.orderHash !== undefined && (obj.orderHash = message.orderHash);
        message.feeRecipientAddress !== undefined && (obj.feeRecipientAddress = message.feeRecipientAddress);
        message.cid !== undefined && (obj.cid = message.cid);
        message.tradeId !== undefined && (obj.tradeId = message.tradeId);
        return obj;
    },
    create(base) {
        return exports.DerivativeTrade.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseDerivativeTrade();
        message.marketId = (_a = object.marketId) !== null && _a !== void 0 ? _a : "";
        message.isBuy = (_b = object.isBuy) !== null && _b !== void 0 ? _b : false;
        message.executionType = (_c = object.executionType) !== null && _c !== void 0 ? _c : "";
        message.subaccountId = (_d = object.subaccountId) !== null && _d !== void 0 ? _d : "";
        message.positionDelta = (object.positionDelta !== undefined && object.positionDelta !== null)
            ? exchange_1.PositionDelta.fromPartial(object.positionDelta)
            : undefined;
        message.payout = (_e = object.payout) !== null && _e !== void 0 ? _e : "";
        message.fee = (_f = object.fee) !== null && _f !== void 0 ? _f : "";
        message.orderHash = (_g = object.orderHash) !== null && _g !== void 0 ? _g : "";
        message.feeRecipientAddress = (_h = object.feeRecipientAddress) !== null && _h !== void 0 ? _h : "";
        message.cid = (_j = object.cid) !== null && _j !== void 0 ? _j : "";
        message.tradeId = (_k = object.tradeId) !== null && _k !== void 0 ? _k : "";
        return message;
    },
};
function createBaseTradesFilter() {
    return { subaccountIds: [], marketIds: [] };
}
exports.TradesFilter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.subaccountIds) {
            writer.uint32(10).string(v);
        }
        for (const v of message.marketIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTradesFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subaccountIds.push(reader.string());
                    break;
                case 2:
                    message.marketIds.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subaccountIds: Array.isArray(object === null || object === void 0 ? void 0 : object.subaccountIds) ? object.subaccountIds.map((e) => String(e)) : [],
            marketIds: Array.isArray(object === null || object === void 0 ? void 0 : object.marketIds) ? object.marketIds.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subaccountIds) {
            obj.subaccountIds = message.subaccountIds.map((e) => e);
        }
        else {
            obj.subaccountIds = [];
        }
        if (message.marketIds) {
            obj.marketIds = message.marketIds.map((e) => e);
        }
        else {
            obj.marketIds = [];
        }
        return obj;
    },
    create(base) {
        return exports.TradesFilter.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTradesFilter();
        message.subaccountIds = ((_a = object.subaccountIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.marketIds = ((_b = object.marketIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBasePositionsFilter() {
    return { subaccountIds: [], marketIds: [] };
}
exports.PositionsFilter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.subaccountIds) {
            writer.uint32(10).string(v);
        }
        for (const v of message.marketIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePositionsFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subaccountIds.push(reader.string());
                    break;
                case 2:
                    message.marketIds.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subaccountIds: Array.isArray(object === null || object === void 0 ? void 0 : object.subaccountIds) ? object.subaccountIds.map((e) => String(e)) : [],
            marketIds: Array.isArray(object === null || object === void 0 ? void 0 : object.marketIds) ? object.marketIds.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subaccountIds) {
            obj.subaccountIds = message.subaccountIds.map((e) => e);
        }
        else {
            obj.subaccountIds = [];
        }
        if (message.marketIds) {
            obj.marketIds = message.marketIds.map((e) => e);
        }
        else {
            obj.marketIds = [];
        }
        return obj;
    },
    create(base) {
        return exports.PositionsFilter.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePositionsFilter();
        message.subaccountIds = ((_a = object.subaccountIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.marketIds = ((_b = object.marketIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseOrdersFilter() {
    return { subaccountIds: [], marketIds: [] };
}
exports.OrdersFilter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.subaccountIds) {
            writer.uint32(10).string(v);
        }
        for (const v of message.marketIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrdersFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subaccountIds.push(reader.string());
                    break;
                case 2:
                    message.marketIds.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subaccountIds: Array.isArray(object === null || object === void 0 ? void 0 : object.subaccountIds) ? object.subaccountIds.map((e) => String(e)) : [],
            marketIds: Array.isArray(object === null || object === void 0 ? void 0 : object.marketIds) ? object.marketIds.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subaccountIds) {
            obj.subaccountIds = message.subaccountIds.map((e) => e);
        }
        else {
            obj.subaccountIds = [];
        }
        if (message.marketIds) {
            obj.marketIds = message.marketIds.map((e) => e);
        }
        else {
            obj.marketIds = [];
        }
        return obj;
    },
    create(base) {
        return exports.OrdersFilter.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseOrdersFilter();
        message.subaccountIds = ((_a = object.subaccountIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.marketIds = ((_b = object.marketIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseOrderbookFilter() {
    return { marketIds: [] };
}
exports.OrderbookFilter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.marketIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderbookFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.marketIds.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { marketIds: Array.isArray(object === null || object === void 0 ? void 0 : object.marketIds) ? object.marketIds.map((e) => String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.marketIds) {
            obj.marketIds = message.marketIds.map((e) => e);
        }
        else {
            obj.marketIds = [];
        }
        return obj;
    },
    create(base) {
        return exports.OrderbookFilter.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseOrderbookFilter();
        message.marketIds = ((_a = object.marketIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseBankBalancesFilter() {
    return { accounts: [] };
}
exports.BankBalancesFilter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.accounts) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBankBalancesFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.accounts.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { accounts: Array.isArray(object === null || object === void 0 ? void 0 : object.accounts) ? object.accounts.map((e) => String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.accounts) {
            obj.accounts = message.accounts.map((e) => e);
        }
        else {
            obj.accounts = [];
        }
        return obj;
    },
    create(base) {
        return exports.BankBalancesFilter.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBankBalancesFilter();
        message.accounts = ((_a = object.accounts) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseSubaccountDepositsFilter() {
    return { subaccountIds: [] };
}
exports.SubaccountDepositsFilter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.subaccountIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubaccountDepositsFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subaccountIds.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            subaccountIds: Array.isArray(object === null || object === void 0 ? void 0 : object.subaccountIds) ? object.subaccountIds.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subaccountIds) {
            obj.subaccountIds = message.subaccountIds.map((e) => e);
        }
        else {
            obj.subaccountIds = [];
        }
        return obj;
    },
    create(base) {
        return exports.SubaccountDepositsFilter.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSubaccountDepositsFilter();
        message.subaccountIds = ((_a = object.subaccountIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseOraclePriceFilter() {
    return { symbol: [] };
}
exports.OraclePriceFilter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.symbol) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOraclePriceFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.symbol.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { symbol: Array.isArray(object === null || object === void 0 ? void 0 : object.symbol) ? object.symbol.map((e) => String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.symbol) {
            obj.symbol = message.symbol.map((e) => e);
        }
        else {
            obj.symbol = [];
        }
        return obj;
    },
    create(base) {
        return exports.OraclePriceFilter.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseOraclePriceFilter();
        message.symbol = ((_a = object.symbol) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
class StreamClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Stream = this.Stream.bind(this);
    }
    Stream(request, metadata) {
        return this.rpc.invoke(exports.StreamStreamDesc, exports.StreamRequest.fromPartial(request), metadata);
    }
}
exports.StreamClientImpl = StreamClientImpl;
exports.StreamDesc = { serviceName: "injective.stream.v1beta1.Stream" };
exports.StreamStreamDesc = {
    methodName: "Stream",
    service: exports.StreamDesc,
    requestStream: false,
    responseStream: true,
    requestType: {
        serializeBinary() {
            return exports.StreamRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.StreamResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
    invoke(methodDesc, _request, metadata) {
        var _a;
        const upStreamCodes = this.options.upStreamRetryCodes || [];
        const DEFAULT_TIMEOUT_TIME = 3000;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new rxjs_1.Observable((observer) => {
            const upStream = (() => {
                const client = grpc_web_1.grpc.invoke(methodDesc, {
                    host: this.host,
                    request,
                    transport: this.options.streamingTransport || this.options.transport,
                    metadata: maybeCombinedMetadata,
                    debug: this.options.debug,
                    onMessage: (next) => observer.next(next),
                    onEnd: (code, message, trailers) => {
                        if (code === 0) {
                            observer.complete();
                        }
                        else if (upStreamCodes.includes(code)) {
                            setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
                        }
                        else {
                            const err = new Error(message);
                            err.code = code;
                            err.metadata = trailers;
                            observer.error(err);
                        }
                    },
                });
                observer.add(() => {
                    if (!observer.closed) {
                        return client.close();
                    }
                });
            });
            upStream();
        }).pipe((0, operators_1.share)());
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
function longToString(long) {
    return long.toString();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends tsProtoGlobalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;

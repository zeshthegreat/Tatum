"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.BroadcastAPIBroadcastTxDesc = exports.BroadcastAPIPingDesc = exports.BroadcastAPIDesc = exports.BroadcastAPIClientImpl = exports.ResponseBroadcastTx = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@injectivelabs/grpc-web");
const browser_headers_1 = require("browser-headers");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("../../../abci/v1beta3/types");
const types_2 = require("../v1beta1/types");
exports.protobufPackage = "cometbft.rpc.grpc.v1beta3";
function createBaseResponseBroadcastTx() {
    return { checkTx: undefined, txResult: undefined };
}
exports.ResponseBroadcastTx = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.checkTx !== undefined) {
            types_1.ResponseCheckTx.encode(message.checkTx, writer.uint32(10).fork()).ldelim();
        }
        if (message.txResult !== undefined) {
            types_1.ExecTxResult.encode(message.txResult, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponseBroadcastTx();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.checkTx = types_1.ResponseCheckTx.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.txResult = types_1.ExecTxResult.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            checkTx: isSet(object.checkTx) ? types_1.ResponseCheckTx.fromJSON(object.checkTx) : undefined,
            txResult: isSet(object.txResult) ? types_1.ExecTxResult.fromJSON(object.txResult) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.checkTx !== undefined &&
            (obj.checkTx = message.checkTx ? types_1.ResponseCheckTx.toJSON(message.checkTx) : undefined);
        message.txResult !== undefined &&
            (obj.txResult = message.txResult ? types_1.ExecTxResult.toJSON(message.txResult) : undefined);
        return obj;
    },
    create(base) {
        return exports.ResponseBroadcastTx.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResponseBroadcastTx();
        message.checkTx = (object.checkTx !== undefined && object.checkTx !== null)
            ? types_1.ResponseCheckTx.fromPartial(object.checkTx)
            : undefined;
        message.txResult = (object.txResult !== undefined && object.txResult !== null)
            ? types_1.ExecTxResult.fromPartial(object.txResult)
            : undefined;
        return message;
    },
};
class BroadcastAPIClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Ping = this.Ping.bind(this);
        this.BroadcastTx = this.BroadcastTx.bind(this);
    }
    Ping(request, metadata) {
        return this.rpc.unary(exports.BroadcastAPIPingDesc, types_2.RequestPing.fromPartial(request), metadata);
    }
    BroadcastTx(request, metadata) {
        return this.rpc.unary(exports.BroadcastAPIBroadcastTxDesc, types_2.RequestBroadcastTx.fromPartial(request), metadata);
    }
}
exports.BroadcastAPIClientImpl = BroadcastAPIClientImpl;
exports.BroadcastAPIDesc = { serviceName: "cometbft.rpc.grpc.v1beta3.BroadcastAPI" };
exports.BroadcastAPIPingDesc = {
    methodName: "Ping",
    service: exports.BroadcastAPIDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_2.RequestPing.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_2.ResponsePing.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.BroadcastAPIBroadcastTxDesc = {
    methodName: "BroadcastTx",
    service: exports.BroadcastAPIDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_2.RequestBroadcastTx.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.ResponseBroadcastTx.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends tsProtoGlobalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;

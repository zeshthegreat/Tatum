"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.ABCIServiceFinalizeBlockDesc = exports.ABCIServiceVerifyVoteExtensionDesc = exports.ABCIServiceExtendVoteDesc = exports.ABCIServiceProcessProposalDesc = exports.ABCIServicePrepareProposalDesc = exports.ABCIServiceApplySnapshotChunkDesc = exports.ABCIServiceLoadSnapshotChunkDesc = exports.ABCIServiceOfferSnapshotDesc = exports.ABCIServiceListSnapshotsDesc = exports.ABCIServiceInitChainDesc = exports.ABCIServiceCommitDesc = exports.ABCIServiceQueryDesc = exports.ABCIServiceCheckTxDesc = exports.ABCIServiceInfoDesc = exports.ABCIServiceFlushDesc = exports.ABCIServiceEchoDesc = exports.ABCIServiceDesc = exports.ABCIServiceClientImpl = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@injectivelabs/grpc-web");
const browser_headers_1 = require("browser-headers");
const types_1 = require("./types");
exports.protobufPackage = "cometbft.abci.v1";
class ABCIServiceClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Echo = this.Echo.bind(this);
        this.Flush = this.Flush.bind(this);
        this.Info = this.Info.bind(this);
        this.CheckTx = this.CheckTx.bind(this);
        this.Query = this.Query.bind(this);
        this.Commit = this.Commit.bind(this);
        this.InitChain = this.InitChain.bind(this);
        this.ListSnapshots = this.ListSnapshots.bind(this);
        this.OfferSnapshot = this.OfferSnapshot.bind(this);
        this.LoadSnapshotChunk = this.LoadSnapshotChunk.bind(this);
        this.ApplySnapshotChunk = this.ApplySnapshotChunk.bind(this);
        this.PrepareProposal = this.PrepareProposal.bind(this);
        this.ProcessProposal = this.ProcessProposal.bind(this);
        this.ExtendVote = this.ExtendVote.bind(this);
        this.VerifyVoteExtension = this.VerifyVoteExtension.bind(this);
        this.FinalizeBlock = this.FinalizeBlock.bind(this);
    }
    Echo(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceEchoDesc, types_1.EchoRequest.fromPartial(request), metadata);
    }
    Flush(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceFlushDesc, types_1.FlushRequest.fromPartial(request), metadata);
    }
    Info(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceInfoDesc, types_1.InfoRequest.fromPartial(request), metadata);
    }
    CheckTx(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceCheckTxDesc, types_1.CheckTxRequest.fromPartial(request), metadata);
    }
    Query(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceQueryDesc, types_1.QueryRequest.fromPartial(request), metadata);
    }
    Commit(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceCommitDesc, types_1.CommitRequest.fromPartial(request), metadata);
    }
    InitChain(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceInitChainDesc, types_1.InitChainRequest.fromPartial(request), metadata);
    }
    ListSnapshots(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceListSnapshotsDesc, types_1.ListSnapshotsRequest.fromPartial(request), metadata);
    }
    OfferSnapshot(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceOfferSnapshotDesc, types_1.OfferSnapshotRequest.fromPartial(request), metadata);
    }
    LoadSnapshotChunk(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceLoadSnapshotChunkDesc, types_1.LoadSnapshotChunkRequest.fromPartial(request), metadata);
    }
    ApplySnapshotChunk(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceApplySnapshotChunkDesc, types_1.ApplySnapshotChunkRequest.fromPartial(request), metadata);
    }
    PrepareProposal(request, metadata) {
        return this.rpc.unary(exports.ABCIServicePrepareProposalDesc, types_1.PrepareProposalRequest.fromPartial(request), metadata);
    }
    ProcessProposal(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceProcessProposalDesc, types_1.ProcessProposalRequest.fromPartial(request), metadata);
    }
    ExtendVote(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceExtendVoteDesc, types_1.ExtendVoteRequest.fromPartial(request), metadata);
    }
    VerifyVoteExtension(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceVerifyVoteExtensionDesc, types_1.VerifyVoteExtensionRequest.fromPartial(request), metadata);
    }
    FinalizeBlock(request, metadata) {
        return this.rpc.unary(exports.ABCIServiceFinalizeBlockDesc, types_1.FinalizeBlockRequest.fromPartial(request), metadata);
    }
}
exports.ABCIServiceClientImpl = ABCIServiceClientImpl;
exports.ABCIServiceDesc = { serviceName: "cometbft.abci.v1.ABCIService" };
exports.ABCIServiceEchoDesc = {
    methodName: "Echo",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.EchoRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.EchoResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceFlushDesc = {
    methodName: "Flush",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.FlushRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.FlushResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceInfoDesc = {
    methodName: "Info",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.InfoRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.InfoResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceCheckTxDesc = {
    methodName: "CheckTx",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.CheckTxRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.CheckTxResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceQueryDesc = {
    methodName: "Query",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.QueryRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.QueryResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceCommitDesc = {
    methodName: "Commit",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.CommitRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.CommitResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceInitChainDesc = {
    methodName: "InitChain",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.InitChainRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.InitChainResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceListSnapshotsDesc = {
    methodName: "ListSnapshots",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.ListSnapshotsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.ListSnapshotsResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceOfferSnapshotDesc = {
    methodName: "OfferSnapshot",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.OfferSnapshotRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.OfferSnapshotResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceLoadSnapshotChunkDesc = {
    methodName: "LoadSnapshotChunk",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.LoadSnapshotChunkRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.LoadSnapshotChunkResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceApplySnapshotChunkDesc = {
    methodName: "ApplySnapshotChunk",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.ApplySnapshotChunkRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.ApplySnapshotChunkResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServicePrepareProposalDesc = {
    methodName: "PrepareProposal",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.PrepareProposalRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.PrepareProposalResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceProcessProposalDesc = {
    methodName: "ProcessProposal",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.ProcessProposalRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.ProcessProposalResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceExtendVoteDesc = {
    methodName: "ExtendVote",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.ExtendVoteRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.ExtendVoteResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceVerifyVoteExtensionDesc = {
    methodName: "VerifyVoteExtension",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.VerifyVoteExtensionRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.VerifyVoteExtensionResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.ABCIServiceFinalizeBlockDesc = {
    methodName: "FinalizeBlock",
    service: exports.ABCIServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return types_1.FinalizeBlockRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = types_1.FinalizeBlockResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
class GrpcWebError extends tsProtoGlobalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;

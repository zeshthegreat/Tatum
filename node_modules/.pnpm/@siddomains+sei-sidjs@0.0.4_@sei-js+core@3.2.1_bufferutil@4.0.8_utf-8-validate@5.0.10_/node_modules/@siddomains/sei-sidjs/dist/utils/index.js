"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "decodeLabelhash", {
  enumerable: true,
  get: function get() {
    return _labelhash.decodeLabelhash;
  }
});
exports.domainNode = domainNode;
exports.domainTokenId = void 0;
Object.defineProperty(exports, "isEncodedLabelhash", {
  enumerable: true,
  get: function get() {
    return _labelhash.isEncodedLabelhash;
  }
});
Object.defineProperty(exports, "labelhash", {
  enumerable: true,
  get: function get() {
    return _labelhash.labelhash;
  }
});
Object.defineProperty(exports, "namehash", {
  enumerable: true,
  get: function get() {
    return _namehash.namehash;
  }
});
exports.validateName = validateName;
var _ensValidation = require("@ensdomains/ens-validation");
var _encoding = require("@cosmjs/encoding");
var _lodash = _interopRequireDefault(require("lodash.toarray"));
var _labelhash = require("./labelhash");
var _ethEnsNamehash = _interopRequireDefault(require("@ensdomains/eth-ens-namehash"));
var _namehash = require("./namehash");
var _whitelist = _interopRequireDefault(require("../constants/whitelist"));
function validateLabelLength(name) {
  if (!name) {
    return false;
  }
  var len = (0, _lodash["default"])(name).length;
  if (len < 3 || len > 512) {
    return false;
  }
  var normalizedValue;
  try {
    normalizedValue = _ethEnsNamehash["default"].normalize(name);
  } catch (e) {
    normalizedValue = name;
  }
  if (normalizedValue.length < 3 || normalizedValue.length > 512) {
    return false;
  }
  return true;
}
function validateDomains(value) {
  // black list
  // ASCII中的十进制: 0-44, 46-47, 58-94, 96, 123-127;
  // unicode: \u200b, \u200c, \u200d, \ufeff
  var blackList =
  // eslint-disable-next-line no-control-regex
  /[\u0000-\u002c\u002e-\u002f\u003a-\u005e\u0060\u007b-\u007f\u200b\u200c\u200d\ufeff]/g;
  if (blackList.test(value)) {
    return false;
  } else if (!(0, _ensValidation.validate)(value)) {
    return false;
  }
  return true;
}
function validateName(name) {
  if (!name) {
    throw new Error('Invalid name');
  }
  var labelArr = name.split('.');
  var domain = name;
  var suffix = '';
  if (labelArr.length > 1) {
    domain = labelArr.slice(0, labelArr.length - 1).join('.');
    suffix = labelArr[labelArr.length - 1];
  }
  var hasEmptyLabels = labelArr.filter(function (e) {
    return e.length < 1;
  }).length > 0;
  if (hasEmptyLabels) throw new Error('Domain cannot have empty labels');
  if (!validateLabelLength(domain) && !_whitelist["default"].includes(name.toLowerCase())) {
    throw new Error('Invalid name');
  }
  if (!validateDomains(domain, suffix)) throw new Error('Invalid name');
  var normalizedArray = labelArr.map(function (label) {
    return (0, _labelhash.isEncodedLabelhash)(label) ? label : _ethEnsNamehash["default"].normalize(label);
  });
  try {
    return normalizedArray.join('.');
  } catch (e) {
    throw e;
  }
}
function domainNode(domain) {
  if (!domain) {
    return [];
  }
  var hash = (0, _namehash.namehash)(domain);
  return Array.from((0, _encoding.fromHex)(hash.slice(2)));
}
var domainTokenId = function domainTokenId(domain) {
  var label = domain.split('.')[0];
  return (0, _labelhash.labelhash)(label).slice(2);
};
exports.domainTokenId = domainTokenId;
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.4;
import "./IBNBBulkRegistrar.sol";
import "../bnbregistrar/BNBRegistrarControllerV9.sol";
import "../price-oracle/ISidPriceOracle.sol";

contract BNBBulkRegistrarV1 is IBNBBulkRegistrar {
    BNBRegistrarControllerV9 public immutable registrarController;

    constructor(BNBRegistrarControllerV9 _registrarController) {
        registrarController = _registrarController;
    }

    function bulkRentPrice(string[] calldata names, uint256 duration) external view override returns (uint256 total) {
        for (uint256 i = 0; i < names.length; i++) {
            ISidPriceOracle.Price memory price = registrarController.rentPrice(names[i], duration);
            total += (price.base + price.premium);
        }
    }

    function bulkMakeCommitmentWithConfig(string[] calldata name, address owner, bytes32 secret, address resolver, address addr) external view override returns (bytes32[] memory commitments) {
        commitments = new bytes32[](name.length);
        for (uint256 i = 0; i < name.length; i++) {
            commitments[i] = registrarController.makeCommitmentWithConfig(name[i], owner, secret, resolver, addr);
        }
        return commitments;
    }

    function commitment(bytes32 commit) external view override returns(uint256) {
        return registrarController.commitments(commit);
    }

    function bulkCommit(bytes32[] calldata commitments) external override {
        for (uint256 i = 0; i < commitments.length; i++) {
            registrarController.commit(commitments[i]);
        }
    }

    function bulkRegister(string[] calldata names, address owner, uint duration, bytes32 secret, address resolver, address addr, bool isUseGiftCard, bytes32 nodehash) external payable {
        uint256 cost = 0;
        for (uint256 i = 0; i < names.length; i++) {
            ISidPriceOracle.Price memory price;
            if (isUseGiftCard) {
                price = registrarController.rentPriceWithPointRedemption(names[i], duration, msg.sender);
            } else {
                price = registrarController.rentPrice(names[i], duration);
            }
            registrarController.registerWithConfigAndPoint{value: (price.base + price.premium)}(names[i], owner, duration, secret, resolver, addr, isUseGiftCard, nodehash);
            cost = cost + price.base + price.premium;
        }

        // Send any excess funds back
        payable(msg.sender).transfer(msg.value - cost);
    }
}

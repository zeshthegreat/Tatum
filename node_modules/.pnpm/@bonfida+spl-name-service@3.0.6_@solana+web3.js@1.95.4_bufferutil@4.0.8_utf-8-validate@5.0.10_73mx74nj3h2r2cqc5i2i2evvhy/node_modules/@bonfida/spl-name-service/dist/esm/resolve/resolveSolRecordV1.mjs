import{PublicKey as r}from"@solana/web3.js";import{getRecordKeySync as e}from"../record/getRecordKeySync.mjs";import{getSolRecord as o}from"../record/helpers/getSolRecord.mjs";import{checkSolRecord as t}from"../record/checkSolRecord.mjs";import{Record as i}from"../types/record.mjs";import"../node_modules/buffer/index.mjs";import{NoRecordDataError as m,InvalidSignatureError as s}from"../error.mjs";import{__exports as c}from"../_virtual/index.mjs";const d=async(d,n,a)=>{const f=e(a,i.SOL),p=await o(d,a);if(!(null==p?void 0:p.data))throw new m("The SOL record V1 data is empty");const l=new TextEncoder,j=c.Buffer.concat([p.data.slice(0,32),f.toBuffer()]),u=l.encode(j.toString("hex"));if(!t(u,p.data.slice(32),n))throw new s("The SOL record V1 signature is invalid");return new r(p.data.slice(0,32))};export{d as resolveSolRecordV1};
//# sourceMappingURL=resolveSolRecordV1.mjs.map

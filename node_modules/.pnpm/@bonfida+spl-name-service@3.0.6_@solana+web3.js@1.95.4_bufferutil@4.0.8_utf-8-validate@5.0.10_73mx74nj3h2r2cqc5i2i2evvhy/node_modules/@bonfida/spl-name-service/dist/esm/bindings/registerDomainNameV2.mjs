import{PublicKey as o,SystemProgram as t,SYSVAR_RENT_PUBKEY as s}from"@solana/web3.js";import{createSplitV2Instruction as e}from"../instructions/createSplitV2Instruction.mjs";import{ROOT_DOMAIN_ACCOUNT as n,CENTRAL_STATE as r,REGISTER_PROGRAM_ID as m,REFERRERS as i,PYTH_PULL_FEEDS as a,NAME_PROGRAM_ID as c,USDC_MINT as l,VAULT_OWNER as d}from"../constants.mjs";import{getHashedNameSync as u}from"../utils/getHashedNameSync.mjs";import{getNameAccountKeySync as f}from"../utils/getNameAccountKeySync.mjs";import{getPythFeedAccountKey as p}from"../utils/getPythFeedAccountKey.mjs";import{InvalidDomainError as h,PythFeedNotFoundError as j}from"../error.mjs";import{getAssociatedTokenAddressSync as w}from"../node_modules/@solana/spl-token/lib/esm/state/mint.mjs";import{createAssociatedTokenAccountIdempotentInstruction as g}from"../node_modules/@solana/spl-token/lib/esm/instructions/associatedTokenAccount.mjs";import{TOKEN_PROGRAM_ID as y}from"../node_modules/@solana/spl-token/lib/esm/constants.mjs";const I=async(I,A,b,k,v,S=l,x)=>{if(A.includes(".")||A.trim().toLowerCase()!==A)throw new h("The domain name is malformed");const B=u(A),P=f(B,void 0,n),T=u(P.toBase58()),_=f(T,r),[K]=o.findProgramAddressSync([P.toBuffer()],m),N=i.findIndex((o=>null==x?void 0:x.equals(o)));let q;const C=[];if(-1!==N&&x){q=w(S,x,!0);const o=await I.getAccountInfo(q);if(!(null==o?void 0:o.data)){const o=g(k,q,x,S);C.push(o)}}const F=w(S,d,!0),H=a.get(S.toBase58());if(!H)throw new j("The Pyth account for the provided mint was not found");const[L]=p(0,H),O=new e({name:A,space:b,referrerIdxOpt:-1!=N?N:null}).getInstruction(m,c,n,P,_,t.programId,r,k,k,k,v,L,F,y,s,K,q);return C.push(O),C};export{I as registerDomainNameV2};
//# sourceMappingURL=registerDomainNameV2.mjs.map

import{deserialize as e}from"../node_modules/borsh/lib/esm/index.mjs";import{PublicKey as t}from"@solana/web3.js";import"../node_modules/buffer/index.mjs";import{NftRecordNotFoundError as r}from"../error.mjs";import{__exports as n}from"../_virtual/index.mjs";var o;!function(e){e[e.Uninitialized=0]="Uninitialized",e[e.CentralState=1]="CentralState",e[e.ActiveRecord=2]="ActiveRecord",e[e.InactiveRecord=3]="InactiveRecord"}(o||(o={}));class i{constructor(e){this.tag=e.tag,this.nonce=e.nonce,this.nameAccount=new t(e.nameAccount),this.owner=new t(e.owner),this.nftMint=new t(e.nftMint)}static deserialize(t){return new i(e(this.schema,t))}static async retrieve(e,t){const n=await e.getAccountInfo(t);if(!n||!n.data)throw new r("NFT record not found: "+t.toBase58());return this.deserialize(n.data)}static async findKey(e,r){return await t.findProgramAddress([n.Buffer.from("nft_record"),e.toBuffer()],r)}static findKeySync(e,r){return t.findProgramAddressSync([n.Buffer.from("nft_record"),e.toBuffer()],r)}}i.LEN=98,i.schema={struct:{tag:"u8",nonce:"u8",nameAccount:{array:{type:"u8",len:32}},owner:{array:{type:"u8",len:32}},nftMint:{array:{type:"u8",len:32}}}};export{i as NftRecord,o as Tag};
//# sourceMappingURL=state.mjs.map

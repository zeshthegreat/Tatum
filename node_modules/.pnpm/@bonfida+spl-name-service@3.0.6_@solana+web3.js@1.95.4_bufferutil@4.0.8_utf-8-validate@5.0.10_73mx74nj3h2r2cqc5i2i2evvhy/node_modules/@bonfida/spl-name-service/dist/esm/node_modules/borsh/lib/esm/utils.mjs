import{integers as t}from"./types.mjs";var n,o=(n=function(t,o){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])},n(t,o)},function(t,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function e(){this.constructor=t}n(t,o),t.prototype=null===o?Object.create(o):(e.prototype=o.prototype,new e)});function e(t){return Array.isArray(t)||!!t&&"object"==typeof t&&"length"in t&&"number"==typeof t.length&&(0===t.length||t.length>0&&t.length-1 in t)}function r(t,n,o){if(typeof t!==n)throw new Error("Expected ".concat(n," not ").concat(typeof t,"(").concat(t,") at ").concat(o.join(".")))}function c(t,n){if(!["number","string","bigint","boolean"].includes(typeof t)&&!("object"==typeof t&&null!==t&&"toString"in t))throw new Error("Expected bigint, number, boolean or string not ".concat(typeof t,"(").concat(t,") at ").concat(n.join(".")))}function i(t,n,o){if(t!==n)throw new Error("Array length ".concat(t," does not match schema length ").concat(n," at ").concat(o.join(".")))}function a(t,n){if("object"!=typeof t||null===t)throw new Error("Expected object not ".concat(typeof t,"(").concat(t,") at ").concat(n.join(".")))}var f=t.concat(["bool","string"]),u=["option","enum","array","set","map","struct"],y=function(t){function n(n,o){var e="Invalid schema: ".concat(JSON.stringify(n)," expected ").concat(o);return t.call(this,e)||this}return o(n,t),n}(Error);function p(t){if("string"!=typeof t||!f.includes(t)){if(t&&"object"==typeof t){var n=Object.keys(t);if(1===n.length&&u.includes(n[0])){var o=n[0];if("option"===o)return p(t[o]);if("enum"===o)return function(t){if(!Array.isArray(t))throw new y(t,"Array");for(var n=0,o=t;n<o.length;n++){var e=o[n];if("object"!=typeof e||!("struct"in e))throw new Error('Missing "struct" key in enum schema');if("object"!=typeof e.struct||1!==Object.keys(e.struct).length)throw new Error('The "struct" in each enum must have a single key');p({struct:e.struct})}}(t[o]);if("array"===o)return function(t){if("object"!=typeof t)throw new y(t,"{ type, len? }");if(t.len&&"number"!=typeof t.len)throw new Error("Invalid schema: ".concat(t));if("type"in t)return p(t.type);throw new y(t,"{ type, len? }")}(t[o]);if("set"===o)return p(t[o]);if("map"===o)return function(t){if("object"!=typeof t||!("key"in t)||!("value"in t))throw new y(t,"{ key, value }");p(t.key),p(t.value)}(t[o]);if("struct"===o)return function(t){if("object"!=typeof t)throw new y(t,"object");for(var n in t)p(t[n])}(t[o])}}throw new y(t,u.join(", ")+" or "+f.join(", "))}}export{y as ErrorSchema,c as expect_bigint,a as expect_enum,i as expect_same_size,r as expect_type,e as isArrayLike,p as validate_schema};
//# sourceMappingURL=utils.mjs.map

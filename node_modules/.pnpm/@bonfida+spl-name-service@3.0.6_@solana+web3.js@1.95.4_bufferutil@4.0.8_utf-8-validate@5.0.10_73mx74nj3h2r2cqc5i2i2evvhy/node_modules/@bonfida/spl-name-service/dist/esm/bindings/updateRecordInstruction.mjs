import{deleteInstruction as t}from"../instructions/deleteInstruction.mjs";import{updateInstruction as o}from"../instructions/updateInstruction.mjs";import{Numberu32 as r}from"../int.mjs";import{NAME_PROGRAM_ID as n}from"../constants.mjs";import{check as e}from"../utils/check.mjs";import{getDomainKeySync as i}from"../utils/getDomainKeySync.mjs";import{serializeRecord as s}from"../record/serializeRecord.mjs";import{Record as m,RecordVersion as c}from"../types/record.mjs";import{UnsupportedRecordError as u,AccountDoesNotExistError as p}from"../error.mjs";import{createRecordInstruction as a}from"./createRecordInstruction.mjs";const d=async(d,f,l,j,h,w)=>{e(l!==m.SOL,new u("SOL record is not supported for this instruction"));const{pubkey:y}=i(`${l}.${f}`,c.V1),g=await d.getAccountInfo(y);e(!!(null==g?void 0:g.data),new p("The record account does not exist"));const I=s(j,l);if((null==g?void 0:g.data.slice(96).length)!==I.length)return[t(n,y,w,h),await a(d,f,l,j,h,w)];return o(n,y,new r(0),I,h)};export{d as updateRecordInstruction};
//# sourceMappingURL=updateRecordInstruction.mjs.map

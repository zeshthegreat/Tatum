"use strict";require("../node_modules/buffer/index.cjs");var e=require("@solana/web3.js"),r=require("../node_modules/@scure/base/lib/esm/index.cjs"),o=require("../node_modules/punycode/punycode.es6.cjs"),d=require("../node_modules/ipaddr.js/lib/ipaddr.cjs"),t=require("../types/record.cjs"),c=require("../utils/check.cjs"),s=require("../error.cjs"),n=require("../_virtual/index.cjs");exports.serializeRecord=(i,u)=>{if(!t.RECORD_V1_SIZE.get(u))return u!==t.Record.CNAME&&u!==t.Record.TXT||(i=o.encode(i)),n.__exports.Buffer.from(i,"utf-8");if(u===t.Record.SOL)throw new s.UnsupportedRecordError("Use `serializeSolRecord` for SOL record");if(u===t.Record.ETH||u===t.Record.BSC)return c.check("0x"===i.slice(0,2),new s.InvalidEvmAddressError("The record content must start with `0x`")),n.__exports.Buffer.from(i.slice(2),"hex");if(u===t.Record.Injective){const e=r.bech32.decodeToBytes(i);return c.check("inj"===e.prefix,new s.InvalidInjectiveAddressError("The record content must start with `inj")),c.check(20===e.bytes.length,new s.InvalidInjectiveAddressError("The record data must be 20 bytes long")),n.__exports.Buffer.from(e.bytes)}if(u===t.Record.A){const e=d.ipaddrExports.parse(i).toByteArray();return c.check(4===e.length,new s.InvalidARecordError("The record content must be 4 bytes long")),n.__exports.Buffer.from(e)}if(u===t.Record.AAAA){const e=d.ipaddrExports.parse(i).toByteArray();return c.check(16===e.length,new s.InvalidAAAARecordError("The record content must be 16 bytes logn")),n.__exports.Buffer.from(e)}if(u===t.Record.Background)return new e.PublicKey(i).toBuffer();throw new s.InvalidRecordInputError("The provided record data is invalid")};
//# sourceMappingURL=serializeRecord.cjs.map

{"version":3,"file":"index.cjs","sources":["../../../../node_modules/unicode-trie/index.js"],"sourcesContent":["const inflate = require('tiny-inflate');\nconst { swap32LE } = require('./swap');\n\n// Shift size for getting the index-1 table offset.\nconst SHIFT_1 = 6 + 5;\n\n// Shift size for getting the index-2 table offset.\nconst SHIFT_2 = 5;\n\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n// Number of entries in an index-2 block. 64=0x40\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n// Mask for getting the lower bits for the in-index-2-block offset. */\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nconst INDEX_SHIFT = 2;\n\n// Number of entries in a data block. 32=0x20\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n// Mask for getting the lower bits for the in-data-block offset.\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n// Count the lengths of both BMP pieces. 2080=0x820\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8\n\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n// The alignment size of a data block. Also the granularity for compaction.\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\nclass UnicodeTrie {\n  constructor(data) {\n    const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');\n\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      let uncompressedLength;\n      if (isBuffer) {\n        this.highStart = data.readUInt32LE(0);\n        this.errorValue = data.readUInt32LE(4);\n        uncompressedLength = data.readUInt32LE(8);\n        data = data.slice(12);\n      } else {\n        const view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0, true);\n        this.errorValue = view.getUint32(4, true);\n        uncompressedLength = view.getUint32(8, true);\n        data = data.subarray(12);\n      }\n\n      // double inflate the actual trie data\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n\n      // swap bytes from little-endian\n      swap32LE(data);\n\n      this.data = new Uint32Array(data.buffer);\n\n    } else {\n      // pre-parsed data\n      ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n    }\n  }\n\n  get(codePoint) {\n    let index;\n    if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n      return this.errorValue;\n    }\n\n    if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n      // Ordinary BMP code point, excluding leading surrogates.\n      // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n      // data is stored in the index array itself.\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint <= 0xffff) {\n      // Lead Surrogate Code Point.  A Separate index section is stored for\n      // lead surrogate code units and code points.\n      //   The main index has the code unit data.\n      //   For this function, we need the code point data.\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint < this.highStart) {\n      // Supplemental code point, use two-level lookup.\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    return this.data[this.data.length - DATA_GRANULARITY];\n  }\n}\n\nmodule.exports = UnicodeTrie;"],"names":["inflate","require$$0","swap32LE","require$$1","unicodeTrie","constructor","data","isBuffer","readUInt32BE","slice","Uint8Array","uncompressedLength","this","highStart","readUInt32LE","errorValue","view","DataView","buffer","getUint32","subarray","Uint32Array","get","codePoint","index","DATA_BLOCK_LENGTH","INDEX_1_OFFSET","INDEX_2_BLOCK_LENGTH","length"],"mappings":"gFAAA,MAAMA,EAAUC,EAAAA,aACVC,SAAEA,GAAaC,SAsIrBC,IAAAA,EAtEA,MACEC,WAAAA,CAAYC,GACV,MAAMC,EAAyC,mBAAtBD,EAAKE,cAAuD,mBAAfF,EAAKG,MAE3E,GAAIF,GAAYD,aAAgBI,WAAY,CAE1C,IAAIC,EACJ,GAAIJ,EACFK,KAAKC,UAAYP,EAAKQ,aAAa,GACnCF,KAAKG,WAAaT,EAAKQ,aAAa,GACpCH,EAAqBL,EAAKQ,aAAa,GACvCR,EAAOA,EAAKG,MAAM,QACb,CACL,MAAMO,EAAO,IAAIC,SAASX,EAAKY,QAC/BN,KAAKC,UAAYG,EAAKG,UAAU,GAAG,GACnCP,KAAKG,WAAaC,EAAKG,UAAU,GAAG,GACpCR,EAAqBK,EAAKG,UAAU,GAAG,GACvCb,EAAOA,EAAKc,SAAS,GACtB,CAGDd,EAAON,EAAQM,EAAM,IAAII,WAAWC,IACpCL,EAAON,EAAQM,EAAM,IAAII,WAAWC,IAGpCT,EAASI,GAETM,KAAKN,KAAO,IAAIe,YAAYf,EAAKY,OAEvC,OAESZ,KAAMM,KAAKN,KAAMO,UAAWD,KAAKC,UAAWE,WAAYH,KAAKG,YAAeT,EAElF,CAEDgB,GAAAA,CAAIC,GACF,IAAIC,EACJ,OAAKD,EAAY,GAAOA,EAAY,QAC3BX,KAAKG,WAGTQ,EAAY,OAAaA,EAAY,OAAYA,GAAa,OAIjEC,GAASZ,KAAKN,KAAKiB,GAvGT,IAoBI,IAMFE,GA6EgDF,GACrDX,KAAKN,KAAKkB,IAGfD,GAAa,OAKfC,GAASZ,KAAKN,KAhFQ,MAgFqBiB,EAAY,OAhH7C,KAoBI,IAMFE,GAsFmFF,GACxFX,KAAKN,KAAKkB,IAGfD,EAAYX,KAAKC,WAEnBW,EAAQZ,KAAKN,KAAMoB,MAAgDH,GAzHzD,KA0HVC,EAAQZ,KAAKN,KAAKkB,GAAUD,GAvHlB,EAcKI,KA0GfH,GAASA,GApGK,IAMFC,GA8FsBF,GAC3BX,KAAKN,KAAKkB,IAGZZ,KAAKN,KAAKM,KAAKN,KAAKsB,OApEN,EAqEtB","x_google_ignoreList":[0]}
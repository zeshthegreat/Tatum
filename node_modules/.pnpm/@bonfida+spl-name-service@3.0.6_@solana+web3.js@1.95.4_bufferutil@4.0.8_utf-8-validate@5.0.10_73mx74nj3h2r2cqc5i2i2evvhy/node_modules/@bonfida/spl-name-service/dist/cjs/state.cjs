"use strict";var e=require("@solana/web3.js"),t=require("./nft/retrieveNftOwnerV2.cjs"),r=require("./node_modules/borsh/lib/esm/index.cjs"),s=require("./error.cjs");class a{constructor(t){this.parentName=new e.PublicKey(t.parentName),this.owner=new e.PublicKey(t.owner),this.class=new e.PublicKey(t.class)}static deserialize(e){const t=new a(r.deserialize(this.schema,e));return t.data=null==e?void 0:e.slice(this.HEADER_LEN),t}static async retrieve(e,i){var n;const c=await e.getAccountInfo(i);if(!c)throw new s.AccountDoesNotExistError("The name account does not exist");const o=new a(r.deserialize(this.schema,c.data));o.data=null===(n=c.data)||void 0===n?void 0:n.slice(this.HEADER_LEN);return{registry:o,nftOwner:await t.retrieveNftOwnerV2(e,i)}}static async _retrieveBatch(e,t){const s=await e.getMultipleAccountsInfo(t),i=e=>{if(!e)return;const t=new a(r.deserialize(this.schema,e));return t.data=null==e?void 0:e.slice(this.HEADER_LEN),t};return s.map((e=>i(null==e?void 0:e.data)))}static async retrieveBatch(e,t){let r=[];const s=[...t];for(;s.length>0;)r.push(...await this._retrieveBatch(e,s.splice(0,100)));return r}}a.HEADER_LEN=96,a.schema={struct:{parentName:{array:{type:"u8",len:32}},owner:{array:{type:"u8",len:32}},class:{array:{type:"u8",len:32}}}},exports.NameRegistryState=a;
//# sourceMappingURL=state.cjs.map

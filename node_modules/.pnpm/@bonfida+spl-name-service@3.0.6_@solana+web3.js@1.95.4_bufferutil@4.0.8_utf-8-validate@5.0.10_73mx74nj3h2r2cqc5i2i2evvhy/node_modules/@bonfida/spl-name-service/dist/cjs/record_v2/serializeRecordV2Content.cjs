"use strict";var e=require("@solana/web3.js"),r=require("../node_modules/punycode/punycode.es6.cjs"),o=require("../node_modules/@scure/base/lib/esm/index.cjs"),t=require("../node_modules/ipaddr.js/lib/ipaddr.cjs"),s=require("../utils/check.cjs"),c=require("../types/record.cjs"),n=require("../error.cjs");require("../node_modules/buffer/index.cjs");var d=require("./const.cjs"),i=require("../_virtual/index.cjs");exports.serializeRecordV2Content=(u,a)=>{if(d.UTF8_ENCODED.has(a))return a!==c.Record.CNAME&&a!==c.Record.TXT||(u=r.encode(u)),i.__exports.Buffer.from(u,"utf-8");if(a===c.Record.SOL)return new e.PublicKey(u).toBuffer();if(d.EVM_RECORDS.has(a))return s.check("0x"===u.slice(0,2),new n.InvalidEvmAddressError("The record content must start with `0x`")),i.__exports.Buffer.from(u.slice(2),"hex");if(a===c.Record.Injective){const e=o.bech32.decodeToBytes(u);return s.check("inj"===e.prefix,new n.InvalidInjectiveAddressError("The record content must start with `inj")),s.check(20===e.bytes.length,new n.InvalidInjectiveAddressError("The record data must be 20 bytes long")),i.__exports.Buffer.from(e.bytes)}if(a===c.Record.A){const e=t.ipaddrExports.parse(u).toByteArray();return s.check(4===e.length,new n.InvalidARecordError("The record content must be 4 bytes long")),i.__exports.Buffer.from(e)}if(a===c.Record.AAAA){const e=t.ipaddrExports.parse(u).toByteArray();return s.check(16===e.length,new n.InvalidAAAARecordError("The record content must be 16 bytes long")),i.__exports.Buffer.from(e)}throw new n.InvalidRecordInputError("The record content is malformed")};
//# sourceMappingURL=serializeRecordV2Content.cjs.map

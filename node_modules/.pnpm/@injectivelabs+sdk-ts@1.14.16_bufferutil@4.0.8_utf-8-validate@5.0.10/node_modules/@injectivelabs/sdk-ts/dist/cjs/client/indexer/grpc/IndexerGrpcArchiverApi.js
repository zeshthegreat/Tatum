"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcArchiverApi = void 0;
const exceptions_1 = require("@injectivelabs/exceptions");
const indexer_proto_ts_1 = require("@injectivelabs/indexer-proto-ts");
const BaseIndexerGrpcConsumer_1 = __importDefault(require("../../base/BaseIndexerGrpcConsumer"));
const types_1 = require("../types");
const transformers_1 = require("../transformers");
/**
 * @category Indexer Grpc API
 */
class IndexerGrpcArchiverApi extends BaseIndexerGrpcConsumer_1.default {
    constructor(endpoint) {
        super(endpoint);
        this.module = types_1.IndexerModule.Archiver;
        this.client = new indexer_proto_ts_1.InjectiveArchiverRpc.InjectiveArchiverRPCClientImpl(this.getGrpcWebImpl(endpoint));
    }
    fetchHistoricalBalance(_a) {
        return __awaiter(this, arguments, void 0, function* ({ account, resolution, }) {
            const request = indexer_proto_ts_1.InjectiveArchiverRpc.BalanceRequest.create();
            request.account = account;
            request.resolution = resolution;
            try {
                const response = yield this.retry(() => this.client.Balance(request));
                return transformers_1.IndexerGrpcArchiverTransformer.grpcHistoricalBalanceResponseToHistoricalBalances(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveArchiverRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        context: 'Historical Balance',
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    context: 'Historical Balance',
                    contextModule: this.module,
                });
            }
        });
    }
    fetchHistoricalRpnl(_a) {
        return __awaiter(this, arguments, void 0, function* ({ account, resolution, }) {
            const request = indexer_proto_ts_1.InjectiveArchiverRpc.RpnlRequest.create();
            request.account = account;
            request.resolution = resolution;
            try {
                const response = yield this.retry(() => this.client.Rpnl(request));
                return transformers_1.IndexerGrpcArchiverTransformer.grpcHistoricalRPNLResponseToHistoricalRPNL(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveArchiverRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        context: 'Historical Rpnl',
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    context: 'Historical Rpnl',
                    contextModule: this.module,
                });
            }
        });
    }
    fetchHistoricalVolumes(_a) {
        return __awaiter(this, arguments, void 0, function* ({ account, resolution, }) {
            const request = indexer_proto_ts_1.InjectiveArchiverRpc.VolumesRequest.create();
            request.account = account;
            request.resolution = resolution;
            try {
                const response = yield this.retry(() => this.client.Volumes(request));
                return transformers_1.IndexerGrpcArchiverTransformer.grpcHistoricalVolumesResponseToHistoricalVolumes(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveArchiverRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        context: 'Historical Volumes',
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    context: 'Historical Volumes',
                    contextModule: this.module,
                });
            }
        });
    }
    fetchPnlLeaderboard(_a) {
        return __awaiter(this, arguments, void 0, function* ({ startDate, endDate, limit, account, }) {
            const request = indexer_proto_ts_1.InjectiveArchiverRpc.PnlLeaderboardRequest.create();
            request.startDate = startDate;
            request.endDate = endDate;
            if (limit) {
                request.limit = limit;
            }
            if (account) {
                request.account = account;
            }
            try {
                const response = yield this.retry(() => this.client.PnlLeaderboard(request));
                return transformers_1.IndexerGrpcArchiverTransformer.grpcPnlLeaderboardResponseToPnlLeaderboard(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveArchiverRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        context: 'Pnl Leaderboard',
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    context: 'Pnl Leaderboard',
                    contextModule: this.module,
                });
            }
        });
    }
    fetchVolLeaderboard(_a) {
        return __awaiter(this, arguments, void 0, function* ({ startDate, endDate, limit, account, }) {
            const request = indexer_proto_ts_1.InjectiveArchiverRpc.VolLeaderboardRequest.create();
            request.startDate = startDate;
            request.endDate = endDate;
            if (limit) {
                request.limit = limit;
            }
            if (account) {
                request.account = account;
            }
            try {
                const response = yield this.retry(() => this.client.VolLeaderboard(request));
                return transformers_1.IndexerGrpcArchiverTransformer.grpcVolLeaderboardResponseToVolLeaderboard(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveArchiverRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        context: 'Vol Leaderboard',
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    context: 'Vol Leaderboard',
                    contextModule: this.module,
                });
            }
        });
    }
    fetchPnlLeaderboardFixedResolution(_a) {
        return __awaiter(this, arguments, void 0, function* ({ resolution, limit, account, }) {
            const request = indexer_proto_ts_1.InjectiveArchiverRpc.PnlLeaderboardFixedResolutionRequest.create();
            request.resolution = resolution;
            if (limit) {
                request.limit = limit;
            }
            if (account) {
                request.account = account;
            }
            try {
                const response = yield this.retry(() => this.client.PnlLeaderboardFixedResolution(request));
                return transformers_1.IndexerGrpcArchiverTransformer.grpcPnlLeaderboardFixedResolutionResponseToPnlLeaderboard(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveArchiverRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        context: 'Pnl Leaderboard Fixed Resolution',
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    context: 'Pnl Leaderboard Fixed Resolution',
                    contextModule: this.module,
                });
            }
        });
    }
    fetchVolLeaderboardFixedResolution(_a) {
        return __awaiter(this, arguments, void 0, function* ({ resolution, limit, account, }) {
            const request = indexer_proto_ts_1.InjectiveArchiverRpc.VolLeaderboardFixedResolutionRequest.create();
            request.resolution = resolution;
            if (limit) {
                request.limit = limit;
            }
            if (account) {
                request.account = account;
            }
            try {
                const response = yield this.retry(() => this.client.VolLeaderboardFixedResolution(request));
                return transformers_1.IndexerGrpcArchiverTransformer.grpcVolLeaderboardFixedResolutionResponseToVolLeaderboard(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveArchiverRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        context: 'Vol Leaderboard Fixed Resolution',
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    context: 'Vol Leaderboard Fixed Resolution',
                    contextModule: this.module,
                });
            }
        });
    }
    fetchDenomHolders(_a) {
        return __awaiter(this, arguments, void 0, function* ({ denom, token, limit, }) {
            const request = indexer_proto_ts_1.InjectiveArchiverRpc.DenomHoldersRequest.create();
            request.denom = denom;
            if (token) {
                request.token = token;
            }
            if (limit) {
                request.limit = limit;
            }
            try {
                const response = yield this.retry(() => this.client.DenomHolders(request));
                return transformers_1.IndexerGrpcArchiverTransformer.grpcDenomHoldersResponseToDenomHolders(response);
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveArchiverRpc.GrpcWebError) {
                    throw new exceptions_1.GrpcUnaryRequestException(new Error(e.toString()), {
                        code: e.code,
                        context: 'DenomHolders',
                        contextModule: this.module,
                    });
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    context: 'DenomHolders',
                    contextModule: this.module,
                });
            }
        });
    }
}
exports.IndexerGrpcArchiverApi = IndexerGrpcArchiverApi;
//# sourceMappingURL=IndexerGrpcArchiverApi.js.map
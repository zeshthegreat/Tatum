import { InjectiveArchiverRpc } from '@injectivelabs/indexer-proto-ts';
import BaseGrpcConsumer from '../../base/BaseIndexerGrpcConsumer';
/**
 * @category Indexer Grpc API
 */
export declare class IndexerGrpcArchiverApi extends BaseGrpcConsumer {
    protected module: string;
    protected client: InjectiveArchiverRpc.InjectiveArchiverRPCClientImpl;
    constructor(endpoint: string);
    fetchHistoricalBalance({ account, resolution, }: {
        account: string;
        resolution: string;
    }): Promise<import("../types").HistoricalBalance>;
    fetchHistoricalRpnl({ account, resolution, }: {
        account: string;
        resolution: string;
    }): Promise<import("../types").HistoricalRPNL>;
    fetchHistoricalVolumes({ account, resolution, }: {
        account: string;
        resolution: string;
    }): Promise<import("../types").HistoricalVolumes>;
    fetchPnlLeaderboard({ startDate, endDate, limit, account, }: {
        startDate: string;
        endDate: string;
        limit?: number;
        account?: string;
    }): Promise<import("../types").PnlLeaderboard>;
    fetchVolLeaderboard({ startDate, endDate, limit, account, }: {
        startDate: string;
        endDate: string;
        limit?: number;
        account?: string;
    }): Promise<import("../types").VolLeaderboard>;
    fetchPnlLeaderboardFixedResolution({ resolution, limit, account, }: {
        resolution: string;
        limit?: number;
        account?: string;
    }): Promise<import("../types").PnlLeaderboard>;
    fetchVolLeaderboardFixedResolution({ resolution, limit, account, }: {
        resolution: string;
        limit?: number;
        account?: string;
    }): Promise<import("../types").VolLeaderboard>;
    fetchDenomHolders({ denom, token, limit, }: {
        denom: string;
        token?: string;
        limit?: number;
    }): Promise<import("../types").DenomHolders>;
}
//# sourceMappingURL=IndexerGrpcArchiverApi.d.ts.map
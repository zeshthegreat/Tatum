import { MsgBase } from '../../MsgBase';
import { InjectivePermissionsV1Beta1Tx } from '@injectivelabs/core-proto-ts';
export declare namespace MsgCreateNamespace {
    interface Params {
        sender: string;
        namespace: {
            denom: string;
            wasmHook: string;
            mintsPaused: boolean;
            sendsPaused: boolean;
            burnsPaused: boolean;
            rolePermissions: {
                role: string;
                permissions: number;
            }[];
            addressRoles: {
                address: string;
                roles: string[];
            }[];
        };
    }
    type Proto = InjectivePermissionsV1Beta1Tx.MsgCreateNamespace;
}
/**
 * @category Messages
 */
export default class MsgCreateNamespace extends MsgBase<MsgCreateNamespace.Params, MsgCreateNamespace.Proto> {
    static fromJSON(params: MsgCreateNamespace.Params): MsgCreateNamespace;
    toProto(): InjectivePermissionsV1Beta1Tx.MsgCreateNamespace;
    toData(): {
        sender: string;
        namespace: import("@injectivelabs/core-proto-ts/cjs/injective/permissions/v1beta1/permissions").Namespace | undefined;
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            sender: string;
            namespace: import("@injectivelabs/core-proto-ts/cjs/injective/permissions/v1beta1/permissions").Namespace | undefined;
        };
    };
    toWeb3(): {
        sender: string;
        namespace: import("@injectivelabs/core-proto-ts/cjs/injective/permissions/v1beta1/permissions").Namespace | undefined;
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: InjectivePermissionsV1Beta1Tx.MsgCreateNamespace;
    };
    toBinary(): Uint8Array;
}
//# sourceMappingURL=MsgCreateNamespace.d.ts.map
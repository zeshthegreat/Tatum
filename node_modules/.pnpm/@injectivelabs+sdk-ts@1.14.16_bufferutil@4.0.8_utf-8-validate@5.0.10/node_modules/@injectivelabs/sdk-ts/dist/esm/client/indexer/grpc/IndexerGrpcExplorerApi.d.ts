import { InjectiveExplorerRpc } from '@injectivelabs/indexer-proto-ts';
import BaseGrpcConsumer from '../../base/BaseIndexerGrpcConsumer';
/**
 * @category Indexer Grpc API
 */
export declare class IndexerGrpcExplorerApi extends BaseGrpcConsumer {
    protected module: string;
    protected client: InjectiveExplorerRpc.InjectiveExplorerRPCClientImpl;
    constructor(endpoint: string);
    fetchTxByHash(hash: string): Promise<import("../types").Transaction>;
    fetchAccountTx({ address, limit, type, before, after, startTime, endTime, }: {
        address: string;
        limit?: number;
        type?: string;
        before?: number;
        after?: number;
        startTime?: number;
        endTime?: number;
    }): Promise<{
        txs: import("../types").Transaction[];
        pagination: import("../../..").ExchangePagination;
    }>;
    fetchValidator(validatorAddress: string): Promise<import("../types").ExplorerValidator>;
    fetchValidatorUptime(validatorAddress: string): Promise<import("../types").ValidatorUptime[]>;
    fetchPeggyDepositTxs({ sender, receiver, limit, skip, }: {
        receiver?: string;
        sender?: string;
        limit?: number;
        skip?: number;
    }): Promise<import("../types").PeggyDepositTx[]>;
    fetchPeggyWithdrawalTxs({ sender, receiver, limit, skip, }: {
        sender?: string;
        receiver?: string;
        limit?: number;
        skip?: number;
    }): Promise<import("../types").PeggyWithdrawalTx[]>;
    fetchBlocks({ before, after, limit, from, to, }: {
        before?: number;
        after?: number;
        limit?: number;
        from?: number;
        to?: number;
    }): Promise<InjectiveExplorerRpc.GetBlocksResponse>;
    fetchBlock(id: string): Promise<InjectiveExplorerRpc.GetBlockResponse>;
    fetchTxs({ before, after, limit, skip, type, chainModule, startTime, endTime, }: {
        before?: number;
        after?: number;
        limit?: number;
        skip?: number;
        type?: string;
        startTime?: number;
        endTime?: number;
        chainModule?: string;
    }): Promise<InjectiveExplorerRpc.GetTxsResponse>;
    fetchIBCTransferTxs({ sender, receiver, srcChannel, srcPort, destChannel, destPort, limit, skip, }: {
        sender?: string;
        receiver?: string;
        srcChannel?: string;
        srcPort?: string;
        destChannel?: string;
        destPort?: string;
        limit?: number;
        skip?: number;
    }): Promise<import("../types").IBCTransferTx[]>;
    fetchExplorerStats(): Promise<import("../types").ExplorerStats>;
}
//# sourceMappingURL=IndexerGrpcExplorerApi.d.ts.map
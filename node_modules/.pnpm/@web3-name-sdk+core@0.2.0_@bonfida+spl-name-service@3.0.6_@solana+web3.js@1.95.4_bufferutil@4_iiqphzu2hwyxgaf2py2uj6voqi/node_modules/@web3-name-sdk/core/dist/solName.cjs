"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/solName.ts
var solName_exports = {};
__export(solName_exports, {
  createSolName: () => createSolName
});
module.exports = __toCommonJS(solName_exports);

// src/tlds/sol/index.ts
var import_web3 = require("@solana/web3.js");
var import_spl_name_service = require("@bonfida/spl-name-service");
var SolName = class {
  constructor() {
    this.connection = new import_web3.Connection((0, import_web3.clusterApiUrl)("mainnet-beta"));
  }
  async getDomainName({ address }) {
    const name = await (0, import_spl_name_service.reverseLookup)(this.connection, new import_web3.PublicKey(address));
    return name;
  }
  async getAddress({ name }) {
    const owner = await (0, import_spl_name_service.resolve)(this.connection, name);
    return owner;
  }
};

// src/solName.ts
function createSolName() {
  return new SolName();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createSolName
});

type GetDomainNameProps = {
    queryChainIdList?: number[];
    queryTldList?: string[];
    address: string;
    rpcUrl?: string;
};
type BatchGetDomainNameProps = {
    addressList: string[];
} & Omit<GetDomainNameProps, 'address'>;
type BatchGetDomainNameReturn = {
    address: string;
    domain: string | null;
}[];
declare class Web3Name {
    private contractReader;
    constructor({ isDev, rpcUrl }?: {
        isDev?: boolean;
        rpcUrl?: string;
    });
    private getTldInfoList;
    private getDomainNameByTld;
    /**
     * Get domain name from address.
     * If queryChainIdList is specified, it will return domain name from that chain.
     * If queryTldList is specified, it will return domain name from that TLDs with the order.
     * If neither is specified, it will return domain name from all TLDs.
     * It's not recommended to use queryChainIdList and queryTldList together.
     *
     * @param {GetDomainNameProps} { address, queryChainIdList, queryTldList }
     * @return {*}  {(Promise<string | null>)}
     * @memberof Web3Name
     */
    getDomainName({ address, queryChainIdList, queryTldList, rpcUrl }: GetDomainNameProps): Promise<string | null>;
    batchGetDomainName({ addressList, queryChainIdList, queryTldList, rpcUrl, }: BatchGetDomainNameProps): Promise<BatchGetDomainNameReturn | null>;
    /**
     * Get address from name. If coinType is specified, it will return ENSIP-9 address for that coinType.
     *
     * @param {string} name
     * @param {{ coinType?: number; rpcUrl?: string }} { coinType, rpcUrl }
     * @return {*}  {(Promise<string | null>)}
     * @memberof Web3Name
     */
    getAddress(name: string, { coinType, rpcUrl }?: {
        coinType?: number;
        rpcUrl?: string;
    }): Promise<string | null>;
    /**
     * Get available domain list from address.
     *
     * @param {GetDomainNameProps} { address, queryChainIdList, queryTldList }
     * @return {*}  {Promise<string[]>}
     * @memberof Web3Name
     */
    getDomainNames({ address, queryChainIdList, queryTldList, rpcUrl }: GetDomainNameProps): Promise<string[]>;
    /**
     * Get domain record from name and key.
     *
     * @param {{ name: string; key: string; rpcUrl?: string }} { name, key, rpcUrl }
     * @return {*}
     * @memberof Web3Name
     */
    getDomainRecord({ name, key, rpcUrl }: {
        name: string;
        key: string;
        rpcUrl?: string;
    }): Promise<string | null>;
    /**
     * Get domain metadata from name.
     *
     * @param {{ name: string; rpcUrl?: string }} { name, rpcUrl }
     * @return {*}
     * @memberof Web3Name
     */
    getMetadata({ name, rpcUrl }: {
        name: string;
        rpcUrl?: string;
    }): Promise<any>;
    /**
     * Get domain avatar from name.
     *
     * @param {{ name: string; key: string; rpcUrl?: string }} { name, rpcUrl }
     * @return {*}
     * @memberof Web3Name
     */
    getDomainAvatar({ name, rpcUrl }: {
        name: string;
        key: string;
        rpcUrl?: string;
    }): Promise<string | undefined>;
    /**
     * Get domain content hash from name.
     *
     * @param {{ name: string; rpcUrl?: string }} { name, rpcUrl }
     * @return {*}  {(Promise<string | undefined>)}
     * @memberof Web3Name
     */
    getContentHash({ name, rpcUrl }: {
        name: string;
        rpcUrl?: string;
    }): Promise<string | undefined>;
}

/**
 * Creates a new instance of Web3Name for EVM based chains
 */
declare function createWeb3Name({ isDev, rpcUrl }?: {
    isDev?: boolean;
    rpcUrl?: string;
}): Web3Name;

export { createWeb3Name };

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signAndBroadcast = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _tx = require("cosmjs-types/cosmos/tx/v1beta1/tx");

var signAndBroadcast = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref) {
    var client, chainId, address, msgs, fee, _ref$memo, memo, _yield$client$getSequ, accountNumber, sequence, txRaw, txBytes;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            client = _ref.client, chainId = _ref.chainId, address = _ref.address, msgs = _ref.msgs, fee = _ref.fee, _ref$memo = _ref.memo, memo = _ref$memo === void 0 ? '' : _ref$memo;
            _context.next = 3;
            return client.getSequence(address);

          case 3:
            _yield$client$getSequ = _context.sent;
            accountNumber = _yield$client$getSequ.accountNumber;
            sequence = _yield$client$getSequ.sequence;
            _context.next = 8;
            return client.sign(address, msgs, fee, memo, {
              accountNumber: accountNumber,
              sequence: sequence,
              chainId: chainId
            });

          case 8:
            txRaw = _context.sent;
            txBytes = _tx.TxRaw.encode(txRaw).finish();
            _context.next = 12;
            return client.broadcastTx(txBytes);

          case 12:
            return _context.abrupt("return", _context.sent);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function signAndBroadcast(_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports.signAndBroadcast = signAndBroadcast;
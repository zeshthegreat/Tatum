"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOfflineSignerProto = exports.getOfflineSignerAmino = void 0;
exports.makeHdPath = makeHdPath;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _amino = require("@cosmjs/amino");

var _protoSigning = require("@cosmjs/proto-signing");

var _crypto = require("@cosmjs/crypto");

function makeHdPath() {
  var coinType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 118;
  var account = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return [_crypto.Slip10RawIndex.hardened(44), _crypto.Slip10RawIndex.hardened(coinType), _crypto.Slip10RawIndex.hardened(0), _crypto.Slip10RawIndex.normal(0), _crypto.Slip10RawIndex.normal(account)];
}

var getOfflineSignerProto = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref) {
    var mnemonic, chain, bech32_prefix, slip44, wallet;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mnemonic = _ref.mnemonic, chain = _ref.chain;
            _context.prev = 1;
            bech32_prefix = chain.bech32_prefix, slip44 = chain.slip44;
            _context.next = 5;
            return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {
              prefix: bech32_prefix,
              hdPaths: [makeHdPath(slip44, 0)]
            });

          case 5:
            wallet = _context.sent;
            return _context.abrupt("return", wallet);

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](1);
            console.log('bad mnemonic');

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 9]]);
  }));

  return function getOfflineSignerProto(_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports.getOfflineSignerProto = getOfflineSignerProto;

var getOfflineSignerAmino = /*#__PURE__*/function () {
  var _ref4 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(_ref3) {
    var mnemonic, chain, bech32_prefix, slip44, wallet;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            mnemonic = _ref3.mnemonic, chain = _ref3.chain;
            _context2.prev = 1;
            bech32_prefix = chain.bech32_prefix, slip44 = chain.slip44;
            _context2.next = 5;
            return _amino.Secp256k1HdWallet.fromMnemonic(mnemonic, {
              prefix: bech32_prefix,
              hdPaths: [makeHdPath(slip44, 0)]
            });

          case 5:
            wallet = _context2.sent;
            return _context2.abrupt("return", wallet);

          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2["catch"](1);
            console.log('bad mnemonic');

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 9]]);
  }));

  return function getOfflineSignerAmino(_x2) {
    return _ref4.apply(this, arguments);
  };
}();

exports.getOfflineSignerAmino = getOfflineSignerAmino;
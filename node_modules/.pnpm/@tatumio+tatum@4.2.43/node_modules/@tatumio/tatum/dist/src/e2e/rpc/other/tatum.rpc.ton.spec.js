"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const service_1 = require("../../../service");
const e2e_util_1 = require("../../e2e.util");
const getTonClient = async (testnet) => {
    return await service_1.TatumSDK.init(e2e_util_1.e2eUtil.initConfig(testnet ? service_1.Network.TON_TESTNET : service_1.Network.TON));
};
describe('Ton', () => {
    describe('Testnet', () => {
        it('Ton V2 API - status', async () => {
            const ton = await getTonClient(true);
            const result = await ton.rpc.getBlockchainMasterchainHead();
            await ton.destroy();
            expect(result).toBeDefined();
        });
        it('Ton Http API - getMasterchainInfo', async () => {
            const ton = await getTonClient(true);
            const result = await ton.rpc.getMasterchainInfo();
            await ton.destroy();
            expect(result).toBeDefined();
        });
    });
    describe('Mainnet', () => {
        it.skip('Ton V2 API - status', async () => {
            const ton = await getTonClient();
            const result = await ton.rpc.getBlockchainMasterchainHead();
            await ton.destroy();
            expect(result).toBeDefined();
        });
        it('Ton Http API - getMasterchainInfo', async () => {
            const ton = await getTonClient();
            const result = await ton.rpc.getMasterchainInfo();
            await ton.destroy();
            expect(result).toBeDefined();
        });
    });
});
//# sourceMappingURL=tatum.rpc.ton.spec.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinanceSmartChain = exports.Celo = exports.Polygon = exports.Ethereum = exports.ZkSync = exports.Klaytn = exports.HorizenEon = exports.Chiliz = exports.Flare = exports.Base = exports.XinFin = exports.Vechain = exports.Palm = exports.Optimism = exports.Oasis = exports.Kucoin = exports.HarmonyOne = exports.Haqq = exports.Gnosis = exports.Fantom = exports.EthereumClassic = exports.Cronos = exports.AvalancheC = exports.Aurora = exports.ArbitrumOne = exports.ArbitrumNova = exports.FullEvm = exports.NotificationEvm = exports.BaseEvm = void 0;
const typedi_1 = require("typedi");
const util_1 = require("../../util");
const address_1 = require("../address");
const fee_1 = require("../fee");
const ipfs_1 = require("../ipfs");
const nft_1 = require("../nft");
const notification_1 = require("../notification");
const rate_1 = require("../rate");
const token_1 = require("../token");
const tatum_1 = require("./tatum");
class BaseEvm extends tatum_1.TatumSdkChain {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
        this.fee = typedi_1.Container.of(id).get(fee_1.FeeEvm);
        this.ipfs = typedi_1.Container.of(id).get(ipfs_1.Ipfs);
        this.rates = typedi_1.Container.of(id).get(rate_1.Rates);
    }
}
exports.BaseEvm = BaseEvm;
class NotificationEvm extends BaseEvm {
    constructor(id) {
        super(id);
        this.notification = typedi_1.Container.of(id).get(notification_1.Notification);
    }
}
exports.NotificationEvm = NotificationEvm;
class FullEvm extends NotificationEvm {
    constructor(id) {
        super(id);
        this.nft = typedi_1.Container.of(id).get(nft_1.Nft);
        this.token = typedi_1.Container.of(id).get(token_1.Token);
        this.address = typedi_1.Container.of(id).get(address_1.Address);
    }
}
exports.FullEvm = FullEvm;
// Base class for all EVM based chains
class ArbitrumNova extends BaseEvm {
}
exports.ArbitrumNova = ArbitrumNova;
class ArbitrumOne extends BaseEvm {
}
exports.ArbitrumOne = ArbitrumOne;
class Aurora extends BaseEvm {
}
exports.Aurora = Aurora;
class AvalancheC extends NotificationEvm {
}
exports.AvalancheC = AvalancheC;
class Cronos extends NotificationEvm {
}
exports.Cronos = Cronos;
class EthereumClassic extends BaseEvm {
}
exports.EthereumClassic = EthereumClassic;
class Fantom extends NotificationEvm {
}
exports.Fantom = Fantom;
class Gnosis extends BaseEvm {
}
exports.Gnosis = Gnosis;
class Haqq extends BaseEvm {
}
exports.Haqq = Haqq;
class HarmonyOne extends BaseEvm {
}
exports.HarmonyOne = HarmonyOne;
class Kucoin extends BaseEvm {
}
exports.Kucoin = Kucoin;
class Oasis extends BaseEvm {
}
exports.Oasis = Oasis;
class Optimism extends NotificationEvm {
}
exports.Optimism = Optimism;
class Palm extends BaseEvm {
}
exports.Palm = Palm;
class Vechain extends BaseEvm {
}
exports.Vechain = Vechain;
class XinFin extends BaseEvm {
}
exports.XinFin = XinFin;
class Base extends NotificationEvm {
}
exports.Base = Base;
class Flare extends NotificationEvm {
}
exports.Flare = Flare;
class Chiliz extends NotificationEvm {
}
exports.Chiliz = Chiliz;
class HorizenEon extends BaseEvm {
    constructor(id) {
        super(id);
        this.address = typedi_1.Container.of(id).get(address_1.Address);
    }
}
exports.HorizenEon = HorizenEon;
class Klaytn extends NotificationEvm {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.Klaytn = Klaytn;
class ZkSync extends tatum_1.TatumSdkChain {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
        this.fee = typedi_1.Container.of(id).get(fee_1.FeeEvm);
        this.ipfs = typedi_1.Container.of(id).get(ipfs_1.Ipfs);
        this.rates = typedi_1.Container.of(id).get(rate_1.Rates);
    }
}
exports.ZkSync = ZkSync;
// Full support for chains
class Ethereum extends FullEvm {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.Ethereum = Ethereum;
class Polygon extends FullEvm {
}
exports.Polygon = Polygon;
class Celo extends FullEvm {
}
exports.Celo = Celo;
class BinanceSmartChain extends FullEvm {
}
exports.BinanceSmartChain = BinanceSmartChain;
//# sourceMappingURL=tatum.evm.js.map
import { JsonRpcResponse } from '../../../dto';
import { PostI } from '../../../dto/PostI';
import { AbciQuery, Blockchain, BnbRpcInterface, Broadcast, Height, Tx, TxSearch } from '../../../dto/rpc/BnbRpcSuite';
export declare abstract class AbstractBnbRpc implements BnbRpcInterface {
    protected abstract post<T>(post: PostI): Promise<T>;
    sendRpcCall<T, U>(method: string, params?: T): Promise<U>;
    status(): Promise<JsonRpcResponse<any>>;
    abciInfo(): Promise<JsonRpcResponse<any>>;
    abciQuery(params: AbciQuery): Promise<JsonRpcResponse<any>>;
    block(params?: Height): Promise<JsonRpcResponse<any>>;
    blockResult(params?: Height): Promise<JsonRpcResponse<any>>;
    blockchain(params?: Blockchain): Promise<JsonRpcResponse<any>>;
    commit(params?: Height): Promise<JsonRpcResponse<any>>;
    tx(params: Tx): Promise<JsonRpcResponse<any>>;
    broadcastTxAsync(params: Broadcast): Promise<JsonRpcResponse<any>>;
    broadcastTxCommit(params: Broadcast): Promise<JsonRpcResponse<any>>;
    broadcastTxSync(params: Broadcast): Promise<JsonRpcResponse<any>>;
    txSearch(params: TxSearch): Promise<JsonRpcResponse<any>>;
    validators(params: Height): Promise<JsonRpcResponse<any>>;
    unconfirmedTxs(params: {
        limit: string;
    }): Promise<JsonRpcResponse<any>>;
    genesis(): Promise<JsonRpcResponse<any>>;
    health(): Promise<JsonRpcResponse<any>>;
    netInfo(): Promise<JsonRpcResponse<any>>;
    numUnconfirmedTxs(): Promise<JsonRpcResponse<any>>;
}

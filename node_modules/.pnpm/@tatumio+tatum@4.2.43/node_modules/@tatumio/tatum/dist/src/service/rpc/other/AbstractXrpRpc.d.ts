import { AccountChannelsOptions, AccountInfoOptions, AccountLinesOptions, AccountObjectsOptions, AccountTxOptions, AutoFilling, BookOffersOptions, Currency, CurrencyAmount, FailOption, GatewayBalancesOptions, Ledger, LedgerBinaryOption, LedgerEntryOptions, LedgerOptions, NorippleCheckOptions, Pagination, RipplePathFindOptions, Secrets, StrictOption, Transaction, TxJson, TxOptions, TypeOption, XrpRpcInterface } from '../../../dto';
export declare abstract class AbstractXrpRpc implements XrpRpcInterface {
    protected abstract rpcCall<T>(method: string, params?: unknown[]): Promise<T>;
    accountChannels(account: string, options?: AccountChannelsOptions): Promise<any>;
    accountCurrencies(account: string, options?: Ledger & StrictOption): Promise<any>;
    accountInfo(account: string, options?: AccountInfoOptions): Promise<any>;
    accountLines(account: string, options?: AccountLinesOptions): Promise<any>;
    accountNfts(account: string, options?: Ledger & Pagination): Promise<any>;
    accountObjects(account: string, options?: AccountObjectsOptions): Promise<any>;
    accountOffers(account: string, options?: Ledger & Pagination & StrictOption): Promise<any>;
    accountTx(account: string, options?: AccountTxOptions): Promise<any>;
    gatewayBalances(account: string, options?: GatewayBalancesOptions): Promise<any>;
    norippleCheck(account: string, role: string, options?: NorippleCheckOptions): Promise<any>;
    ledger(options?: LedgerOptions): Promise<any>;
    ledgerClosed(): Promise<any>;
    ledgerCurrent(): Promise<any>;
    ledgerData(options?: Ledger & LedgerBinaryOption & Pagination & TypeOption): Promise<any>;
    ledgerEntry(options?: LedgerEntryOptions): Promise<any>;
    submit(tx: Transaction, options?: Secrets & FailOption & AutoFilling): Promise<any>;
    submitMultisigned(txJson: TxJson, options?: FailOption): Promise<any>;
    transactionEntry(txHash: string, options?: Ledger): Promise<any>;
    tx(transaction: string, options?: TxOptions): Promise<any>;
    txHistory(start: number): Promise<any>;
    sign(txJson: TxJson, options?: Secrets & AutoFilling): Promise<any>;
    signFor(account: string, txJson: TxJson, options?: Secrets): Promise<any>;
    bookOffers(takerGets: Currency, takerPays: Currency, options?: BookOffersOptions): Promise<any>;
    depositAuthorized(sourceAccount: string, destinationAccount: string, options?: Ledger): Promise<any>;
    nftBuyOffers(nftId: string, options?: Ledger & Pagination): Promise<any>;
    nftSellOffers(nftId: string, options?: Ledger & Pagination): Promise<any>;
    ripplePathFind(sourceAccount: string, destinationAccount: string, destinationAmount: CurrencyAmount, options?: RipplePathFindOptions): Promise<any>;
    channelAuthorize(amount: string, channelId: string, options?: Secrets): Promise<any>;
    channelVerify(amount: string, channelId: string, publicKey: string, signature: string): Promise<any>;
    fee(): Promise<any>;
    serverInfo(): Promise<any>;
    serverState(): Promise<any>;
    manifest(publicKey: string): Promise<any>;
    ping(): Promise<any>;
    random(): Promise<any>;
}

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TatumApi = void 0;
const typedi_1 = require("typedi");
const tatum_connector_1 = require("../connector/tatum.connector");
let TatumApi = class TatumApi {
    constructor(id) {
        this.id = id;
        this.connector = typedi_1.Container.of(this.id).get(tatum_connector_1.TatumConnector);
    }
    async getTokensFromCollection(params) {
        const { result } = await this.connector.get({
            path: `data/collections`,
            params,
        });
        return result;
    }
    async getTokenMetadata(params) {
        const { result } = await this.connector.get({
            path: `data/metadata`,
            params,
        });
        return result;
    }
    async getBalancesOfAddresses(params) {
        const { result } = await this.connector.get({
            path: `data/balances`,
            params,
        });
        return result;
    }
    async getOwnersOfToken(params) {
        const { result } = await this.connector.get({
            path: `data/owners`,
            params,
        });
        return result;
    }
    checkOwner(params) {
        return this.connector.get({
            path: `data/owners/address`,
            params,
        });
    }
    async getTransactions(params) {
        const { result } = await this.connector.get({
            path: `data/transactions`,
            params,
        });
        return result;
    }
    async getTransactionsByHash(params) {
        const { result } = await this.connector.get({
            path: `data/transactions`,
            params,
        });
        return result;
    }
    async getEvents(params) {
        const { result } = await this.connector.get({
            path: `data/events`,
            params,
        });
        return result;
    }
    getBlocks(params) {
        return this.connector.get({
            path: `data/blocks`,
            params,
        });
    }
    getLatestBlock(params) {
        return this.connector.get({
            path: `data/blocks/latest`,
            params,
        });
    }
    getTokenInfo(params) {
        return this.connector.get({
            path: `data/tokens`,
            params,
        });
    }
    getUtxosByAddress(params) {
        return this.connector.get({
            path: `data/utxos`,
            params,
        });
    }
    createFungibleToken(body) {
        return this.connector.post({
            path: `contract/deploy`,
            body,
        });
    }
};
exports.TatumApi = TatumApi;
exports.TatumApi = TatumApi = __decorate([
    (0, typedi_1.Service)({
        factory: (data) => {
            return new TatumApi(data.id);
        },
        transient: true,
    }),
    __metadata("design:paramtypes", [String])
], TatumApi);
//# sourceMappingURL=tatum.api.js.map
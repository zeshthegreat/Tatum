"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLoadBalancerNetwork = exports.isEosNetwork = exports.isTronNetwork = exports.isSolanaNetwork = exports.isDataApiUtxoEnabledNetwork = exports.isDataApiEnabledNetwork = exports.isDataApiEvmEnabledNetwork = exports.isXrpNetwork = exports.isUtxoLoadBalancerNetwork = exports.isUtxoEstimateFeeNetwork = exports.isDogecoinLoadBalancedNetwork = exports.isUtxoLoadBalancerEstimateFeeNetwork = exports.isUtxoBasedNetwork = exports.isEvmBasedNetwork = exports.EOS_NETWORKS = exports.TRON_NETWORKS = exports.EVM_ARCHIVE_NON_ARCHIVE_BEACON_LOAD_BALANCER_NETWORKS = exports.EVM_ARCHIVE_NON_ARCHIVE_LOAD_BALANCER_NETWORKS = exports.LOAD_BALANCER_NETWORKS = exports.TON_NETWORKS = exports.CASPER_NETWORKS = exports.IOTA_NETWORKS = exports.BITCOIN_ELECTRS_NETWORKS = exports.IOTA_LOAD_BALANCER_NETWORKS = exports.ROSTRUM_LOAD_BALANCER_NETWORKS = exports.KADENA_LOAD_BALANCER_NETWORKS = exports.STELLAR_LOAD_BALANCER_NETWORKS = exports.COSMOS_NETWORKS = exports.CARDANO_NETWORKS = exports.ALGORAND_INDEXER_NETWORKS = exports.ALGORAND_ALGOD_NETWORKS = exports.TEZOS_NETWORKS = exports.BNB_LOAD_BALANCER_NETWORKS = exports.SOLANA_NETWORKS = exports.NATIVE_EVM_LOAD_BALANCER_NETWORKS = exports.XRP_LOAD_BALANCER_NETWORKS = exports.EOS_LOAD_BALANCER_NETWORKS = exports.TRON_LOAD_BALANCER_NETWORKS = exports.EVM_LOAD_BALANCER_NETWORKS = exports.ZK_SYNC_LOAD_BALANCER_NETWORKS = exports.DOGECOIN_LOAD_BALANCED_NETWORKS = exports.UTXO_LOAD_BALANCER_NETWORKS = exports.DATA_API_NETWORKS = exports.DATA_API_EVM_NETWORKS = exports.DATA_API_UTXO_NETWORKS = exports.UTXO_ESTIMATE_FEE_NETWORKS = exports.UTXO_LOAD_BALANCER_ESTIMATE_FEE_NETWORKS = exports.UTXO_BASED_NETWORKS = exports.EVM_BASED_NETWORKS = exports.Network = void 0;
exports.NETWORK_METADATA = exports.NATIVE_PREFIX_MAPPING = exports.MAPPED_NETWORK = exports.MappedNetwork = exports.isSameGetBlockNetwork = exports.isTonNetwork = exports.isCasperNetwork = exports.isZkSyncNetwork = exports.isElectrsNetwork = exports.isIotaNetwork = exports.isIotaLoadBalancerNetwork = exports.isStellarNetwork = exports.isStellarLoadBalancerNetwork = exports.isCosmosNetwork = exports.isCardanoNetwork = exports.isAlgorandIndexerNetwork = exports.isAlgorandAlgodNetwork = exports.isTezosNetwork = exports.isBnbLoadBalancerNetwork = exports.isNativeEvmLoadBalancerNetwork = exports.isRostrumLoadBalancerNetwork = exports.isKadenaLoadBalancerNetwork = exports.isXrpLoadBalancerNetwork = exports.isEosLoadBalancerNetwork = exports.isTronLoadBalancerNetwork = exports.isEvmArchiveNonArchiveBeaconLoadBalancerNetwork = exports.isEvmArchiveNonArchiveLoadBalancerNetwork = exports.isEvmLoadBalancerNetwork = void 0;
const Currency_1 = require("./Currency");
var Network;
(function (Network) {
    // Mainnets
    Network["ALGORAND_ALGOD"] = "algorand-mainnet-algod";
    Network["ALGORAND_INDEXER"] = "algorand-mainnet-indexer";
    Network["ARBITRUM_NOVA"] = "arb-nova-mainnet";
    Network["ARBITRUM_ONE"] = "arbitrum-one-mainnet";
    Network["AURORA"] = "aurora-mainnet";
    Network["AVALANCHE_C"] = "avalanche-c-mainnet";
    Network["AVALANCHE_P"] = "avax-p-mainnet";
    Network["AVALANCHE_X"] = "avax-x-mainnet";
    Network["BASE"] = "base-mainnet";
    Network["BINANCE_SMART_CHAIN"] = "bsc-mainnet";
    Network["BNB"] = "bnb-beacon-chain-mainnet";
    Network["BITCOIN"] = "bitcoin-mainnet";
    Network["BITCOIN_CASH"] = "bitcoin-cash-mainnet";
    Network["CARDANO_ROSETTA"] = "cardano-mainnet";
    Network["COSMOS_ROSETTA"] = "cosmos-mainnet";
    Network["CELO"] = "celo-mainnet";
    Network["CRONOS"] = "cronos-mainnet";
    Network["DOGECOIN"] = "doge-mainnet";
    Network["EOS"] = "eos-mainnet";
    Network["HORIZEN_EON"] = "eon-mainnet";
    Network["CHILIZ"] = "chiliz-mainnet";
    Network["ETHEREUM"] = "ethereum-mainnet";
    Network["ETHEREUM_CLASSIC"] = "ethereum-classic-mainnet";
    Network["FANTOM"] = "fantom-mainnet";
    Network["FLARE"] = "flare-mainnet";
    Network["FLOW"] = "flow-mainnet";
    Network["GNOSIS"] = "gno-mainnet";
    Network["HAQQ"] = "haqq-mainnet";
    Network["HARMONY_ONE_SHARD_0"] = "one-mainnet-s0";
    Network["IOTA"] = "iota-mainnet";
    Network["KADENA"] = "kadena-mainnet";
    Network["KLAYTN"] = "klaytn-mainnet";
    Network["KUCOIN"] = "kcs-mainnet";
    Network["LITECOIN"] = "litecoin-mainnet";
    Network["MULTIVERSX"] = "egld-mainnet";
    Network["NEAR"] = "near-mainnet";
    Network["OASIS"] = "oasis-mainnet";
    Network["OPTIMISM"] = "optimism-mainnet";
    Network["PALM"] = "palm-mainnet";
    Network["POLYGON"] = "polygon-mainnet";
    Network["POLKADOT"] = "dot-mainnet";
    Network["ROSTRUM"] = "bch-mainnet-rostrum";
    Network["RSK"] = "rsk-mainnet";
    Network["SOLANA"] = "solana-mainnet";
    Network["STELLAR"] = "stellar-mainnet";
    Network["TEZOS"] = "tezos-mainnet";
    Network["TRON"] = "tron-mainnet";
    Network["VECHAIN"] = "vechain-mainnet";
    Network["XINFIN"] = "xinfin-mainnet";
    Network["XRP"] = "ripple-mainnet";
    Network["ZCASH"] = "zcash-mainnet";
    Network["ZILLIQA"] = "zilliqa-mainnet";
    Network["BITCOIN_ELECTRS"] = "bitcoin-mainnet-electrs";
    Network["CASPER"] = "casper-mainnet";
    Network["TON"] = "ton-mainnet";
    Network["ZK_SYNC"] = "zksync-mainnet";
    // Testnets
    Network["ALGORAND_ALGOD_TESTNET"] = "algorand-testnet-algod";
    Network["ALGORAND_INDEXER_TESTNET"] = "algorand-testnet-indexer";
    Network["ARBITRUM_NOVA_TESTNET"] = "arb-testnet";
    Network["AURORA_TESTNET"] = "aurora-testnet";
    Network["AVALANCHE_C_TESTNET"] = "avax-testnet";
    Network["AVALANCHE_P_TESTNET"] = "avax-p-testnet";
    Network["AVALANCHE_X_TESTNET"] = "avax-x-testnet";
    Network["BASE_SEPOLIA"] = "base-sepolia";
    Network["BINANCE_SMART_CHAIN_TESTNET"] = "bsc-testnet";
    Network["BITCOIN_TESTNET"] = "bitcoin-testnet";
    Network["BITCOIN_CASH_TESTNET"] = "bch-testnet";
    Network["CARDANO_ROSETTA_PREPROD"] = "cardano-preprod";
    Network["CELO_ALFAJORES"] = "celo-testnet";
    Network["CRONOS_TESTNET"] = "cro-testnet";
    Network["DOGECOIN_TESTNET"] = "doge-testnet";
    Network["ETHEREUM_SEPOLIA"] = "ethereum-sepolia";
    Network["ETHEREUM_HOLESKY"] = "ethereum-holesky";
    Network["EOS_TESTNET"] = "eos-testnet";
    Network["FANTOM_TESTNET"] = "fantom-testnet";
    Network["FLARE_COSTON"] = "flare-coston";
    Network["FLARE_COSTON_2"] = "flare-coston2";
    Network["FLARE_SONGBIRD"] = "flare-songbird";
    Network["FLOW_TESTNET"] = "flow-testnet";
    Network["GNOSIS_TESTNET"] = "gno-testnet";
    Network["HAQQ_TESTNET"] = "haqq-testnet";
    Network["HARMONY_ONE_TESTNET_SHARD_0"] = "one-testnet-s0";
    Network["HORIZEN_EON_GOBI"] = "horizen-eon-gobi";
    Network["KADENA_TESTNET"] = "kadena-testnet";
    Network["KLAYTN_BAOBAB"] = "klaytn-baobab";
    Network["KUCOIN_TESTNET"] = "kcs-testnet";
    Network["LITECOIN_TESTNET"] = "litecoin-testnet";
    Network["MULTIVERSX_TESTNET"] = "egld-testnet";
    Network["NEAR_TESTNET"] = "near-testnet";
    Network["OASIS_TESTNET"] = "oasis-testnet";
    Network["OPTIMISM_TESTNET"] = "optimism-testnet";
    Network["PALM_TESTNET"] = "palm-testnet";
    Network["POLYGON_AMOY"] = "polygon-amoy";
    Network["POLKADOT_TESTNET"] = "dot-testnet";
    Network["RSK_TESTNET"] = "rsk-testnet";
    Network["SOLANA_DEVNET"] = "solana-devnet";
    Network["STELLAR_TESTNET"] = "stellar-testnet";
    Network["TEZOS_TESTNET"] = "tezos-testnet";
    Network["TRON_SHASTA"] = "tron-testnet";
    Network["VECHAIN_TESTNET"] = "vechain-testnet";
    Network["XINFIN_TESTNET"] = "xdc-testnet";
    Network["XRP_TESTNET"] = "ripple-testnet";
    Network["ZCASH_TESTNET"] = "zcash-testnet";
    Network["ZILLIQA_TESTNET"] = "zilliqa-testnet";
    Network["IOTA_TESTNET"] = "iota-testnet";
    Network["BITCOIN_ELECTRS_TESTNET"] = "bitcoin-testnet-electrs";
    Network["ROSTRUM_TESTNET"] = "bch-testnet-rostrum";
    Network["TON_TESTNET"] = "ton-testnet";
    Network["ZK_SYNC_TESTNET"] = "zksync-testnet";
})(Network || (exports.Network = Network = {}));
exports.EVM_BASED_NETWORKS = [
    Network.ETHEREUM,
    Network.ETHEREUM_SEPOLIA,
    Network.ETHEREUM_CLASSIC,
    Network.ETHEREUM_HOLESKY,
    Network.AVALANCHE_C,
    Network.AVALANCHE_C_TESTNET,
    Network.POLYGON,
    Network.POLYGON_AMOY,
    Network.GNOSIS,
    Network.GNOSIS_TESTNET,
    Network.FANTOM,
    Network.FANTOM_TESTNET,
    Network.AURORA,
    Network.AURORA_TESTNET,
    Network.CELO,
    Network.CELO_ALFAJORES,
    Network.BINANCE_SMART_CHAIN_TESTNET,
    Network.VECHAIN,
    Network.VECHAIN_TESTNET,
    Network.XINFIN,
    Network.XINFIN_TESTNET,
    Network.PALM,
    Network.PALM_TESTNET,
    Network.CRONOS,
    Network.CRONOS_TESTNET,
    Network.KUCOIN,
    Network.KUCOIN_TESTNET,
    Network.OASIS,
    Network.OASIS_TESTNET,
    Network.OPTIMISM,
    Network.OPTIMISM_TESTNET,
    Network.HARMONY_ONE_SHARD_0,
    Network.HARMONY_ONE_TESTNET_SHARD_0,
    Network.KLAYTN,
    Network.KLAYTN_BAOBAB,
    Network.FLARE_COSTON,
    Network.FLARE_COSTON_2,
    Network.FLARE,
    Network.FLARE_SONGBIRD,
    Network.HAQQ,
    Network.HAQQ_TESTNET,
    Network.ARBITRUM_NOVA,
    Network.ARBITRUM_NOVA_TESTNET,
    Network.ARBITRUM_ONE,
    Network.BINANCE_SMART_CHAIN,
    Network.HORIZEN_EON,
    Network.HORIZEN_EON_GOBI,
    Network.CHILIZ,
    Network.ZK_SYNC,
    Network.ZK_SYNC_TESTNET,
];
exports.UTXO_BASED_NETWORKS = [
    Network.BITCOIN,
    Network.BITCOIN_TESTNET,
    Network.BITCOIN_CASH,
    Network.BITCOIN_CASH_TESTNET,
    Network.LITECOIN,
    Network.LITECOIN_TESTNET,
    Network.ZCASH,
    Network.ZCASH_TESTNET,
];
exports.UTXO_LOAD_BALANCER_ESTIMATE_FEE_NETWORKS = [Network.BITCOIN_CASH];
exports.UTXO_ESTIMATE_FEE_NETWORKS = [Network.BITCOIN_CASH_TESTNET];
exports.DATA_API_UTXO_NETWORKS = [
    Network.BITCOIN,
    Network.BITCOIN_TESTNET,
    Network.LITECOIN,
    Network.LITECOIN_TESTNET,
    Network.CARDANO_ROSETTA,
    Network.CARDANO_ROSETTA_PREPROD,
    Network.DOGECOIN,
    Network.DOGECOIN_TESTNET,
];
exports.DATA_API_EVM_NETWORKS = [
    Network.ETHEREUM,
    Network.ETHEREUM_SEPOLIA,
    Network.POLYGON,
    Network.POLYGON_AMOY,
    Network.BINANCE_SMART_CHAIN,
    Network.BINANCE_SMART_CHAIN_TESTNET,
    Network.CELO,
    Network.CELO_ALFAJORES,
    Network.HORIZEN_EON,
];
exports.DATA_API_NETWORKS = [...exports.DATA_API_EVM_NETWORKS, Network.TEZOS];
exports.UTXO_LOAD_BALANCER_NETWORKS = [
    Network.BITCOIN,
    Network.BITCOIN_TESTNET,
    Network.LITECOIN,
    Network.LITECOIN_TESTNET,
    Network.ZCASH,
    Network.BITCOIN_CASH,
];
exports.DOGECOIN_LOAD_BALANCED_NETWORKS = [Network.DOGECOIN, Network.DOGECOIN_TESTNET];
exports.ZK_SYNC_LOAD_BALANCER_NETWORKS = [Network.ZK_SYNC, Network.ZK_SYNC_TESTNET];
exports.EVM_LOAD_BALANCER_NETWORKS = [
    Network.FLARE,
    Network.FLARE_COSTON,
    Network.FLARE_COSTON_2,
    Network.FLARE_SONGBIRD,
    Network.HAQQ,
    Network.HAQQ_TESTNET,
    Network.ETHEREUM,
    Network.ETHEREUM_SEPOLIA,
    Network.ETHEREUM_HOLESKY,
    Network.POLYGON,
    Network.POLYGON_AMOY,
    Network.OPTIMISM,
    Network.OPTIMISM_TESTNET,
    Network.HORIZEN_EON,
    Network.HORIZEN_EON_GOBI,
    Network.ARBITRUM_ONE,
    Network.BINANCE_SMART_CHAIN,
    Network.CHILIZ,
    Network.ETHEREUM_CLASSIC,
    Network.AVALANCHE_C,
    Network.CELO,
    Network.CELO_ALFAJORES,
    Network.XINFIN,
    Network.FANTOM,
    Network.CRONOS,
    Network.BASE,
    ...exports.ZK_SYNC_LOAD_BALANCER_NETWORKS,
];
exports.TRON_LOAD_BALANCER_NETWORKS = [Network.TRON];
exports.EOS_LOAD_BALANCER_NETWORKS = [Network.EOS];
exports.XRP_LOAD_BALANCER_NETWORKS = [Network.XRP, Network.XRP_TESTNET];
exports.NATIVE_EVM_LOAD_BALANCER_NETWORKS = [Network.KLAYTN, Network.KLAYTN_BAOBAB];
exports.SOLANA_NETWORKS = [Network.SOLANA, Network.SOLANA_DEVNET];
exports.BNB_LOAD_BALANCER_NETWORKS = [Network.BNB];
exports.TEZOS_NETWORKS = [Network.TEZOS, Network.TEZOS_TESTNET];
exports.ALGORAND_ALGOD_NETWORKS = [Network.ALGORAND_ALGOD, Network.ALGORAND_ALGOD_TESTNET];
exports.ALGORAND_INDEXER_NETWORKS = [Network.ALGORAND_INDEXER, Network.ALGORAND_INDEXER_TESTNET];
exports.CARDANO_NETWORKS = [
    Network.CARDANO_ROSETTA,
    Network.CARDANO_ROSETTA_PREPROD,
    Network.COSMOS_ROSETTA,
];
exports.COSMOS_NETWORKS = [
    Network.COSMOS_ROSETTA,
];
exports.STELLAR_LOAD_BALANCER_NETWORKS = [Network.STELLAR];
exports.KADENA_LOAD_BALANCER_NETWORKS = [Network.KADENA, Network.KADENA_TESTNET];
exports.ROSTRUM_LOAD_BALANCER_NETWORKS = [Network.ROSTRUM, Network.BITCOIN_ELECTRS, Network.ROSTRUM_TESTNET, Network.BITCOIN_ELECTRS_TESTNET];
exports.IOTA_LOAD_BALANCER_NETWORKS = [Network.IOTA];
exports.BITCOIN_ELECTRS_NETWORKS = [Network.BITCOIN_ELECTRS, Network.BITCOIN_ELECTRS_TESTNET];
exports.IOTA_NETWORKS = [Network.IOTA, Network.IOTA_TESTNET];
exports.CASPER_NETWORKS = [Network.CASPER];
exports.TON_NETWORKS = [Network.TON, Network.TON_TESTNET];
exports.LOAD_BALANCER_NETWORKS = [
    ...exports.UTXO_LOAD_BALANCER_NETWORKS,
    ...exports.DOGECOIN_LOAD_BALANCED_NETWORKS,
    ...exports.EVM_LOAD_BALANCER_NETWORKS,
    ...exports.TRON_LOAD_BALANCER_NETWORKS,
    ...exports.EOS_LOAD_BALANCER_NETWORKS,
    ...exports.XRP_LOAD_BALANCER_NETWORKS,
    ...exports.NATIVE_EVM_LOAD_BALANCER_NETWORKS,
    ...exports.SOLANA_NETWORKS,
    ...exports.BNB_LOAD_BALANCER_NETWORKS,
    ...exports.TEZOS_NETWORKS,
    ...exports.ALGORAND_ALGOD_NETWORKS,
    ...exports.ALGORAND_INDEXER_NETWORKS,
    ...exports.CARDANO_NETWORKS,
    ...exports.STELLAR_LOAD_BALANCER_NETWORKS,
    ...exports.KADENA_LOAD_BALANCER_NETWORKS,
    ...exports.ROSTRUM_LOAD_BALANCER_NETWORKS,
    ...exports.IOTA_LOAD_BALANCER_NETWORKS,
    ...exports.BITCOIN_ELECTRS_NETWORKS,
    ...exports.CASPER_NETWORKS,
];
exports.EVM_ARCHIVE_NON_ARCHIVE_LOAD_BALANCER_NETWORKS = [
    Network.ETHEREUM,
    Network.ETHEREUM_SEPOLIA,
    Network.HAQQ,
    Network.HAQQ_TESTNET,
    Network.POLYGON,
    Network.POLYGON_AMOY,
    Network.CHILIZ,
];
exports.EVM_ARCHIVE_NON_ARCHIVE_BEACON_LOAD_BALANCER_NETWORKS = [
    Network.ETHEREUM,
    Network.ETHEREUM_SEPOLIA,
    Network.ETHEREUM_HOLESKY,
];
exports.TRON_NETWORKS = [Network.TRON, Network.TRON_SHASTA];
exports.EOS_NETWORKS = [Network.EOS, Network.EOS_TESTNET];
const isEvmBasedNetwork = (network) => exports.EVM_BASED_NETWORKS.includes(network);
exports.isEvmBasedNetwork = isEvmBasedNetwork;
const isUtxoBasedNetwork = (network) => exports.UTXO_BASED_NETWORKS.includes(network);
exports.isUtxoBasedNetwork = isUtxoBasedNetwork;
const isUtxoLoadBalancerEstimateFeeNetwork = (network) => exports.UTXO_LOAD_BALANCER_ESTIMATE_FEE_NETWORKS.includes(network);
exports.isUtxoLoadBalancerEstimateFeeNetwork = isUtxoLoadBalancerEstimateFeeNetwork;
const isDogecoinLoadBalancedNetwork = (network) => exports.DOGECOIN_LOAD_BALANCED_NETWORKS.includes(network);
exports.isDogecoinLoadBalancedNetwork = isDogecoinLoadBalancedNetwork;
const isUtxoEstimateFeeNetwork = (network) => exports.UTXO_ESTIMATE_FEE_NETWORKS.includes(network);
exports.isUtxoEstimateFeeNetwork = isUtxoEstimateFeeNetwork;
const isUtxoLoadBalancerNetwork = (network) => exports.UTXO_LOAD_BALANCER_NETWORKS.includes(network);
exports.isUtxoLoadBalancerNetwork = isUtxoLoadBalancerNetwork;
const isXrpNetwork = (network) => [Network.XRP, Network.XRP_TESTNET].includes(network);
exports.isXrpNetwork = isXrpNetwork;
const isDataApiEvmEnabledNetwork = (network) => exports.DATA_API_EVM_NETWORKS.includes(network);
exports.isDataApiEvmEnabledNetwork = isDataApiEvmEnabledNetwork;
const isDataApiEnabledNetwork = (network) => exports.DATA_API_NETWORKS.includes(network);
exports.isDataApiEnabledNetwork = isDataApiEnabledNetwork;
const isDataApiUtxoEnabledNetwork = (network) => exports.DATA_API_UTXO_NETWORKS.includes(network);
exports.isDataApiUtxoEnabledNetwork = isDataApiUtxoEnabledNetwork;
const isSolanaNetwork = (network) => exports.SOLANA_NETWORKS.includes(network);
exports.isSolanaNetwork = isSolanaNetwork;
const isTronNetwork = (network) => exports.TRON_NETWORKS.includes(network);
exports.isTronNetwork = isTronNetwork;
const isEosNetwork = (network) => exports.EOS_NETWORKS.includes(network);
exports.isEosNetwork = isEosNetwork;
const isLoadBalancerNetwork = (network) => exports.LOAD_BALANCER_NETWORKS.includes(network);
exports.isLoadBalancerNetwork = isLoadBalancerNetwork;
const isEvmLoadBalancerNetwork = (network) => exports.EVM_LOAD_BALANCER_NETWORKS.includes(network);
exports.isEvmLoadBalancerNetwork = isEvmLoadBalancerNetwork;
const isEvmArchiveNonArchiveLoadBalancerNetwork = (network) => exports.EVM_ARCHIVE_NON_ARCHIVE_LOAD_BALANCER_NETWORKS.includes(network);
exports.isEvmArchiveNonArchiveLoadBalancerNetwork = isEvmArchiveNonArchiveLoadBalancerNetwork;
const isEvmArchiveNonArchiveBeaconLoadBalancerNetwork = (network) => exports.EVM_ARCHIVE_NON_ARCHIVE_BEACON_LOAD_BALANCER_NETWORKS.includes(network);
exports.isEvmArchiveNonArchiveBeaconLoadBalancerNetwork = isEvmArchiveNonArchiveBeaconLoadBalancerNetwork;
const isTronLoadBalancerNetwork = (network) => exports.TRON_LOAD_BALANCER_NETWORKS.includes(network);
exports.isTronLoadBalancerNetwork = isTronLoadBalancerNetwork;
const isEosLoadBalancerNetwork = (network) => exports.EOS_LOAD_BALANCER_NETWORKS.includes(network);
exports.isEosLoadBalancerNetwork = isEosLoadBalancerNetwork;
const isXrpLoadBalancerNetwork = (network) => exports.XRP_LOAD_BALANCER_NETWORKS.includes(network);
exports.isXrpLoadBalancerNetwork = isXrpLoadBalancerNetwork;
const isKadenaLoadBalancerNetwork = (network) => exports.KADENA_LOAD_BALANCER_NETWORKS.includes(network);
exports.isKadenaLoadBalancerNetwork = isKadenaLoadBalancerNetwork;
const isRostrumLoadBalancerNetwork = (network) => exports.ROSTRUM_LOAD_BALANCER_NETWORKS.includes(network);
exports.isRostrumLoadBalancerNetwork = isRostrumLoadBalancerNetwork;
const isNativeEvmLoadBalancerNetwork = (network) => exports.NATIVE_EVM_LOAD_BALANCER_NETWORKS.includes(network);
exports.isNativeEvmLoadBalancerNetwork = isNativeEvmLoadBalancerNetwork;
const isBnbLoadBalancerNetwork = (network) => exports.BNB_LOAD_BALANCER_NETWORKS.includes(network);
exports.isBnbLoadBalancerNetwork = isBnbLoadBalancerNetwork;
const isTezosNetwork = (network) => exports.TEZOS_NETWORKS.includes(network);
exports.isTezosNetwork = isTezosNetwork;
const isAlgorandAlgodNetwork = (network) => exports.ALGORAND_ALGOD_NETWORKS.includes(network);
exports.isAlgorandAlgodNetwork = isAlgorandAlgodNetwork;
const isAlgorandIndexerNetwork = (network) => exports.ALGORAND_INDEXER_NETWORKS.includes(network);
exports.isAlgorandIndexerNetwork = isAlgorandIndexerNetwork;
const isCardanoNetwork = (network) => exports.CARDANO_NETWORKS.includes(network);
exports.isCardanoNetwork = isCardanoNetwork;
const isCosmosNetwork = (network) => exports.COSMOS_NETWORKS.includes(network);
exports.isCosmosNetwork = isCosmosNetwork;
const isStellarLoadBalancerNetwork = (network) => exports.STELLAR_LOAD_BALANCER_NETWORKS.includes(network);
exports.isStellarLoadBalancerNetwork = isStellarLoadBalancerNetwork;
const isStellarNetwork = (network) => [Network.STELLAR, Network.STELLAR_TESTNET].includes(network);
exports.isStellarNetwork = isStellarNetwork;
const isIotaLoadBalancerNetwork = (network) => exports.IOTA_LOAD_BALANCER_NETWORKS.includes(network);
exports.isIotaLoadBalancerNetwork = isIotaLoadBalancerNetwork;
const isIotaNetwork = (network) => exports.IOTA_NETWORKS.includes(network);
exports.isIotaNetwork = isIotaNetwork;
const isElectrsNetwork = (network) => exports.BITCOIN_ELECTRS_NETWORKS.includes(network);
exports.isElectrsNetwork = isElectrsNetwork;
const isZkSyncNetwork = (network) => exports.ZK_SYNC_LOAD_BALANCER_NETWORKS.includes(network);
exports.isZkSyncNetwork = isZkSyncNetwork;
const isCasperNetwork = (network) => exports.CASPER_NETWORKS.includes(network);
exports.isCasperNetwork = isCasperNetwork;
const isTonNetwork = (network) => exports.TON_NETWORKS.includes(network);
exports.isTonNetwork = isTonNetwork;
const isSameGetBlockNetwork = (network) => (0, exports.isUtxoBasedNetwork)(network) ||
    (0, exports.isEvmBasedNetwork)(network) ||
    (0, exports.isTronNetwork)(network) ||
    (0, exports.isSolanaNetwork)(network);
exports.isSameGetBlockNetwork = isSameGetBlockNetwork;
var MappedNetwork;
(function (MappedNetwork) {
    MappedNetwork["HORIZEN_EON"] = "horizen-eon-mainnet";
    MappedNetwork["DOGECOIN"] = "dogecoin-mainnet";
    MappedNetwork["DOGECOIN_TESTNET"] = "dogecoin-testnet";
})(MappedNetwork || (exports.MappedNetwork = MappedNetwork = {}));
exports.MAPPED_NETWORK = {
    [Network.HORIZEN_EON]: MappedNetwork.HORIZEN_EON,
    [Network.DOGECOIN]: MappedNetwork.DOGECOIN,
    [Network.DOGECOIN_TESTNET]: MappedNetwork.DOGECOIN_TESTNET,
};
exports.NATIVE_PREFIX_MAPPING = {
    [Network.KLAYTN]: 'klay_',
    [Network.KLAYTN_BAOBAB]: 'klay_',
};
exports.NETWORK_METADATA = {
    [Network.ETHEREUM_SEPOLIA]: {
        currency: Currency_1.Currency.ETH,
        testnet: true,
        defaultTestnet: true,
        chainId: 11155111,
    },
    [Network.ETHEREUM_HOLESKY]: {
        currency: Currency_1.Currency.ETH,
        testnet: true,
        chainId: 17000,
    },
    [Network.ETHEREUM]: {
        currency: Currency_1.Currency.ETH,
        testnet: false,
        defaultMainnet: true,
        chainId: 1,
    },
    [Network.POLYGON_AMOY]: {
        currency: Currency_1.Currency.MATIC,
        testnet: true,
        defaultTestnet: true,
        chainId: 80002,
    },
    [Network.POLYGON]: {
        currency: Currency_1.Currency.MATIC,
        testnet: false,
        defaultMainnet: true,
        chainId: 137,
    },
    [Network.KADENA]: {
        currency: Currency_1.Currency.KADENA,
        testnet: false,
        defaultMainnet: true,
    },
    [Network.KADENA_TESTNET]: {
        currency: Currency_1.Currency.KADENA,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.KLAYTN_BAOBAB]: {
        currency: Currency_1.Currency.KLAY,
        testnet: true,
        defaultTestnet: true,
        chainId: 1001,
    },
    [Network.KLAYTN]: {
        currency: Currency_1.Currency.KLAY,
        testnet: false,
        defaultMainnet: true,
        chainId: 8217,
    },
    [Network.SOLANA_DEVNET]: {
        currency: Currency_1.Currency.SOL,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.SOLANA]: {
        currency: Currency_1.Currency.SOL,
        testnet: false,
        defaultMainnet: true,
    },
    [Network.CELO]: {
        currency: Currency_1.Currency.CELO,
        testnet: false,
        chainId: 42220,
    },
    [Network.CELO_ALFAJORES]: {
        currency: Currency_1.Currency.CELO,
        testnet: true,
        defaultTestnet: true,
        chainId: 44787,
    },
    [Network.ALGORAND_ALGOD_TESTNET]: {
        currency: Currency_1.Currency.ALGO,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.ALGORAND_ALGOD]: {
        currency: Currency_1.Currency.ALGO,
        testnet: false,
        defaultMainnet: true,
    },
    [Network.ALGORAND_INDEXER_TESTNET]: {
        currency: Currency_1.Currency.ALGO,
        testnet: true,
    },
    [Network.ALGORAND_INDEXER]: {
        currency: Currency_1.Currency.ALGO,
        testnet: false,
    },
    [Network.BITCOIN]: {
        currency: Currency_1.Currency.BTC,
        testnet: false,
    },
    [Network.BITCOIN_TESTNET]: {
        currency: Currency_1.Currency.BTC,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.LITECOIN]: {
        currency: Currency_1.Currency.LTC,
        testnet: false,
    },
    [Network.LITECOIN_TESTNET]: {
        currency: Currency_1.Currency.LTC,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.CARDANO_ROSETTA]: {
        currency: Currency_1.Currency.ADA,
        testnet: false,
        defaultMainnet: true,
    },
    [Network.CARDANO_ROSETTA_PREPROD]: {
        currency: Currency_1.Currency.ADA,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.COSMOS_ROSETTA]: {
        currency: Currency_1.Currency.ATOM,
        testnet: false,
        defaultMainnet: true,
    },
    [Network.VECHAIN_TESTNET]: {
        currency: Currency_1.Currency.VET,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.VECHAIN]: {
        currency: Currency_1.Currency.VET,
        testnet: false,
    },
    [Network.XRP]: {
        currency: Currency_1.Currency.XRP,
        testnet: false,
    },
    [Network.XRP_TESTNET]: {
        currency: Currency_1.Currency.XRP,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.FLOW]: {
        currency: Currency_1.Currency.FLOW,
        testnet: false,
    },
    [Network.FLOW_TESTNET]: {
        currency: Currency_1.Currency.FLOW,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.XINFIN]: {
        currency: Currency_1.Currency.XDC,
        testnet: false,
        chainId: 50,
    },
    [Network.XINFIN_TESTNET]: {
        currency: Currency_1.Currency.XDC,
        testnet: true,
        defaultTestnet: true,
        chainId: 51,
    },
    [Network.TRON]: {
        currency: Currency_1.Currency.TRON,
        testnet: false,
        chainId: 728126428,
    },
    [Network.TRON_SHASTA]: {
        currency: Currency_1.Currency.TRON,
        testnet: true,
        defaultTestnet: true,
        chainId: 2494104990,
    },
    [Network.BINANCE_SMART_CHAIN]: {
        currency: Currency_1.Currency.BSC,
        testnet: false,
        defaultMainnet: true,
        chainId: 56,
    },
    [Network.BINANCE_SMART_CHAIN_TESTNET]: {
        currency: Currency_1.Currency.BSC,
        testnet: true,
        defaultTestnet: true,
        chainId: 97,
    },
    [Network.BITCOIN_CASH]: {
        currency: Currency_1.Currency.BCH,
        testnet: false,
    },
    [Network.BITCOIN_CASH_TESTNET]: {
        currency: Currency_1.Currency.BCH,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.STELLAR]: {
        currency: Currency_1.Currency.XLM,
        testnet: false,
    },
    [Network.STELLAR_TESTNET]: {
        currency: Currency_1.Currency.XLM,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.BNB]: {
        currency: Currency_1.Currency.BNB,
        testnet: false,
        defaultMainnet: true,
    },
    [Network.DOGECOIN]: {
        currency: Currency_1.Currency.DOGE,
        testnet: false,
    },
    [Network.DOGECOIN_TESTNET]: {
        currency: Currency_1.Currency.DOGE,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.HARMONY_ONE_SHARD_0]: {
        currency: Currency_1.Currency.ONE,
        testnet: false,
        chainId: 1666600000,
    },
    [Network.HARMONY_ONE_TESTNET_SHARD_0]: {
        currency: Currency_1.Currency.ONE,
        testnet: true,
        defaultTestnet: true,
        chainId: 1666700000,
    },
    [Network.EOS]: {
        currency: Currency_1.Currency.EOS,
        testnet: false,
        defaultMainnet: true,
    },
    [Network.EOS_TESTNET]: {
        currency: Currency_1.Currency.EOS,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.AVALANCHE_C]: {
        currency: Currency_1.Currency.AVAX,
        testnet: false,
        defaultMainnet: true,
        chainId: 43114,
    },
    [Network.AVALANCHE_C_TESTNET]: {
        currency: Currency_1.Currency.AVAX,
        testnet: true,
        defaultTestnet: true,
        chainId: 43113,
    },
    [Network.AVALANCHE_X]: {
        currency: Currency_1.Currency.AVAX,
        testnet: false,
    },
    [Network.AVALANCHE_X_TESTNET]: {
        currency: Currency_1.Currency.AVAX,
        testnet: true,
    },
    [Network.AVALANCHE_P]: {
        currency: Currency_1.Currency.AVAX,
        testnet: false,
    },
    [Network.AVALANCHE_P_TESTNET]: {
        currency: Currency_1.Currency.AVAX,
        testnet: true,
    },
    [Network.FANTOM]: {
        currency: Currency_1.Currency.FTM,
        testnet: false,
        chainId: 250,
    },
    [Network.FANTOM_TESTNET]: {
        currency: Currency_1.Currency.FTM,
        testnet: true,
        defaultTestnet: true,
        chainId: 4002,
    },
    [Network.ARBITRUM_NOVA]: {
        currency: Currency_1.Currency.ARB,
        testnet: false,
        defaultMainnet: true,
        chainId: 42170,
    },
    [Network.ARBITRUM_NOVA_TESTNET]: {
        currency: Currency_1.Currency.ARB,
        testnet: true,
        defaultTestnet: true,
        chainId: 421614,
    },
    [Network.ARBITRUM_ONE]: {
        currency: Currency_1.Currency.ARB,
        testnet: false,
        chainId: 42161,
    },
    [Network.OPTIMISM]: {
        currency: Currency_1.Currency.OP,
        testnet: false,
        defaultMainnet: true,
        chainId: 10,
    },
    [Network.OPTIMISM_TESTNET]: {
        currency: Currency_1.Currency.OP,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.NEAR]: {
        currency: Currency_1.Currency.NEAR,
        testnet: false,
    },
    [Network.NEAR_TESTNET]: {
        currency: Currency_1.Currency.NEAR,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.RSK]: {
        currency: Currency_1.Currency.RSK,
        testnet: false,
    },
    [Network.RSK_TESTNET]: {
        currency: Currency_1.Currency.RSK,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.AURORA]: {
        currency: Currency_1.Currency.AURORA,
        testnet: false,
        chainId: 1313161554,
    },
    [Network.AURORA_TESTNET]: {
        currency: Currency_1.Currency.AURORA,
        testnet: true,
        defaultTestnet: true,
        chainId: 1313161555,
    },
    [Network.OASIS]: {
        currency: Currency_1.Currency.XOS,
        testnet: false,
        chainId: 42262,
    },
    [Network.OASIS_TESTNET]: {
        currency: Currency_1.Currency.XOS,
        testnet: true,
        defaultTestnet: true,
        chainId: 42261,
    },
    [Network.TEZOS]: {
        currency: Currency_1.Currency.TEZOS,
        testnet: false,
        defaultMainnet: true,
    },
    [Network.TEZOS_TESTNET]: {
        currency: Currency_1.Currency.TEZOS,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.ZCASH]: {
        currency: Currency_1.Currency.ZCASH,
        alternativeCurrencies: [Currency_1.Currency.ZEC],
        testnet: false,
    },
    [Network.ZCASH_TESTNET]: {
        currency: Currency_1.Currency.ZCASH,
        alternativeCurrencies: [Currency_1.Currency.ZEC],
        testnet: true,
        defaultTestnet: true,
    },
    [Network.PALM]: {
        currency: Currency_1.Currency.PALM,
        testnet: false,
    },
    [Network.PALM_TESTNET]: {
        currency: Currency_1.Currency.PALM,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.ZILLIQA]: {
        currency: Currency_1.Currency.ZIL,
        testnet: false,
    },
    [Network.ZILLIQA_TESTNET]: {
        currency: Currency_1.Currency.ZIL,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.ETHEREUM_CLASSIC]: {
        currency: Currency_1.Currency.ETC,
        testnet: false,
        defaultMainnet: true,
        chainId: 61,
    },
    [Network.FLARE]: {
        currency: Currency_1.Currency.FLR,
        testnet: false,
        chainId: 14,
        defaultMainnet: true,
    },
    [Network.FLARE_COSTON_2]: {
        currency: Currency_1.Currency.FLR,
        testnet: true,
        chainId: 114,
    },
    [Network.FLARE_SONGBIRD]: {
        currency: Currency_1.Currency.SGB,
        testnet: true,
        chainId: 19,
    },
    [Network.FLARE_COSTON]: {
        currency: Currency_1.Currency.SGB,
        testnet: true,
        defaultTestnet: true,
        chainId: 16,
    },
    [Network.HAQQ]: {
        currency: Currency_1.Currency.ISLM,
        testnet: false,
        chainId: 11235,
    },
    [Network.HAQQ_TESTNET]: {
        currency: Currency_1.Currency.ISLM,
        testnet: true,
        defaultTestnet: true,
        chainId: 54211,
    },
    [Network.HORIZEN_EON]: {
        currency: Currency_1.Currency.ZEN,
        testnet: false,
        chainId: 7332,
    },
    [Network.HORIZEN_EON_GOBI]: {
        currency: Currency_1.Currency.ZEN,
        testnet: true,
        defaultTestnet: true,
        chainId: 1663,
    },
    [Network.CHILIZ]: {
        currency: Currency_1.Currency.CHZ,
        testnet: false,
        chainId: 88888,
    },
    [Network.GNOSIS]: {
        currency: Currency_1.Currency.GNO,
        testnet: false,
        chainId: 100,
    },
    [Network.GNOSIS_TESTNET]: {
        currency: Currency_1.Currency.GNO,
        testnet: true,
        chainId: 69,
    },
    [Network.CRONOS]: {
        currency: Currency_1.Currency.CRO,
        testnet: false,
        chainId: 25,
        defaultMainnet: true,
    },
    [Network.CRONOS_TESTNET]: {
        currency: Currency_1.Currency.CRO,
        testnet: true,
        chainId: 338,
        defaultTestnet: true,
    },
    [Network.KUCOIN]: {
        currency: Currency_1.Currency.KCS,
        testnet: false,
        chainId: 321,
    },
    [Network.KUCOIN_TESTNET]: {
        currency: Currency_1.Currency.KCS,
        testnet: true,
        chainId: 322,
    },
    [Network.MULTIVERSX]: {
        currency: Currency_1.Currency.EGLD,
        testnet: false,
        chainId: 1,
    },
    [Network.MULTIVERSX_TESTNET]: {
        currency: Currency_1.Currency.EGLD,
        testnet: true,
        chainId: 2,
    },
    [Network.POLKADOT]: {
        currency: Currency_1.Currency.DOT,
        testnet: false,
        chainId: 0,
    },
    [Network.POLKADOT_TESTNET]: {
        currency: Currency_1.Currency.DOT,
        testnet: true,
        chainId: 0,
    },
    [Network.BASE]: {
        currency: Currency_1.Currency.BASE,
        testnet: false,
        chainId: 8453,
    },
    [Network.BASE_SEPOLIA]: {
        currency: Currency_1.Currency.BASE,
        defaultTestnet: true,
        testnet: true,
        chainId: 84532,
    },
    [Network.ROSTRUM]: {
        currency: Currency_1.Currency.BCH,
        testnet: false,
    },
    [Network.ROSTRUM_TESTNET]: {
        currency: Currency_1.Currency.BCH,
        testnet: true,
    },
    [Network.IOTA]: {
        currency: Currency_1.Currency.IOTA,
        testnet: false,
        defaultMainnet: true,
    },
    [Network.IOTA_TESTNET]: {
        currency: Currency_1.Currency.IOTA,
        testnet: true,
        defaultTestnet: true,
    },
    [Network.BITCOIN_ELECTRS]: {
        currency: Currency_1.Currency.BTC,
        testnet: false,
    },
    [Network.BITCOIN_ELECTRS_TESTNET]: {
        currency: Currency_1.Currency.BTC,
        testnet: true,
    },
    [Network.CASPER]: {
        currency: Currency_1.Currency.CSPR,
        testnet: false,
    },
    [Network.TON]: {
        currency: Currency_1.Currency.TON,
        testnet: false,
    },
    [Network.TON_TESTNET]: {
        currency: Currency_1.Currency.TON,
        testnet: true
    },
    [Network.ZK_SYNC]: {
        currency: Currency_1.Currency.ZKS,
        testnet: false,
        chainId: 324
    },
    [Network.ZK_SYNC_TESTNET]: {
        currency: Currency_1.Currency.ZKS,
        testnet: true,
        chainId: 300
    },
};
//# sourceMappingURL=Network.js.map
import { Currency } from './Currency';
export declare enum Network {
    ALGORAND_ALGOD = "algorand-mainnet-algod",
    ALGORAND_INDEXER = "algorand-mainnet-indexer",
    ARBITRUM_NOVA = "arb-nova-mainnet",
    ARBITRUM_ONE = "arbitrum-one-mainnet",
    AURORA = "aurora-mainnet",
    AVALANCHE_C = "avalanche-c-mainnet",
    AVALANCHE_P = "avax-p-mainnet",
    AVALANCHE_X = "avax-x-mainnet",
    BASE = "base-mainnet",
    BINANCE_SMART_CHAIN = "bsc-mainnet",
    BNB = "bnb-beacon-chain-mainnet",
    BITCOIN = "bitcoin-mainnet",
    BITCOIN_CASH = "bitcoin-cash-mainnet",
    CARDANO_ROSETTA = "cardano-mainnet",
    COSMOS_ROSETTA = "cosmos-mainnet",
    CELO = "celo-mainnet",
    CRONOS = "cronos-mainnet",
    DOGECOIN = "doge-mainnet",
    EOS = "eos-mainnet",
    HORIZEN_EON = "eon-mainnet",
    CHILIZ = "chiliz-mainnet",
    ETHEREUM = "ethereum-mainnet",
    ETHEREUM_CLASSIC = "ethereum-classic-mainnet",
    FANTOM = "fantom-mainnet",
    FLARE = "flare-mainnet",
    FLOW = "flow-mainnet",
    GNOSIS = "gno-mainnet",
    HAQQ = "haqq-mainnet",
    HARMONY_ONE_SHARD_0 = "one-mainnet-s0",
    IOTA = "iota-mainnet",
    KADENA = "kadena-mainnet",
    KLAYTN = "klaytn-mainnet",
    KUCOIN = "kcs-mainnet",
    LITECOIN = "litecoin-mainnet",
    MULTIVERSX = "egld-mainnet",
    NEAR = "near-mainnet",
    OASIS = "oasis-mainnet",
    OPTIMISM = "optimism-mainnet",
    PALM = "palm-mainnet",
    POLYGON = "polygon-mainnet",
    POLKADOT = "dot-mainnet",
    ROSTRUM = "bch-mainnet-rostrum",
    RSK = "rsk-mainnet",
    SOLANA = "solana-mainnet",
    STELLAR = "stellar-mainnet",
    TEZOS = "tezos-mainnet",
    TRON = "tron-mainnet",
    VECHAIN = "vechain-mainnet",
    XINFIN = "xinfin-mainnet",
    XRP = "ripple-mainnet",
    ZCASH = "zcash-mainnet",
    ZILLIQA = "zilliqa-mainnet",
    BITCOIN_ELECTRS = "bitcoin-mainnet-electrs",
    CASPER = "casper-mainnet",
    TON = "ton-mainnet",
    ZK_SYNC = "zksync-mainnet",
    ALGORAND_ALGOD_TESTNET = "algorand-testnet-algod",
    ALGORAND_INDEXER_TESTNET = "algorand-testnet-indexer",
    ARBITRUM_NOVA_TESTNET = "arb-testnet",
    AURORA_TESTNET = "aurora-testnet",
    AVALANCHE_C_TESTNET = "avax-testnet",
    AVALANCHE_P_TESTNET = "avax-p-testnet",
    AVALANCHE_X_TESTNET = "avax-x-testnet",
    BASE_SEPOLIA = "base-sepolia",
    BINANCE_SMART_CHAIN_TESTNET = "bsc-testnet",
    BITCOIN_TESTNET = "bitcoin-testnet",
    BITCOIN_CASH_TESTNET = "bch-testnet",
    CARDANO_ROSETTA_PREPROD = "cardano-preprod",
    CELO_ALFAJORES = "celo-testnet",
    CRONOS_TESTNET = "cro-testnet",
    DOGECOIN_TESTNET = "doge-testnet",
    ETHEREUM_SEPOLIA = "ethereum-sepolia",
    ETHEREUM_HOLESKY = "ethereum-holesky",
    EOS_TESTNET = "eos-testnet",
    FANTOM_TESTNET = "fantom-testnet",
    FLARE_COSTON = "flare-coston",
    FLARE_COSTON_2 = "flare-coston2",
    FLARE_SONGBIRD = "flare-songbird",
    FLOW_TESTNET = "flow-testnet",
    GNOSIS_TESTNET = "gno-testnet",
    HAQQ_TESTNET = "haqq-testnet",
    HARMONY_ONE_TESTNET_SHARD_0 = "one-testnet-s0",
    HORIZEN_EON_GOBI = "horizen-eon-gobi",
    KADENA_TESTNET = "kadena-testnet",
    KLAYTN_BAOBAB = "klaytn-baobab",
    KUCOIN_TESTNET = "kcs-testnet",
    LITECOIN_TESTNET = "litecoin-testnet",
    MULTIVERSX_TESTNET = "egld-testnet",
    NEAR_TESTNET = "near-testnet",
    OASIS_TESTNET = "oasis-testnet",
    OPTIMISM_TESTNET = "optimism-testnet",
    PALM_TESTNET = "palm-testnet",
    POLYGON_AMOY = "polygon-amoy",
    POLKADOT_TESTNET = "dot-testnet",
    RSK_TESTNET = "rsk-testnet",
    SOLANA_DEVNET = "solana-devnet",
    STELLAR_TESTNET = "stellar-testnet",
    TEZOS_TESTNET = "tezos-testnet",
    TRON_SHASTA = "tron-testnet",
    VECHAIN_TESTNET = "vechain-testnet",
    XINFIN_TESTNET = "xdc-testnet",
    XRP_TESTNET = "ripple-testnet",
    ZCASH_TESTNET = "zcash-testnet",
    ZILLIQA_TESTNET = "zilliqa-testnet",
    IOTA_TESTNET = "iota-testnet",
    BITCOIN_ELECTRS_TESTNET = "bitcoin-testnet-electrs",
    ROSTRUM_TESTNET = "bch-testnet-rostrum",
    TON_TESTNET = "ton-testnet",
    ZK_SYNC_TESTNET = "zksync-testnet"
}
export declare const EVM_BASED_NETWORKS: Network[];
export declare const UTXO_BASED_NETWORKS: Network[];
export declare const UTXO_LOAD_BALANCER_ESTIMATE_FEE_NETWORKS: Network[];
export declare const UTXO_ESTIMATE_FEE_NETWORKS: Network[];
export declare const DATA_API_UTXO_NETWORKS: Network[];
export declare const DATA_API_EVM_NETWORKS: Network[];
export declare const DATA_API_NETWORKS: Network[];
export declare const UTXO_LOAD_BALANCER_NETWORKS: Network[];
export declare const DOGECOIN_LOAD_BALANCED_NETWORKS: Network[];
export declare const ZK_SYNC_LOAD_BALANCER_NETWORKS: Network[];
export declare const EVM_LOAD_BALANCER_NETWORKS: Network[];
export declare const TRON_LOAD_BALANCER_NETWORKS: Network[];
export declare const EOS_LOAD_BALANCER_NETWORKS: Network[];
export declare const XRP_LOAD_BALANCER_NETWORKS: Network[];
export declare const NATIVE_EVM_LOAD_BALANCER_NETWORKS: Network[];
export declare const SOLANA_NETWORKS: Network[];
export declare const BNB_LOAD_BALANCER_NETWORKS: Network[];
export declare const TEZOS_NETWORKS: Network[];
export declare const ALGORAND_ALGOD_NETWORKS: Network[];
export declare const ALGORAND_INDEXER_NETWORKS: Network[];
export declare const CARDANO_NETWORKS: Network[];
export declare const COSMOS_NETWORKS: Network[];
export declare const STELLAR_LOAD_BALANCER_NETWORKS: Network[];
export declare const KADENA_LOAD_BALANCER_NETWORKS: Network[];
export declare const ROSTRUM_LOAD_BALANCER_NETWORKS: Network[];
export declare const IOTA_LOAD_BALANCER_NETWORKS: Network[];
export declare const BITCOIN_ELECTRS_NETWORKS: Network[];
export declare const IOTA_NETWORKS: Network[];
export declare const CASPER_NETWORKS: Network[];
export declare const TON_NETWORKS: Network[];
export declare const LOAD_BALANCER_NETWORKS: Network[];
export declare const EVM_ARCHIVE_NON_ARCHIVE_LOAD_BALANCER_NETWORKS: Network[];
export declare const EVM_ARCHIVE_NON_ARCHIVE_BEACON_LOAD_BALANCER_NETWORKS: Network[];
export declare const TRON_NETWORKS: Network[];
export declare const EOS_NETWORKS: Network[];
export declare const isEvmBasedNetwork: (network: Network) => boolean;
export declare const isUtxoBasedNetwork: (network: Network) => boolean;
export declare const isUtxoLoadBalancerEstimateFeeNetwork: (network: Network) => boolean;
export declare const isDogecoinLoadBalancedNetwork: (network: Network) => boolean;
export declare const isUtxoEstimateFeeNetwork: (network: Network) => boolean;
export declare const isUtxoLoadBalancerNetwork: (network: Network) => boolean;
export declare const isXrpNetwork: (network: Network) => boolean;
export declare const isDataApiEvmEnabledNetwork: (network: Network) => boolean;
export declare const isDataApiEnabledNetwork: (network: Network) => boolean;
export declare const isDataApiUtxoEnabledNetwork: (network: Network) => boolean;
export declare const isSolanaNetwork: (network: Network) => boolean;
export declare const isTronNetwork: (network: Network) => boolean;
export declare const isEosNetwork: (network: Network) => boolean;
export declare const isLoadBalancerNetwork: (network: Network) => boolean;
export declare const isEvmLoadBalancerNetwork: (network: Network) => boolean;
export declare const isEvmArchiveNonArchiveLoadBalancerNetwork: (network: Network) => boolean;
export declare const isEvmArchiveNonArchiveBeaconLoadBalancerNetwork: (network: Network) => boolean;
export declare const isTronLoadBalancerNetwork: (network: Network) => boolean;
export declare const isEosLoadBalancerNetwork: (network: Network) => boolean;
export declare const isXrpLoadBalancerNetwork: (network: Network) => boolean;
export declare const isKadenaLoadBalancerNetwork: (network: Network) => boolean;
export declare const isRostrumLoadBalancerNetwork: (network: Network) => boolean;
export declare const isNativeEvmLoadBalancerNetwork: (network: Network) => boolean;
export declare const isBnbLoadBalancerNetwork: (network: Network) => boolean;
export declare const isTezosNetwork: (network: Network) => boolean;
export declare const isAlgorandAlgodNetwork: (network: Network) => boolean;
export declare const isAlgorandIndexerNetwork: (network: Network) => boolean;
export declare const isCardanoNetwork: (network: Network) => boolean;
export declare const isCosmosNetwork: (network: Network) => boolean;
export declare const isStellarLoadBalancerNetwork: (network: Network) => boolean;
export declare const isStellarNetwork: (network: Network) => boolean;
export declare const isIotaLoadBalancerNetwork: (network: Network) => boolean;
export declare const isIotaNetwork: (network: Network) => boolean;
export declare const isElectrsNetwork: (network: Network) => boolean;
export declare const isZkSyncNetwork: (network: Network) => boolean;
export declare const isCasperNetwork: (network: Network) => boolean;
export declare const isTonNetwork: (network: Network) => boolean;
export declare const isSameGetBlockNetwork: (network: Network) => boolean;
export declare enum MappedNetwork {
    HORIZEN_EON = "horizen-eon-mainnet",
    DOGECOIN = "dogecoin-mainnet",
    DOGECOIN_TESTNET = "dogecoin-testnet"
}
export declare const MAPPED_NETWORK: {
    "eon-mainnet": MappedNetwork;
    "doge-mainnet": MappedNetwork;
    "doge-testnet": MappedNetwork;
};
export declare const NATIVE_PREFIX_MAPPING: {
    [key: string]: string;
};
/**
 * Describes additional info about every chain in a system.
 * @param testnet - If true - chain is testnet.
 * @param currency - Currency of the chain.
 * @param alternativeCurrencies - Alternative currencies of the chain, for case we have few currencies meaning the same chain.
 * @param defaultTestnet - If true - this chain is default testnet among others for this currency.
 * @param defaultMainnet - If true - this chain is default mainnet among others for this currency.
 * @param chainId - Network id.
 */
export type NetworkMetadata = {
    testnet: boolean;
    currency: Currency;
    alternativeCurrencies?: Currency[];
    defaultTestnet?: boolean;
    defaultMainnet?: boolean;
    chainId?: number;
};
export declare const NETWORK_METADATA: Record<Network, NetworkMetadata>;

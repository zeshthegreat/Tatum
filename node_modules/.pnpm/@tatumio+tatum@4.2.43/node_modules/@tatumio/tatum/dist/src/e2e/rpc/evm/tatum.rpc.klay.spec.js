"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const service_1 = require("../../../service");
const evm_e2e_utils_1 = require("./evm.e2e.utils");
const run = async (network, chainId) => {
    describe('klay prefix', () => {
        it('klay_blockNumber', async () => {
            const tatum = await evm_e2e_utils_1.EvmE2eUtils.initTatum(network);
            const { result } = await tatum.rpc.blockNumber(true);
            await tatum.destroy();
            expect(result?.toNumber()).toBeGreaterThan(0);
        });
        it('klay_chainId', async () => {
            const tatum = await evm_e2e_utils_1.EvmE2eUtils.initTatum(network);
            const result = await tatum.rpc.chainId(true);
            await tatum.destroy();
            expect(result?.result?.toNumber()).toBe(chainId);
        });
        it('klay_gasPrice', async () => {
            const tatum = await evm_e2e_utils_1.EvmE2eUtils.initTatum(network);
            const { result } = await tatum.rpc.gasPrice(true);
            await tatum.destroy();
            expect(result?.toNumber()).toBeGreaterThan(0);
        });
        it('klay_getBlockByNumber', async () => {
            const tatum = await evm_e2e_utils_1.EvmE2eUtils.initTatum(network);
            const { result } = await tatum.rpc.blockNumber(true);
            const { result: block } = await tatum.rpc.getBlockByNumber(result.toNumber() - 1000, false, true);
            await tatum.destroy();
            expect(block.timestamp).toBeDefined();
            expect(block.size).toBeDefined();
        });
        it('web3_clientVersion', async () => {
            const tatum = await evm_e2e_utils_1.EvmE2eUtils.initTatum(network);
            const { result } = await tatum.rpc.clientVersion();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
    });
};
describe.each([
    { network: service_1.Network.KLAYTN, expected: { chainId: 8217 } },
    { network: service_1.Network.KLAYTN_BAOBAB, expected: { chainId: 1001 } },
])('RPC Klaytn', (network) => {
    const { network: networkName, expected } = network;
    describe(networkName, () => {
        run(networkName, expected.chainId);
    });
});
//# sourceMappingURL=tatum.rpc.klay.spec.js.map
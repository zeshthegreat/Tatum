{"version":3,"file":"signing.js","names":["_encoding","require","_address","_hash","_serialize","checkAndValidateADR36AminoSignDoc","signDoc","hasOnlyMsgSignData","msgs","Array","isArray","length","msg","type","chain_id","Error","memo","account_number","sequence","fee","gas","amount","concat","value","signer","isValidSeiAddress","data","rawData","Buffer","from","toString","makeADR36AminoSignDoc","verifyADR36AminoSignDoc","pubKey","signature","expectedSigner","compressedPubKeyToAddress","serializeAminoSignDoc","verifyDigest32","sha256","verifyADR36Amino","verifyArbitrary","exports","_ref","_asyncToGenerator2","_regenerator","mark","_callee","signerAddress","expectedMessage","signatureToVerify","wrap","_callee$","_context","prev","next","pub_key","abrupt","fromBase64","t0","console","log","stop","_x","_x2","_x3","apply","arguments"],"sources":["../../../../src/lib/utils/signing.ts"],"sourcesContent":["import { StdSignature, StdSignDoc } from '@cosmjs/amino';\nimport { fromBase64 } from '@cosmjs/encoding';\nimport { compressedPubKeyToAddress, isValidSeiAddress, verifyDigest32 } from './address';\nimport { sha256 } from './hash';\nimport { serializeAminoSignDoc } from './serialize';\n\nfunction checkAndValidateADR36AminoSignDoc(signDoc: StdSignDoc): boolean {\n\tconst hasOnlyMsgSignData = (() => {\n\t\tif (signDoc && signDoc.msgs && Array.isArray(signDoc.msgs) && signDoc.msgs.length === 1) {\n\t\t\tconst msg = signDoc.msgs[0];\n\t\t\treturn msg.type === 'sign/MsgSignData';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t})();\n\n\tif (!hasOnlyMsgSignData) {\n\t\treturn false;\n\t}\n\n\tif (signDoc.chain_id !== '') {\n\t\tthrow new Error('Chain id should be empty string for ADR-36 signing');\n\t}\n\n\tif (signDoc.memo !== '') {\n\t\tthrow new Error('Memo should be empty string for ADR-36 signing');\n\t}\n\n\tif (signDoc.account_number !== '0') {\n\t\tthrow new Error('Account number should be \"0\" for ADR-36 signing');\n\t}\n\n\tif (signDoc.sequence !== '0') {\n\t\tthrow new Error('Sequence should be \"0\" for ADR-36 signing');\n\t}\n\n\tif (signDoc.fee.gas !== '0') {\n\t\tthrow new Error('Gas should be \"0\" for ADR-36 signing');\n\t}\n\n\tif (signDoc.fee.amount.length !== 0) {\n\t\tthrow new Error('Fee amount should be empty array for ADR-36 signing');\n\t}\n\n\tconst msg = signDoc.msgs[0];\n\tif (msg.type !== 'sign/MsgSignData') {\n\t\tthrow new Error(`Invalid type of ADR-36 sign msg: ${msg.type}`);\n\t}\n\tif (!msg.value) {\n\t\tthrow new Error('Empty value in the msg');\n\t}\n\tconst signer = msg.value.signer;\n\tif (!signer) {\n\t\tthrow new Error('Empty signer in the ADR-36 msg');\n\t}\n\tisValidSeiAddress(signer);\n\tconst data = msg.value.data;\n\tif (!data) {\n\t\tthrow new Error('Empty data in the ADR-36 msg');\n\t}\n\tconst rawData = Buffer.from(data, 'base64');\n\t// Validate the data is encoded as base64.\n\tif (rawData.toString('base64') !== data) {\n\t\tthrow new Error('Data is not encoded by base64');\n\t}\n\tif (rawData.length === 0) {\n\t\tthrow new Error('Empty data in the ADR-36 msg');\n\t}\n\n\treturn true;\n}\n\nexport function makeADR36AminoSignDoc(signer: string, data: string | Uint8Array): StdSignDoc {\n\t// If data is already a base64 string, convert it to a Buffer and back to a string.\n\tdata = Buffer.from(data).toString('base64');\n\n\t//According to ADR-36 specifications https://github.com/cosmos/cosmos-sdk/blob/main/docs/architecture/adr-036-arbitrary-signature.md\n\treturn {\n\t\t// chain-id must be equal to “”\n\t\tchain_id: '',\n\t\t// must be invalid value\n\t\taccount_number: '0',\n\t\t// nonce, sequence number must be equal to 0\n\t\tsequence: '0',\n\t\tfee: {\n\t\t\t// fee gas must be equal to 0\n\t\t\tgas: '0',\n\t\t\t//fee amount must be an empty array\n\t\t\tamount: []\n\t\t},\n\t\tmsgs: [\n\t\t\t{\n\t\t\t\ttype: 'sign/MsgSignData',\n\t\t\t\tvalue: {\n\t\t\t\t\tsigner,\n\t\t\t\t\t// Data is arbitrary bytes which can represent text, files, objects. It's applications developers decision how Data should be deserialized, serialized and the object it can represent in their context\n\t\t\t\t\t// It's applications developers decision how Data should be treated, by treated we mean the serialization and deserialization process and the Object Data should represent.\n\t\t\t\t\tdata\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t// the memo must be empty\n\t\tmemo: ''\n\t};\n}\n\nfunction verifyADR36AminoSignDoc(signDoc: StdSignDoc, pubKey: Uint8Array, signature: Uint8Array): boolean {\n\tif (!checkAndValidateADR36AminoSignDoc(signDoc)) {\n\t\tthrow new Error('Invalid sign doc for ADR-36');\n\t}\n\n\tconst expectedSigner = compressedPubKeyToAddress(pubKey);\n\tconst signer = signDoc.msgs[0].value.signer;\n\tif (expectedSigner !== signer) {\n\t\tthrow new Error('Unmatched signer');\n\t}\n\n\tconst msg = serializeAminoSignDoc(signDoc);\n\n\treturn verifyDigest32(sha256(msg), signature, pubKey);\n}\n\nfunction verifyADR36Amino(signer: string, data: string | Uint8Array, pubKey: Uint8Array, signature: Uint8Array): boolean {\n\tconst signDoc = makeADR36AminoSignDoc(signer, data);\n\n\treturn verifyADR36AminoSignDoc(signDoc, pubKey, signature);\n}\n\nexport const verifyArbitrary = async (signerAddress: string, expectedMessage: string, signatureToVerify: StdSignature): Promise<boolean> => {\n\ttry {\n\t\tconst { pub_key: pubKey, signature } = signatureToVerify;\n\t\treturn verifyADR36Amino(signerAddress, expectedMessage, fromBase64(pubKey.value), fromBase64(signature));\n\t} catch (e) {\n\t\tconsole.log('error verifying signature', e);\n\t\treturn false;\n\t}\n};\n"],"mappings":"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"}
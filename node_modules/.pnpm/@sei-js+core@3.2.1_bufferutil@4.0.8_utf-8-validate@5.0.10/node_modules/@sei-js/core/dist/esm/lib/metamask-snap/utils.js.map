{"version":3,"file":"utils.js","names":["getSnapEthereumProvider","exports","_ref","_asyncToGenerator2","_regenerator","mark","_callee","mmFound","_iterator","_step","provider","_iterator2","_step2","_provider","wrap","_callee$","_context","prev","next","window","ethereum","_createForOfIteratorHelper","detected","s","n","done","value","request","method","setProvider","abrupt","t0","t1","e","f","finish","providers","t2","t3","stop","apply","arguments","sendReqToSnap","_ref2","_callee2","params","snapId","_callee2$","_context2","sent","_x","_x2","_x3"],"sources":["../../../../src/lib/metamask-snap/utils.ts"],"sourcesContent":["import { EthereumProvider } from './types';\n\n/**\n * The fool proof version of getting the ethereum provider suggested by\n * https://github.com/Montoya/snap-connect-test/blob/0dad2dd53ab2ecbf4b4369230d3aaaeca08c6dae/index.html#L41\n *\n * @returns the ethereum provider which supports snaps\n */\nexport const getSnapEthereumProvider = async (): Promise<EthereumProvider> => {\n\tlet mmFound = false;\n\tif ('detected' in window.ethereum) {\n\t\tfor (const provider of window.ethereum.detected) {\n\t\t\ttry {\n\t\t\t\t// Detect snaps support\n\t\t\t\tawait provider.request({\n\t\t\t\t\tmethod: 'wallet_getSnaps'\n\t\t\t\t});\n\t\t\t\t// enforces MetaMask as provider\n\t\t\t\twindow.ethereum.setProvider(provider);\n\n\t\t\t\tmmFound = true;\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn provider;\n\t\t\t} catch {\n\t\t\t\t// no-op\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!mmFound && 'providers' in window.ethereum) {\n\t\tfor (const provider of window.ethereum.providers) {\n\t\t\ttry {\n\t\t\t\t// Detect snaps support\n\t\t\t\tawait provider.request({\n\t\t\t\t\tmethod: 'wallet_getSnaps'\n\t\t\t\t});\n\n\t\t\t\t// @ts-ignore\n\t\t\t\twindow.ethereum = provider;\n\n\t\t\t\tmmFound = true;\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn provider;\n\t\t\t} catch {\n\t\t\t\t// no-op\n\t\t\t}\n\t\t}\n\t}\n\n\treturn window.ethereum;\n};\n\nexport const sendReqToSnap = async (method: string, params: any, snapId: string): Promise<any> => {\n\tconst provider = await getSnapEthereumProvider();\n\treturn provider.request({\n\t\tmethod: 'wallet_invokeSnap',\n\t\tparams: {\n\t\t\tsnapId,\n\t\t\trequest: {\n\t\t\t\tmethod,\n\t\t\t\tparams\n\t\t\t}\n\t\t}\n\t});\n};\n"],"mappings":"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"}
import { SignDoc } from 'cosmjs-types/cosmos/tx/v1beta1/tx';
import { AccountData, AminoSignResponse, StdSignDoc } from '@cosmjs/amino';
import { DirectSignResponse, OfflineDirectSigner } from '@cosmjs/proto-signing';
import Long from 'long';
import { SignAminoOptions } from './types';
export declare const requestSignature: (chainId: string, signerAddress: string, signDoc: {
    bodyBytes?: Uint8Array | null | undefined;
    authInfoBytes?: Uint8Array | null | undefined;
    chainId?: string | null | undefined;
    accountNumber?: Long.Long | null | undefined;
}, snapId: string) => Promise<DirectSignResponse>;
export declare class CosmJSOfflineSigner implements OfflineDirectSigner {
    readonly chainId: string;
    readonly snapId: string;
    readonly accountIndex: number;
    constructor(chainId: string, snapId: string, accountIndex?: number);
    getAccounts(): Promise<AccountData[]>;
    signDirect(signerAddress: string, signDoc: SignDoc): Promise<DirectSignResponse>;
    signAmino(signerAddress: string, signDoc: StdSignDoc, options?: SignAminoOptions): Promise<AminoSignResponse>;
    signArbitrary(signer: string, data: string, signOptions?: {
        enableExtraEntropy?: boolean;
    }): Promise<import("@cosmjs/amino").StdSignature>;
}
export declare const requestSignAmino: (chainId: string, signerAddress: string, signDoc: StdSignDoc, snapId: string, options?: SignAminoOptions) => Promise<AminoSignResponse>;

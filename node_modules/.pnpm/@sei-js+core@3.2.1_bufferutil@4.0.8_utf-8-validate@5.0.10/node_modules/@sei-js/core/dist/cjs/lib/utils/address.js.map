{"version":3,"file":"address.js","names":["_encoding","require","_elliptic","_hash","_crypto","_bech","isValidSeiAddress","exports","address","_fromBech","fromBech32","prefix","e","pubKeyToKeyPair","pubKey","secp256k1","EllipticCurve","keyFromPublic","Buffer","from","toString","pubKeyToBytes","uncompressed","length","keyPair","Uint8Array","getPublic","encode","encodeCompressed","compressedPubKeyToAddress","publicKey","toBech32","getAddressHashFromPubKey","compressedPublicKey","ripemd160","sha256","verifyDigest32","digest","signature","Error","concat","r","slice","s","verify"],"sources":["../../../../src/lib/utils/address.ts"],"sourcesContent":["import { fromBech32 } from '@cosmjs/encoding';\nimport { ec as EllipticCurve } from 'elliptic';\nimport { sha256 } from './hash';\nimport { ripemd160 } from '@cosmjs/crypto';\nimport { toBech32 } from './bech32';\n\nexport const isValidSeiAddress = (address: string) => {\n  try {\n    const { prefix } = fromBech32(address);\n    return prefix && prefix === 'sei';\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const pubKeyToKeyPair = (pubKey: Uint8Array): EllipticCurve.KeyPair => {\n  const secp256k1 = new EllipticCurve('secp256k1');\n\n  return secp256k1.keyFromPublic(Buffer.from(pubKey).toString('hex'), 'hex');\n};\n\nexport const pubKeyToBytes = (pubKey: Uint8Array, uncompressed?: boolean): Uint8Array => {\n  if (uncompressed && pubKey.length === 65) {\n    return pubKey;\n  }\n  if (!uncompressed && pubKey.length === 33) {\n    return pubKey;\n  }\n\n  const keyPair = pubKeyToKeyPair(pubKey);\n\n  if (uncompressed) {\n    return new Uint8Array(Buffer.from(keyPair.getPublic().encode('hex', false), 'hex'));\n  } else {\n    return new Uint8Array(Buffer.from(keyPair.getPublic().encodeCompressed('hex'), 'hex'));\n  }\n};\n\nexport const compressedPubKeyToAddress = (publicKey: Uint8Array) => {\n  return toBech32(getAddressHashFromPubKey(publicKey));\n};\n\nexport const getAddressHashFromPubKey = (compressedPublicKey: Uint8Array): Uint8Array => {\n  return ripemd160(sha256(compressedPublicKey));\n};\n\nexport const verifyDigest32 = (digest: Uint8Array, signature: Uint8Array, pubKey: Uint8Array): boolean => {\n  if (digest.length !== 32) {\n    throw new Error(`Invalid length of digest to verify: ${digest.length}`);\n  }\n\n  if (signature.length !== 64) {\n    throw new Error(`Invalid length of signature: ${signature.length}`);\n  }\n\n  const secp256k1 = new EllipticCurve('secp256k1');\n\n  const r = signature.slice(0, 32);\n  const s = signature.slice(32);\n\n  return secp256k1.verify(\n    digest,\n    {\n      r: Buffer.from(r).toString('hex'),\n      s: Buffer.from(s).toString('hex')\n    },\n    pubKeyToKeyPair(pubKey)\n  );\n};\n"],"mappings":"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"}
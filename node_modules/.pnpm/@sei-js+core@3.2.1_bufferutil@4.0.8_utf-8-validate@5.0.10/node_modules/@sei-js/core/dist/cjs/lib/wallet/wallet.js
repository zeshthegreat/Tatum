'use strict';

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');
Object.defineProperty(exports, '__esModule', {
	value: true
});
exports.restoreWallet = exports.getHdPath = exports.generateWallet = void 0;
var _regenerator = _interopRequireDefault(require('@babel/runtime/regenerator'));
var _asyncToGenerator2 = _interopRequireDefault(require('@babel/runtime/helpers/asyncToGenerator'));
var _protoSigning = require('@cosmjs/proto-signing');
var _crypto = require('@cosmjs/crypto');
var getHdPath = (exports.getHdPath = function getHdPath() {
	var accountIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	var stringPath = "m/44'/118'/0'/0/".concat(accountIndex);
	return (0, _crypto.stringToPath)(stringPath);
});
var generateWallet = (exports.generateWallet = /*#__PURE__*/ (function () {
	var _ref = (0, _asyncToGenerator2['default'])(
		/*#__PURE__*/ _regenerator['default'].mark(function _callee() {
			var mnemonicLength,
				accountIndex,
				_args = arguments;
			return _regenerator['default'].wrap(function _callee$(_context) {
				while (1)
					switch ((_context.prev = _context.next)) {
						case 0:
							mnemonicLength = _args.length > 0 && _args[0] !== undefined ? _args[0] : 12;
							accountIndex = _args.length > 1 ? _args[1] : undefined;
							_context.next = 4;
							return _protoSigning.DirectSecp256k1HdWallet.generate(mnemonicLength, {
								prefix: 'sei',
								hdPaths: [getHdPath(accountIndex)]
							});
						case 4:
							return _context.abrupt('return', _context.sent);
						case 5:
						case 'end':
							return _context.stop();
					}
			}, _callee);
		})
	);
	return function generateWallet() {
		return _ref.apply(this, arguments);
	};
})());
var restoreWallet = (exports.restoreWallet = /*#__PURE__*/ (function () {
	var _ref2 = (0, _asyncToGenerator2['default'])(
		/*#__PURE__*/ _regenerator['default'].mark(function _callee2(seedPhrase, accountIndex) {
			return _regenerator['default'].wrap(function _callee2$(_context2) {
				while (1)
					switch ((_context2.prev = _context2.next)) {
						case 0:
							_context2.next = 2;
							return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(seedPhrase, {
								prefix: 'sei',
								hdPaths: [getHdPath(accountIndex)]
							});
						case 2:
							return _context2.abrupt('return', _context2.sent);
						case 3:
						case 'end':
							return _context2.stop();
					}
			}, _callee2);
		})
	);
	return function restoreWallet(_x, _x2) {
		return _ref2.apply(this, arguments);
	};
})());
//# sourceMappingURL=wallet.js.map

"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _ethers = require("ethers");
var _contract = require("../utils/contract");
var _utils = require("../utils");
var _interfaces = require("../constants/interfaces");
var _register2 = require("../utils/register");
var _referral = require("../utils/referral");
var _index = _interopRequireDefault(require("../index"));
var getTldByChainId = function getTldByChainId(chainId) {
  var id = parseInt(chainId);
  switch (id) {
    case 1:
      return 'eth';
    case 97:
    case 56:
      return 'bnb';
    case 42161:
    case 421613:
      return 'arb';
    default:
      return 'bnb';
  }
};
var supportedChainIds = [56, 97, 42161, 421613];
var SIDRegistrar = /*#__PURE__*/function () {
  function SIDRegistrar(options) {
    (0, _classCallCheck2["default"])(this, SIDRegistrar);
    var signer = options.signer,
      sidAddress = options.sidAddress;
    // if (!Signer.isSigner(signer)) throw new Error('signer is required')
    if (!sidAddress) throw new Error('sidAddress is required');
    this.sidAddress = sidAddress;
    this.signer = signer;
    this.registrarController = null;
  }
  (0, _createClass2["default"])(SIDRegistrar, [{
    key: "getRegistrarController",
    value: function () {
      var _getRegistrarController = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var sidContract, chainId, hash, resolverAddr, resolverContract, registrarControllerAddr;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.registrarController) {
                  _context.next = 14;
                  break;
                }
                sidContract = (0, _contract.getSIDContract)({
                  address: this.sidAddress,
                  provider: this.signer
                });
                chainId = 1; //await this.signer.getChainId()
                // if (!supportedChainIds.includes(chainId)) {
                //     throw new Error('unsupported network')
                // }
                hash = (0, _utils.namehash)(getTldByChainId(chainId));
                _context.next = 6;
                return sidContract.resolver(hash);
              case 6:
                resolverAddr = _context.sent;
                resolverContract = (0, _contract.getResolverContract)({
                  address: resolverAddr,
                  provider: this.signer
                });
                _context.next = 10;
                return resolverContract.interfaceImplementer(hash, _interfaces.interfaces.permanentRegistrar);
              case 10:
                registrarControllerAddr = _context.sent;
                console.log('addr:', registrarControllerAddr);
                this.registrarController = (0, _contract.getRegistrarControllerContract)({
                  address: registrarControllerAddr,
                  signer: this.signer
                });
                return _context.abrupt("return", this.registrarController);
              case 14:
                return _context.abrupt("return", this.registrarController);
              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function getRegistrarController() {
        return _getRegistrarController.apply(this, arguments);
      }
      return getRegistrarController;
    }()
  }, {
    key: "getPublicResolver",
    value: function () {
      var _getPublicResolver = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(chainId) {
        var sid;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                sid = new _index["default"]({
                  provider: this.signer.provider,
                  sidAddress: this.sidAddress
                });
                return _context2.abrupt("return", sid.name("sid-resolver.".concat(getTldByChainId(chainId))).getAddress());
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function getPublicResolver(_x) {
        return _getPublicResolver.apply(this, arguments);
      }
      return getPublicResolver;
    }()
  }, {
    key: "getRentPrice",
    value: function () {
      var _getRentPrice = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(label, year) {
        var normalizedName, registrarController;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                normalizedName = (0, _utils.validateName)(label);
                if (!(normalizedName !== label)) {
                  _context3.next = 3;
                  break;
                }
                throw new Error('unnormailzed name');
              case 3:
                _context3.next = 5;
                return this.getRegistrarController();
              case 5:
                registrarController = _context3.sent;
                return _context3.abrupt("return", registrarController.rentPrice(normalizedName, (0, _register2.calculateDuration)(year)));
              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function getRentPrice(_x2, _x3) {
        return _getRentPrice.apply(this, arguments);
      }
      return getRentPrice;
    }()
  }, {
    key: "getAvailable",
    value: function () {
      var _getAvailable = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(label) {
        var normalizedName, registrarController;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                normalizedName = (0, _utils.validateName)(label);
                if (!(normalizedName !== label)) {
                  _context4.next = 3;
                  break;
                }
                throw new Error('unnormailzed name');
              case 3:
                _context4.next = 5;
                return this.getRegistrarController();
              case 5:
                registrarController = _context4.sent;
                return _context4.abrupt("return", registrarController.available(normalizedName));
              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function getAvailable(_x4) {
        return _getAvailable.apply(this, arguments);
      }
      return getAvailable;
    }()
  }, {
    key: "register",
    value: function () {
      var _register = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(label, address, year) {
        var _registrarController$;
        var options,
          _options$referrer,
          referrer,
          _options$setPrimaryNa,
          setPrimaryName,
          normalizedName,
          duration,
          priceRes,
          bufferedPrice,
          chainId,
          publicResolver,
          referralSign,
          registrarController,
          gas,
          gasLimit,
          tx,
          _args5 = arguments;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : {};
                _options$referrer = options.referrer, referrer = _options$referrer === void 0 ? '' : _options$referrer, _options$setPrimaryNa = options.setPrimaryName, setPrimaryName = _options$setPrimaryNa === void 0 ? false : _options$setPrimaryNa;
                normalizedName = (0, _utils.validateName)(label);
                if (!(normalizedName !== label)) {
                  _context5.next = 5;
                  break;
                }
                throw new Error('unnormailzed name');
              case 5:
                if (!(year < 1)) {
                  _context5.next = 7;
                  break;
                }
                throw new Error('minimum registration for one year');
              case 7:
                duration = (0, _register2.calculateDuration)(year);
                _context5.next = 10;
                return this.getRentPrice(normalizedName, year);
              case 10:
                priceRes = _context5.sent;
                bufferedPrice = (0, _register2.getBufferedPrice)(priceRes[0].add(priceRes[1]));
                _context5.next = 14;
                return this.signer.getChainId();
              case 14:
                chainId = _context5.sent;
                _context5.next = 17;
                return this.getPublicResolver(chainId);
              case 17:
                publicResolver = _context5.sent;
                _context5.next = 20;
                return (0, _referral.getReferralSignature)(referrer, chainId);
              case 20:
                referralSign = _context5.sent;
                _context5.next = 23;
                return this.getRegistrarController();
              case 23:
                registrarController = _context5.sent;
                _context5.next = 26;
                return (_registrarController$ = registrarController.estimateGas) === null || _registrarController$ === void 0 ? void 0 : _registrarController$.registerWithConfigAndPoint(normalizedName, address, duration, publicResolver, false, setPrimaryName, referralSign, {
                  value: bufferedPrice
                });
              case 26:
                gas = _context5.sent;
                gasLimit = (gas !== null && gas !== void 0 ? gas : _ethers.BigNumber.from(0)).add(21000);
                _context5.next = 30;
                return registrarController.registerWithConfigAndPoint(normalizedName, address, duration, publicResolver, false, setPrimaryName, referralSign, {
                  value: bufferedPrice,
                  gasLimit: gasLimit
                });
              case 30:
                tx = _context5.sent;
                _context5.next = 33;
                return tx.wait();
              case 33:
                return _context5.abrupt("return", normalizedName);
              case 34:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function register(_x5, _x6, _x7) {
        return _register.apply(this, arguments);
      }
      return register;
    }()
  }]);
  return SIDRegistrar;
}();
var _default = SIDRegistrar;
exports["default"] = _default;
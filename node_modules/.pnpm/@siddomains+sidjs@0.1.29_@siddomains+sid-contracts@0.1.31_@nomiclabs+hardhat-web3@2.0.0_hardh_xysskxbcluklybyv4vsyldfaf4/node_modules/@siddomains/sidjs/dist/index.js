"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
Object.defineProperty(exports, "getResolverContract", {
  enumerable: true,
  get: function get() {
    return _contract.getResolverContract;
  }
});
Object.defineProperty(exports, "getSIDContract", {
  enumerable: true,
  get: function get() {
    return _contract.getSIDContract;
  }
});
exports.getSidAddress = getSidAddress;
Object.defineProperty(exports, "labelhash", {
  enumerable: true,
  get: function get() {
    return _utils.labelhash;
  }
});
Object.defineProperty(exports, "namehash", {
  enumerable: true,
  get: function get() {
    return _utils.namehash;
  }
});
Object.defineProperty(exports, "normalize", {
  enumerable: true,
  get: function get() {
    return _utils.normalize;
  }
});
Object.defineProperty(exports, "validateName", {
  enumerable: true,
  get: function get() {
    return _utils.validateName;
  }
});
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _ethers = require("ethers");
var _addressEncoder = require("@siddomains/address-encoder");
var _contract = require("./utils/contract");
var _utils = require("./utils");
var _contents = require("./utils/contents");
function getSidAddress(networkId) {
  var id = parseInt(networkId);
  if ([97].includes(id)) {
    return '0xfFB52185b56603e0fd71De9de4F6f902f05EEA23';
  } else if ([1, 3, 4, 5].includes(id)) {
    return '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e';
  } else if ([56].includes(id)) {
    return '0x08CEd32a7f3eeC915Ba84415e9C07a7286977956';
  } else if ([421613].includes(id)) {
    return '0x1f70fc8de5669eaa8C9ce72257c94500DC5ff2E4';
  } else if ([42161].includes(id)) {
    return '0x4a067EE58e73ac5E4a43722E008DFdf65B2bF348';
  }
}
function getAddrWithResolver(_x) {
  return _getAddrWithResolver.apply(this, arguments);
}
function _getAddrWithResolver() {
  _getAddrWithResolver = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee20(_ref) {
    var name, key, resolverAddr, provider, resolver, _formatsByName$key, coinType, encoder, hexCoinType, addr;
    return _regenerator["default"].wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            name = _ref.name, key = _ref.key, resolverAddr = _ref.resolverAddr, provider = _ref.provider;
            _context20.prev = 1;
            resolver = new _ethers.ethers.providers.Resolver(provider, resolverAddr, name);
            _formatsByName$key = _addressEncoder.formatsByName[key], coinType = _formatsByName$key.coinType, encoder = _formatsByName$key.encoder;
            hexCoinType = _ethers.utils.hexZeroPad(_ethers.BigNumber.from(coinType).toHexString(), 32);
            _context20.next = 7;
            return resolver._fetchBytes('0xf1cb7e06', hexCoinType);
          case 7:
            addr = _context20.sent;
            if (!(addr === '0x' || !addr)) {
              _context20.next = 10;
              break;
            }
            return _context20.abrupt("return", _utils.emptyAddress);
          case 10:
            return _context20.abrupt("return", encoder(Buffer.from(addr.slice(2), 'hex')));
          case 13:
            _context20.prev = 13;
            _context20.t0 = _context20["catch"](1);
            console.error(_context20.t0);
            console.warn('Error getting addr on the resolver contract, are you sure the resolver address is a resolver contract?');
            return _context20.abrupt("return", _utils.emptyAddress);
          case 18:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20, null, [[1, 13]]);
  }));
  return _getAddrWithResolver.apply(this, arguments);
}
function setAddrWithResolver(_x2) {
  return _setAddrWithResolver.apply(this, arguments);
}
function _setAddrWithResolver() {
  _setAddrWithResolver = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee21(_ref2) {
    var name, key, address, resolverAddr, signer, nh, Resolver, _formatsByName$key2, decoder, coinType, addressAsBytes;
    return _regenerator["default"].wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            name = _ref2.name, key = _ref2.key, address = _ref2.address, resolverAddr = _ref2.resolverAddr, signer = _ref2.signer;
            nh = (0, _utils.namehash)(name);
            Resolver = (0, _contract.getResolverContract)({
              address: resolverAddr,
              provider: signer
            });
            _formatsByName$key2 = _addressEncoder.formatsByName[key], decoder = _formatsByName$key2.decoder, coinType = _formatsByName$key2.coinType;
            if (!address || address === '') {
              addressAsBytes = Buffer.from('');
            } else {
              addressAsBytes = decoder(address);
            }
            return _context21.abrupt("return", Resolver['setAddr(bytes32,uint256,bytes)'](nh, coinType, addressAsBytes));
          case 6:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));
  return _setAddrWithResolver.apply(this, arguments);
}
function getContentWithResolver(_x3) {
  return _getContentWithResolver.apply(this, arguments);
}
function _getContentWithResolver() {
  _getContentWithResolver = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee22(_ref3) {
    var name, resolverAddr, provider, nh, _Resolver2, contentHashSignature, isContentHashSupported, _decodeContenthash, protocolType, decoded, error, value, message;
    return _regenerator["default"].wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            name = _ref3.name, resolverAddr = _ref3.resolverAddr, provider = _ref3.provider;
            nh = (0, _utils.namehash)(name);
            if (!(parseInt(resolverAddr, 16) === 0)) {
              _context22.next = 4;
              break;
            }
            return _context22.abrupt("return", _utils.emptyAddress);
          case 4:
            _context22.prev = 4;
            _Resolver2 = (0, _contract.getResolverContract)({
              address: resolverAddr,
              provider: provider
            });
            contentHashSignature = _ethers.utils.solidityKeccak256(['string'], ['contenthash(bytes32)']).slice(0, 10);
            _context22.next = 9;
            return _Resolver2.supportsInterface(contentHashSignature);
          case 9:
            isContentHashSupported = _context22.sent;
            if (!isContentHashSupported) {
              _context22.next = 25;
              break;
            }
            _context22.t0 = _contents.decodeContenthash;
            _context22.next = 14;
            return _Resolver2.contenthash(nh);
          case 14:
            _context22.t1 = _context22.sent;
            _decodeContenthash = (0, _context22.t0)(_context22.t1);
            protocolType = _decodeContenthash.protocolType;
            decoded = _decodeContenthash.decoded;
            error = _decodeContenthash.error;
            if (!error) {
              _context22.next = 22;
              break;
            }
            console.log('error decoding', error);
            return _context22.abrupt("return", {
              value: _utils.emptyAddress,
              contentType: 'contenthash'
            });
          case 22:
            return _context22.abrupt("return", {
              value: "".concat(protocolType, "://").concat(decoded),
              contentType: 'contenthash'
            });
          case 25:
            _context22.next = 27;
            return _Resolver2.content(nh);
          case 27:
            value = _context22.sent;
            return _context22.abrupt("return", {
              value: value,
              contentType: 'oldcontent'
            });
          case 29:
            _context22.next = 36;
            break;
          case 31:
            _context22.prev = 31;
            _context22.t2 = _context22["catch"](4);
            message = 'Error getting content on the resolver contract, are you sure the resolver address is a resolver contract?';
            console.warn(message, _context22.t2);
            return _context22.abrupt("return", {
              value: message,
              contentType: 'error'
            });
          case 36:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22, null, [[4, 31]]);
  }));
  return _getContentWithResolver.apply(this, arguments);
}
function setContenthashWithResolver(_x4) {
  return _setContenthashWithResolver.apply(this, arguments);
}
function _setContenthashWithResolver() {
  _setContenthashWithResolver = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee23(_ref4) {
    var name, content, resolverAddr, signer, encodedContenthash, Resolver;
    return _regenerator["default"].wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            name = _ref4.name, content = _ref4.content, resolverAddr = _ref4.resolverAddr, signer = _ref4.signer;
            encodedContenthash = content;
            if (parseInt(content, 16) !== 0) {
              encodedContenthash = (0, _contents.encodeContenthash)(content);
            }
            Resolver = (0, _contract.getResolverContract)({
              address: resolverAddr,
              provider: signer
            });
            return _context23.abrupt("return", Resolver.setContenthash((0, _utils.namehash)(name), encodedContenthash));
          case 5:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  return _setContenthashWithResolver.apply(this, arguments);
}
function getTextWithResolver(_x5) {
  return _getTextWithResolver.apply(this, arguments);
}
function _getTextWithResolver() {
  _getTextWithResolver = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee24(_ref5) {
    var name, key, resolverAddr, provider, nh, _Resolver3, addr;
    return _regenerator["default"].wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            name = _ref5.name, key = _ref5.key, resolverAddr = _ref5.resolverAddr, provider = _ref5.provider;
            nh = (0, _utils.namehash)(name);
            if (!(parseInt(resolverAddr, 16) === 0)) {
              _context24.next = 4;
              break;
            }
            return _context24.abrupt("return", '');
          case 4:
            _context24.prev = 4;
            _Resolver3 = (0, _contract.getResolverContract)({
              address: resolverAddr,
              provider: provider
            });
            _context24.next = 8;
            return _Resolver3.text(nh, key);
          case 8:
            addr = _context24.sent;
            return _context24.abrupt("return", addr);
          case 12:
            _context24.prev = 12;
            _context24.t0 = _context24["catch"](4);
            console.warn('Error getting text record on the resolver contract, are you sure the resolver address is a resolver contract?');
            return _context24.abrupt("return", '');
          case 16:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee24, null, [[4, 12]]);
  }));
  return _getTextWithResolver.apply(this, arguments);
}
function setTextWithResolver(_x6) {
  return _setTextWithResolver.apply(this, arguments);
}
function _setTextWithResolver() {
  _setTextWithResolver = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee25(_ref6) {
    var name, key, recordValue, resolverAddr, signer, nh;
    return _regenerator["default"].wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            name = _ref6.name, key = _ref6.key, recordValue = _ref6.recordValue, resolverAddr = _ref6.resolverAddr, signer = _ref6.signer;
            nh = (0, _utils.namehash)(name);
            return _context25.abrupt("return", (0, _contract.getResolverContract)({
              address: resolverAddr,
              provider: signer
            }).setText(nh, key, recordValue));
          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  return _setTextWithResolver.apply(this, arguments);
}
var Resolver = /*#__PURE__*/function () {
  //TODO
  function Resolver(_ref7) {
    var address = _ref7.address,
      sid = _ref7.sid;
    (0, _classCallCheck2["default"])(this, Resolver);
    this.address = address;
    this.sid = sid;
  }
  (0, _createClass2["default"])(Resolver, [{
    key: "name",
    value: function name(_name) {
      return new Name({
        name: _name,
        sid: this.sid,
        provider: this.provider,
        signer: this.signer,
        resolver: this.address
      });
    }
  }]);
  return Resolver;
}();
var Name = /*#__PURE__*/function () {
  function Name(options) {
    (0, _classCallCheck2["default"])(this, Name);
    var name = options.name,
      sid = options.sid,
      provider = options.provider,
      signer = options.signer,
      nh = options.namehash,
      resolver = options.resolver;
    if (options.namehash) {
      this.namehash = nh;
    }
    this.sid = sid;
    this.sidWithSigner = this.sid.connect(signer);
    this.name = name;
    this.namehash = (0, _utils.namehash)(name);
    this.provider = provider;
    this.signer = signer;
    this.resolver = resolver;
  }
  (0, _createClass2["default"])(Name, [{
    key: "getOwner",
    value: function () {
      var _getOwner = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.sid.owner(this.namehash));
              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function getOwner() {
        return _getOwner.apply(this, arguments);
      }
      return getOwner;
    }()
  }, {
    key: "setOwner",
    value: function () {
      var _setOwner = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(address) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (address) {
                  _context2.next = 2;
                  break;
                }
                throw new Error('No newOwner address provided!');
              case 2:
                return _context2.abrupt("return", this.sidWithSigner.setOwner(this.namehash, address));
              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function setOwner(_x7) {
        return _setOwner.apply(this, arguments);
      }
      return setOwner;
    }()
  }, {
    key: "getResolver",
    value: function () {
      var _getResolver = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        var currentName, currentNamehash, addr, resolver;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                currentName = this.name;
                currentNamehash = this.namehash;
              case 2:
                if (!true) {
                  _context3.next = 24;
                  break;
                }
                if (!(currentName === "" || currentName === ".")) {
                  _context3.next = 5;
                  break;
                }
                return _context3.abrupt("return", _utils.emptyAddress);
              case 5:
                if (currentName.includes('.')) {
                  _context3.next = 7;
                  break;
                }
                return _context3.abrupt("return", _utils.emptyAddress);
              case 7:
                _context3.next = 9;
                return this.sid.resolver(currentNamehash);
              case 9:
                addr = _context3.sent;
                if (!(addr !== _utils.emptyAddress)) {
                  _context3.next = 20;
                  break;
                }
                resolver = (0, _contract.getResolverContract)({
                  address: addr,
                  provider: this.provider
                });
                _context3.t0 = currentName !== this.name;
                if (!_context3.t0) {
                  _context3.next = 17;
                  break;
                }
                _context3.next = 16;
                return resolver.supportsInterface("0x9061b923");
              case 16:
                _context3.t0 = !_context3.sent;
              case 17:
                if (!_context3.t0) {
                  _context3.next = 19;
                  break;
                }
                return _context3.abrupt("return", _utils.emptyAddress);
              case 19:
                return _context3.abrupt("return", addr);
              case 20:
                currentName = currentName.split(".").slice(1).join(".");
                currentNamehash = (0, _utils.namehash)(currentName);
                _context3.next = 2;
                break;
              case 24:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function getResolver() {
        return _getResolver.apply(this, arguments);
      }
      return getResolver;
    }()
  }, {
    key: "setResolver",
    value: function () {
      var _setResolver = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(address) {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (address) {
                  _context4.next = 2;
                  break;
                }
                throw new Error('No resolver address provided!');
              case 2:
                return _context4.abrupt("return", this.sidWithSigner.setResolver(this.namehash, address));
              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function setResolver(_x8) {
        return _setResolver.apply(this, arguments);
      }
      return setResolver;
    }()
  }, {
    key: "getTTL",
    value: function () {
      var _getTTL = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", this.sid.ttl(this.namehash));
              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function getTTL() {
        return _getTTL.apply(this, arguments);
      }
      return getTTL;
    }()
  }, {
    key: "getResolverAddr",
    value: function () {
      var _getResolverAddr = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (!this.resolver) {
                  _context6.next = 4;
                  break;
                }
                return _context6.abrupt("return", this.resolver);
              case 4:
                return _context6.abrupt("return", this.getResolver());
              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
      function getResolverAddr() {
        return _getResolverAddr.apply(this, arguments);
      }
      return getResolverAddr;
    }()
  }, {
    key: "getAddress",
    value: function () {
      var _getAddress = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(coinId) {
        var resolverAddr, resolver, res;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.getResolverAddr();
              case 2:
                resolverAddr = _context7.sent;
                if (!(parseInt(resolverAddr, 16) === 0)) {
                  _context7.next = 5;
                  break;
                }
                return _context7.abrupt("return", _utils.emptyAddress);
              case 5:
                if (coinId) {
                  _context7.next = 11;
                  break;
                }
                resolver = new _ethers.ethers.providers.Resolver(this.provider, resolverAddr, this.name);
                _context7.next = 9;
                return resolver.getAddress();
              case 9:
                res = _context7.sent;
                return _context7.abrupt("return", res ? res : _utils.emptyAddress);
              case 11:
                return _context7.abrupt("return", getAddrWithResolver({
                  name: this.name,
                  key: coinId,
                  resolverAddr: resolverAddr,
                  provider: this.provider
                }));
              case 12:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));
      function getAddress(_x9) {
        return _getAddress.apply(this, arguments);
      }
      return getAddress;
    }()
  }, {
    key: "setAddress",
    value: function () {
      var _setAddress = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8(key, address) {
        var resolverAddr;
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (key) {
                  _context8.next = 2;
                  break;
                }
                throw new Error('No coinId provided');
              case 2:
                if (address) {
                  _context8.next = 4;
                  break;
                }
                throw new Error('No address provided');
              case 4:
                _context8.next = 6;
                return this.getResolverAddr();
              case 6:
                resolverAddr = _context8.sent;
                return _context8.abrupt("return", setAddrWithResolver({
                  name: this.name,
                  key: key,
                  address: address,
                  resolverAddr: resolverAddr,
                  signer: this.signer
                }));
              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));
      function setAddress(_x10, _x11) {
        return _setAddress.apply(this, arguments);
      }
      return setAddress;
    }()
  }, {
    key: "getContent",
    value: function () {
      var _getContent = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9() {
        var resolverAddr;
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.getResolverAddr();
              case 2:
                resolverAddr = _context9.sent;
                return _context9.abrupt("return", getContentWithResolver({
                  name: this.name,
                  resolverAddr: resolverAddr,
                  provider: this.provider
                }));
              case 4:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));
      function getContent() {
        return _getContent.apply(this, arguments);
      }
      return getContent;
    }()
  }, {
    key: "setContenthash",
    value: function () {
      var _setContenthash = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10(content) {
        var resolverAddr;
        return _regenerator["default"].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.getResolverAddr();
              case 2:
                resolverAddr = _context10.sent;
                console.log(content);
                return _context10.abrupt("return", setContenthashWithResolver({
                  name: this.name,
                  content: content,
                  resolverAddr: resolverAddr,
                  signer: this.signer
                }));
              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));
      function setContenthash(_x12) {
        return _setContenthash.apply(this, arguments);
      }
      return setContenthash;
    }()
  }, {
    key: "getText",
    value: function () {
      var _getText = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee11(key) {
        var resolverAddr;
        return _regenerator["default"].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.getResolverAddr();
              case 2:
                resolverAddr = _context11.sent;
                return _context11.abrupt("return", getTextWithResolver({
                  name: this.name,
                  key: key,
                  resolverAddr: resolverAddr,
                  provider: this.provider
                }));
              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));
      function getText(_x13) {
        return _getText.apply(this, arguments);
      }
      return getText;
    }()
  }, {
    key: "setText",
    value: function () {
      var _setText = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee12(key, recordValue) {
        var resolverAddr;
        return _regenerator["default"].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.getResolverAddr();
              case 2:
                resolverAddr = _context12.sent;
                return _context12.abrupt("return", setTextWithResolver({
                  name: this.name,
                  key: key,
                  recordValue: recordValue,
                  resolverAddr: resolverAddr,
                  signer: this.signer
                }));
              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));
      function setText(_x14, _x15) {
        return _setText.apply(this, arguments);
      }
      return setText;
    }()
  }, {
    key: "setSubnodeOwner",
    value: function () {
      var _setSubnodeOwner = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee13(label, newOwner) {
        var lh;
        return _regenerator["default"].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                lh = (0, _utils.labelhash)(label);
                return _context13.abrupt("return", this.sidWithSigner.setSubnodeOwner(this.namehash, lh, newOwner));
              case 2:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));
      function setSubnodeOwner(_x16, _x17) {
        return _setSubnodeOwner.apply(this, arguments);
      }
      return setSubnodeOwner;
    }()
  }, {
    key: "setSubnodeRecord",
    value: function () {
      var _setSubnodeRecord = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee14(label, newOwner, resolver) {
        var ttl,
          lh,
          _args14 = arguments;
        return _regenerator["default"].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                ttl = _args14.length > 3 && _args14[3] !== undefined ? _args14[3] : 0;
                lh = (0, _utils.labelhash)(label);
                return _context14.abrupt("return", this.sidWithSigner.setSubnodeRecord(this.namehash, lh, newOwner, resolver, ttl));
              case 3:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));
      function setSubnodeRecord(_x18, _x19, _x20) {
        return _setSubnodeRecord.apply(this, arguments);
      }
      return setSubnodeRecord;
    }()
  }, {
    key: "createSubdomain",
    value: function () {
      var _createSubdomain = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee15(label) {
        var resolverPromise, ownerPromise, _yield$Promise$all, _yield$Promise$all2, resolver, owner;
        return _regenerator["default"].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                resolverPromise = this.getResolver();
                ownerPromise = this.getOwner();
                _context15.next = 4;
                return Promise.all([resolverPromise, ownerPromise]);
              case 4:
                _yield$Promise$all = _context15.sent;
                _yield$Promise$all2 = (0, _slicedToArray2["default"])(_yield$Promise$all, 2);
                resolver = _yield$Promise$all2[0];
                owner = _yield$Promise$all2[1];
                return _context15.abrupt("return", this.setSubnodeRecord(label, owner, resolver));
              case 9:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));
      function createSubdomain(_x21) {
        return _createSubdomain.apply(this, arguments);
      }
      return createSubdomain;
    }()
  }, {
    key: "deleteSubdomain",
    value: function () {
      var _deleteSubdomain = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee16(label) {
        return _regenerator["default"].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                return _context16.abrupt("return", this.setSubnodeRecord(label, _utils.emptyAddress, _utils.emptyAddress));
              case 1:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));
      function deleteSubdomain(_x22) {
        return _deleteSubdomain.apply(this, arguments);
      }
      return deleteSubdomain;
    }()
  }]);
  return Name;
}();
var SID = /*#__PURE__*/function () {
  function SID(options) {
    (0, _classCallCheck2["default"])(this, SID);
    var provider = options.provider,
      sidAddress = options.sidAddress;
    if (!_ethers.utils.isAddress(sidAddress)) {
      throw new Error('invalid sidAddress');
    }
    var ethersProvider;
    if (_ethers.ethers.providers.Provider.isProvider(provider)) {
      //detect ethersProvider
      ethersProvider = provider;
    } else {
      ethersProvider = new _ethers.ethers.providers.Web3Provider(provider);
    }
    this.provider = ethersProvider;
    this.signer = ethersProvider.getSigner();
    this.sid = (0, _contract.getSIDContract)({
      address: sidAddress,
      provider: ethersProvider
    });
  }
  (0, _createClass2["default"])(SID, [{
    key: "name",
    value: function name(_name2) {
      (0, _utils.validateName)(_name2);
      return new Name({
        name: _name2,
        sid: this.sid,
        provider: this.provider,
        signer: this.signer
      });
    }
  }, {
    key: "resolver",
    value: function resolver(address) {
      return new Resolver({
        sid: this.sid,
        provider: this.provider,
        address: address
      });
    }
  }, {
    key: "getName",
    value: function () {
      var _getName = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee17(address) {
        var reverseNode, resolverAddr, res, addr;
        return _regenerator["default"].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                reverseNode = "".concat(address.slice(2), ".addr.reverse");
                _context17.next = 3;
                return this.sid.resolver((0, _utils.namehash)(reverseNode));
              case 3:
                resolverAddr = _context17.sent;
                _context17.next = 6;
                return this.getNameWithResolver(address, resolverAddr);
              case 6:
                res = _context17.sent;
                if (res.name) {
                  _context17.next = 9;
                  break;
                }
                return _context17.abrupt("return", res);
              case 9:
                _context17.prev = 9;
                _context17.next = 12;
                return this.name(res.name).getAddress();
              case 12:
                addr = _context17.sent;
                if (!(addr.toLowerCase() === address.toLowerCase())) {
                  _context17.next = 17;
                  break;
                }
                return _context17.abrupt("return", res);
              case 17:
                return _context17.abrupt("return", {
                  name: null
                });
              case 18:
                _context17.next = 24;
                break;
              case 20:
                _context17.prev = 20;
                _context17.t0 = _context17["catch"](9);
                console.error(_context17.t0);
                return _context17.abrupt("return", {
                  name: null
                });
              case 24:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this, [[9, 20]]);
      }));
      function getName(_x23) {
        return _getName.apply(this, arguments);
      }
      return getName;
    }()
  }, {
    key: "getNameWithResolver",
    value: function () {
      var _getNameWithResolver = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee18(address, resolverAddr) {
        var reverseNode, reverseNamehash, _Resolver, name;
        return _regenerator["default"].wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                reverseNode = "".concat(address.slice(2), ".addr.reverse");
                reverseNamehash = (0, _utils.namehash)(reverseNode);
                if (!(parseInt(resolverAddr, 16) === 0)) {
                  _context18.next = 4;
                  break;
                }
                return _context18.abrupt("return", {
                  name: null
                });
              case 4:
                _context18.prev = 4;
                _Resolver = (0, _contract.getResolverContract)({
                  address: resolverAddr,
                  provider: this.provider
                });
                _context18.next = 8;
                return _Resolver.name(reverseNamehash);
              case 8:
                name = _context18.sent;
                return _context18.abrupt("return", {
                  name: name
                });
              case 12:
                _context18.prev = 12;
                _context18.t0 = _context18["catch"](4);
                console.log("Error getting name for reverse record of ".concat(address), _context18.t0);
              case 15:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this, [[4, 12]]);
      }));
      function getNameWithResolver(_x24, _x25) {
        return _getNameWithResolver.apply(this, arguments);
      }
      return getNameWithResolver;
    }()
  }, {
    key: "setReverseRecord",
    value: function () {
      var _setReverseRecord = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee19(name, overrides) {
        var reverseRegistrarAddr, reverseRegistrar;
        return _regenerator["default"].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return this.name('addr.reverse').getOwner('addr.reverse');
              case 2:
                reverseRegistrarAddr = _context19.sent;
                reverseRegistrar = (0, _contract.getReverseRegistrarContract)({
                  address: reverseRegistrarAddr,
                  provider: this.signer
                });
                return _context19.abrupt("return", reverseRegistrar.setName(name));
              case 5:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));
      function setReverseRecord(_x26, _x27) {
        return _setReverseRecord.apply(this, arguments);
      }
      return setReverseRecord;
    }()
  }]);
  return SID;
}();
exports["default"] = SID;
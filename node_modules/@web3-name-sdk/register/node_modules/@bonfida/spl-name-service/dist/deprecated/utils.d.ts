/// <reference types="node" />
import { Connection, PublicKey } from "@solana/web3.js";
import { NameRegistryState } from "../state";
import { Buffer } from "buffer";
/**
 * @deprecated Use {@link resolve} instead
 */
export declare function getNameOwner(connection: Connection, nameAccountKey: PublicKey): Promise<{
    registry: NameRegistryState;
    nftOwner: PublicKey | undefined;
}>;
/**
 * @deprecated Use {@link getHashedNameSync} instead
 */
export declare function getHashedName(name: string): Promise<Buffer>;
/**
 * @deprecated Use {@link getNameAccountKeySync} instead
 */
export declare function getNameAccountKey(hashed_name: Buffer, nameClass?: PublicKey, nameParent?: PublicKey): Promise<PublicKey>;
/**
 * This function can be used to perform a reverse look up
 * @deprecated Use {@link reverseLookup} instead
 * @param connection The Solana RPC connection
 * @param nameAccount The public key of the domain to look up
 * @returns The human readable domain name
 */
export declare function performReverseLookup(connection: Connection, nameAccount: PublicKey): Promise<string>;
/**
 * This function can be used to perform a reverse look up
 * @deprecated Use {@link reverseLookupBatch} instead
 * @param connection The Solana RPC connection
 * @param nameAccount The public keys of the domains to look up
 * @returns The human readable domain names
 */
export declare function performReverseLookupBatch(connection: Connection, nameAccounts: PublicKey[]): Promise<(string | undefined)[]>;
/**
 * This function can be used to compute the public key of a domain or subdomain
 * @deprecated Use {@link getDomainKeySync} instead
 * @param domain The domain to compute the public key for (e.g `bonfida.sol`, `dex.bonfida.sol`)
 * @param record Optional parameter: If the domain being resolved is a record
 * @returns
 */
export declare const getDomainKey: (domain: string, record?: boolean) => Promise<{
    isSub: boolean;
    parent: PublicKey;
    pubkey: PublicKey;
    hashed: Buffer;
} | {
    isSub: boolean;
    parent: PublicKey;
    isSubRecord: boolean;
    pubkey: PublicKey;
    hashed: Buffer;
} | {
    isSub: boolean;
    parent: undefined;
    pubkey: PublicKey;
    hashed: Buffer;
}>;
/**
 * This function can be used to get the key of the reverse account
 * @deprecated Use {@link getReverseKeySync} instead
 * @param domain The domain to compute the reverse for
 * @param isSub Whether the domain is a subdomain or not
 * @returns The public key of the reverse account
 */
export declare const getReverseKey: (domain: string, isSub?: boolean) => Promise<PublicKey>;

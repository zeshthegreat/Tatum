/// <reference types="node" />
import { Buffer } from "buffer";
import { PublicKey, TransactionInstruction } from "@solana/web3.js";
import { Numberu32, Numberu64 } from "./int";
import { Schema } from "borsh";
export interface AccountKey {
    pubkey: PublicKey;
    isSigner: boolean;
    isWritable: boolean;
}
export declare function createInstruction(nameProgramId: PublicKey, systemProgramId: PublicKey, nameKey: PublicKey, nameOwnerKey: PublicKey, payerKey: PublicKey, hashed_name: Buffer, lamports: Numberu64, space: Numberu32, nameClassKey?: PublicKey, nameParent?: PublicKey, nameParentOwner?: PublicKey): TransactionInstruction;
export declare function updateInstruction(nameProgramId: PublicKey, nameAccountKey: PublicKey, offset: Numberu32, input_data: Buffer, nameUpdateSigner: PublicKey): TransactionInstruction;
export declare function transferInstruction(nameProgramId: PublicKey, nameAccountKey: PublicKey, newOwnerKey: PublicKey, currentNameOwnerKey: PublicKey, nameClassKey?: PublicKey, nameParent?: PublicKey, parentOwner?: PublicKey): TransactionInstruction;
export declare function deleteInstruction(nameProgramId: PublicKey, nameAccountKey: PublicKey, refundTargetKey: PublicKey, nameOwnerKey: PublicKey): TransactionInstruction;
export declare class createV2Instruction {
    tag: number;
    name: string;
    space: number;
    static schema: Schema;
    constructor(obj: {
        name: string;
        space: number;
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, rentSysvarAccount: PublicKey, nameProgramId: PublicKey, rootDomain: PublicKey, nameAccount: PublicKey, reverseLookupAccount: PublicKey, centralState: PublicKey, buyer: PublicKey, buyerTokenAccount: PublicKey, usdcVault: PublicKey, state: PublicKey): TransactionInstruction;
}
export declare class createReverseInstruction {
    tag: number;
    name: string;
    static schema: Schema;
    constructor(obj: {
        name: string;
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, namingServiceProgram: PublicKey, rootDomain: PublicKey, reverseLookup: PublicKey, systemProgram: PublicKey, centralState: PublicKey, feePayer: PublicKey, rentSysvar: PublicKey, parentName?: PublicKey, parentNameOwner?: PublicKey): TransactionInstruction;
}
export declare class createInstructionV3 {
    tag: number;
    name: string;
    space: number;
    referrerIdxOpt: number | null;
    static schema: Schema;
    constructor(obj: {
        name: string;
        space: number;
        referrerIdxOpt: number | null;
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, namingServiceProgram: PublicKey, rootDomain: PublicKey, name: PublicKey, reverseLookup: PublicKey, systemProgram: PublicKey, centralState: PublicKey, buyer: PublicKey, buyerTokenSource: PublicKey, pythMappingAcc: PublicKey, pythProductAcc: PublicKey, pythPriceAcc: PublicKey, vault: PublicKey, splTokenProgram: PublicKey, rentSysvar: PublicKey, state: PublicKey, referrerAccountOpt?: PublicKey): TransactionInstruction;
}
export declare class createWithNftInstruction {
    tag: number;
    name: string;
    space: number;
    static schema: Schema;
    constructor(obj: {
        name: string;
        space: number;
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, namingServiceProgram: PublicKey, rootDomain: PublicKey, name: PublicKey, reverseLookup: PublicKey, systemProgram: PublicKey, centralState: PublicKey, buyer: PublicKey, nftSource: PublicKey, nftMetadata: PublicKey, nftMint: PublicKey, masterEdition: PublicKey, collection: PublicKey, splTokenProgram: PublicKey, rentSysvar: PublicKey, state: PublicKey, mplTokenMetadata: PublicKey): TransactionInstruction;
}
export declare class burnInstruction {
    tag: number;
    static schema: Schema;
    constructor();
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, nameServiceId: PublicKey, systemProgram: PublicKey, domain: PublicKey, reverse: PublicKey, resellingState: PublicKey, state: PublicKey, centralState: PublicKey, owner: PublicKey, target: PublicKey): TransactionInstruction;
}
export declare function reallocInstruction(nameProgramId: PublicKey, systemProgramId: PublicKey, payerKey: PublicKey, nameAccountKey: PublicKey, nameOwnerKey: PublicKey, space: Numberu32): TransactionInstruction;

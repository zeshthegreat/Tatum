/// <reference types="node" />
import { Buffer } from "buffer";
import { Schema } from "borsh";
import { PublicKey, Connection } from "@solana/web3.js";
export declare const NAME_OFFERS_ID: PublicKey;
export declare class FavouriteDomain {
    tag: number;
    nameAccount: PublicKey;
    static schema: Schema;
    constructor(obj: {
        tag: number;
        nameAccount: Uint8Array;
    });
    /**
     * This function can be used to deserialize a Buffer into a FavouriteDomain object
     * @param data The buffer to deserialize
     * @returns
     */
    static deserialize(data: Buffer): FavouriteDomain;
    /**
     * This function can be used to retrieve and deserialize a favorite domain
     * @param connection The Solana RPC connection object
     * @param key The favorite account key
     * @returns
     */
    static retrieve(connection: Connection, key: PublicKey): Promise<FavouriteDomain>;
    /**
     * This function can be used to derive the key of a favorite domain
     * @param programId The name offer program ID
     * @param owner The owner to retrieve the favorite domain for
     * @returns
     */
    static getKey(programId: PublicKey, owner: PublicKey): Promise<[PublicKey, number]>;
    /**
     * This function can be used to derive the key of a favorite domain
     * @param programId The name offer program ID
     * @param owner The owner to retrieve the favorite domain for
     * @returns
     */
    static getKeySync(programId: PublicKey, owner: PublicKey): [PublicKey, number];
}
/**
 * This function can be used to retrieve the favorite domain of a user
 * @param connection The Solana RPC connection object
 * @param owner The owner you want to retrieve the favorite domain for
 * @returns
 */
export declare const getFavoriteDomain: (connection: Connection, owner: PublicKey) => Promise<{
    domain: PublicKey;
    reverse: string;
}>;

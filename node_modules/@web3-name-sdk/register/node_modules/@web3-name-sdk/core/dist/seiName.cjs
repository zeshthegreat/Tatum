"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/seiName.ts
var seiName_exports = {};
__export(seiName_exports, {
  createSeiName: () => createSeiName
});
module.exports = __toCommonJS(seiName_exports);

// src/tlds/sei/index.ts
var import_core = require("@sei-js/core");
var SeiName = class {
  async getDomainName({ address }) {
    try {
      const client = await (0, import_core.getCosmWasmClient)("https://sei-rpc.polkachu.com/");
      const seiSid = await import("@siddomains/sei-sidjs");
      const SeiID = seiSid.default.default;
      const getSeiIDAddress = seiSid.getSeiIDAddress;
      const seiId = new SeiID({ client, chainId: "pacific-1", seiIdAddress: getSeiIDAddress("pacific-1") });
      const name = await seiId.getName(address);
      return name;
    } catch (error) {
      console.error("Error getting SEI domain name", error);
      return null;
    }
  }
  async getAddress({ name }) {
    try {
      const client = await (0, import_core.getCosmWasmClient)("https://sei-rpc.polkachu.com/");
      const seiSid = await import("@siddomains/sei-sidjs");
      const SeiID = seiSid.default.default;
      const getSeiIDAddress = seiSid.getSeiIDAddress;
      const seiId = new SeiID({ client, chainId: "pacific-1", seiIdAddress: getSeiIDAddress("pacific-1") });
      const address = await seiId.name(name).getAddress();
      return address;
    } catch (error) {
      console.error("Error getting SEI address", error);
      return null;
    }
  }
};

// src/seiName.ts
function createSeiName() {
  return new SeiName();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createSeiName
});

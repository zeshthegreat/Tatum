import { Signer, Contract, BigNumber } from 'ethers';
import { PublicClient, WalletClient, Address } from 'viem';

type SupportedChainId = 1 | 56 | 42161 | 97 | 421613;
type ReferralSupportedChainId = 56 | 42161 | 97 | 421613;
type SIDRegisterOptions = {
    signer: Signer;
    sidAddress?: string;
    chainId: SupportedChainId;
};
type SIDRegisterOptionsV3 = {
    publicClient: PublicClient;
    walletClient: WalletClient;
    identifier: string;
    controllerAddr: Address;
    resolverAddr: Address;
    simulateAccount?: Address;
    simulateValue?: string;
};
type RegisterOptions = {
    referrer?: string;
    setPrimaryName?: boolean;
    onCommitSuccess?: (waitTime: number) => Promise<void>;
};
type RegisterOptionsV3 = {
    referrer?: Address;
    usePoint?: boolean;
    setPrimaryName?: boolean;
};

declare class SIDRegister {
    private readonly sidAddress;
    private readonly signer;
    private registrarController?;
    private readonly chainId;
    constructor(options: SIDRegisterOptions);
    getRegistrarController(): Promise<Contract>;
    private getPublicResolver;
    /**
     * Get the rent price for a name.
     * @param label
     * @param year number of registration years
     */
    getRentPrice(label: string, year: number): Promise<BigNumber>;
    /**
     * check if the domain is available for registration
     * @param label
     */
    getAvailable(label: string): Promise<boolean>;
    /**
     * register a domain
     * @param label
     * @param address the address to register
     * @param year
     * @param options.referrer optional parameter. the referrer domain. only work for .bnb and .arb domain
     * @param options.setPrimaryName optional parameter. register and set the domain as primary name. only work for .bnb and .arb domain
     * @param options.onCommitSuccess optional parameter. callback function when the commitment is successful. only required for .eth domain
     */
    register(label: string, address: string, year: number, options?: RegisterOptions): Promise<string>;
}

declare class SIDRegisterV3 {
    private readonly publicClient;
    private readonly walletClient;
    private readonly identifier;
    private readonly controllerAddr;
    private readonly resolverAddr;
    private readonly simulateAccount;
    private readonly simulateValue;
    constructor(options: SIDRegisterOptionsV3);
    private validateName;
    /**
     * Get the rent price for a name in wei.
     * @param label
     * @param year number of registration years
     * @param options.referrer optional parameter. the referrer domain.
     * @param options.usePoint optional parameter. use gift card points to pay for the domain.
     * @param options.setPrimaryName optional parameter. register and set the domain as primary name.
     */
    getRentPrice(label: string, year: number, options?: RegisterOptionsV3): Promise<bigint | undefined>;
    /**
     * check if the domain is available for registration
     * @param label
     */
    getAvailable(label: string): Promise<boolean>;
    /**
     * register a domain
     * @param label
     * @param address the address to register
     * @param year
     * @param options.referrer optional parameter. the referrer domain. only work for .bnb and .arb domain
     * @param options.usePoint optional parameter. use gift card points to pay for the domain.
     * @param options.setPrimaryName optional parameter. register and set the domain as primary name.
     */
    register(label: string, address: Address, year: number, options?: RegisterOptionsV3): Promise<string>;
}

declare function validateNameV3(label: string): string;

export { ReferralSupportedChainId, RegisterOptions, RegisterOptionsV3, SIDRegister, SIDRegisterOptions, SIDRegisterOptionsV3, SIDRegisterV3, SupportedChainId, SIDRegister as default, validateNameV3 };

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.MsgClaimVoucherDesc = exports.MsgRevokeNamespaceRolesDesc = exports.MsgUpdateNamespaceRolesDesc = exports.MsgUpdateNamespaceDesc = exports.MsgDeleteNamespaceDesc = exports.MsgCreateNamespaceDesc = exports.MsgUpdateParamsDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgClaimVoucherResponse = exports.MsgClaimVoucher = exports.MsgRevokeNamespaceRolesResponse = exports.MsgRevokeNamespaceRoles = exports.MsgUpdateNamespaceRolesResponse = exports.MsgUpdateNamespaceRoles = exports.MsgUpdateNamespaceResponse = exports.MsgUpdateNamespace_MsgSetBurnsPaused = exports.MsgUpdateNamespace_MsgSetSendsPaused = exports.MsgUpdateNamespace_MsgSetMintsPaused = exports.MsgUpdateNamespace_MsgSetWasmHook = exports.MsgUpdateNamespace = exports.MsgDeleteNamespaceResponse = exports.MsgDeleteNamespace = exports.MsgCreateNamespaceResponse = exports.MsgCreateNamespace = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@injectivelabs/grpc-web");
const browser_headers_1 = require("browser-headers");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const params_1 = require("./params");
const permissions_1 = require("./permissions");
exports.protobufPackage = "injective.permissions.v1beta1";
function createBaseMsgUpdateParams() {
    return { authority: "", params: undefined };
}
exports.MsgUpdateParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? String(object.authority) : "",
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateParams();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.params = (object.params !== undefined && object.params !== null)
            ? params_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
};
function createBaseMsgCreateNamespace() {
    return { sender: "", namespace: undefined };
}
exports.MsgCreateNamespace = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.namespace !== undefined) {
            permissions_1.Namespace.encode(message.namespace, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateNamespace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.namespace = permissions_1.Namespace.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : "",
            namespace: isSet(object.namespace) ? permissions_1.Namespace.fromJSON(object.namespace) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.namespace !== undefined &&
            (obj.namespace = message.namespace ? permissions_1.Namespace.toJSON(message.namespace) : undefined);
        return obj;
    },
    create(base) {
        return exports.MsgCreateNamespace.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgCreateNamespace();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.namespace = (object.namespace !== undefined && object.namespace !== null)
            ? permissions_1.Namespace.fromPartial(object.namespace)
            : undefined;
        return message;
    },
};
function createBaseMsgCreateNamespaceResponse() {
    return {};
}
exports.MsgCreateNamespaceResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateNamespaceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgCreateNamespaceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgCreateNamespaceResponse();
        return message;
    },
};
function createBaseMsgDeleteNamespace() {
    return { sender: "", namespaceDenom: "" };
}
exports.MsgDeleteNamespace = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.namespaceDenom !== "") {
            writer.uint32(18).string(message.namespaceDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteNamespace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.namespaceDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : "",
            namespaceDenom: isSet(object.namespaceDenom) ? String(object.namespaceDenom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.namespaceDenom !== undefined && (obj.namespaceDenom = message.namespaceDenom);
        return obj;
    },
    create(base) {
        return exports.MsgDeleteNamespace.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgDeleteNamespace();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.namespaceDenom = (_b = object.namespaceDenom) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgDeleteNamespaceResponse() {
    return {};
}
exports.MsgDeleteNamespaceResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteNamespaceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgDeleteNamespaceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgDeleteNamespaceResponse();
        return message;
    },
};
function createBaseMsgUpdateNamespace() {
    return {
        sender: "",
        namespaceDenom: "",
        wasmHook: undefined,
        mintsPaused: undefined,
        sendsPaused: undefined,
        burnsPaused: undefined,
    };
}
exports.MsgUpdateNamespace = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.namespaceDenom !== "") {
            writer.uint32(18).string(message.namespaceDenom);
        }
        if (message.wasmHook !== undefined) {
            exports.MsgUpdateNamespace_MsgSetWasmHook.encode(message.wasmHook, writer.uint32(26).fork()).ldelim();
        }
        if (message.mintsPaused !== undefined) {
            exports.MsgUpdateNamespace_MsgSetMintsPaused.encode(message.mintsPaused, writer.uint32(34).fork()).ldelim();
        }
        if (message.sendsPaused !== undefined) {
            exports.MsgUpdateNamespace_MsgSetSendsPaused.encode(message.sendsPaused, writer.uint32(42).fork()).ldelim();
        }
        if (message.burnsPaused !== undefined) {
            exports.MsgUpdateNamespace_MsgSetBurnsPaused.encode(message.burnsPaused, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.namespaceDenom = reader.string();
                    break;
                case 3:
                    message.wasmHook = exports.MsgUpdateNamespace_MsgSetWasmHook.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.mintsPaused = exports.MsgUpdateNamespace_MsgSetMintsPaused.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.sendsPaused = exports.MsgUpdateNamespace_MsgSetSendsPaused.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.burnsPaused = exports.MsgUpdateNamespace_MsgSetBurnsPaused.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : "",
            namespaceDenom: isSet(object.namespaceDenom) ? String(object.namespaceDenom) : "",
            wasmHook: isSet(object.wasmHook) ? exports.MsgUpdateNamespace_MsgSetWasmHook.fromJSON(object.wasmHook) : undefined,
            mintsPaused: isSet(object.mintsPaused)
                ? exports.MsgUpdateNamespace_MsgSetMintsPaused.fromJSON(object.mintsPaused)
                : undefined,
            sendsPaused: isSet(object.sendsPaused)
                ? exports.MsgUpdateNamespace_MsgSetSendsPaused.fromJSON(object.sendsPaused)
                : undefined,
            burnsPaused: isSet(object.burnsPaused)
                ? exports.MsgUpdateNamespace_MsgSetBurnsPaused.fromJSON(object.burnsPaused)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.namespaceDenom !== undefined && (obj.namespaceDenom = message.namespaceDenom);
        message.wasmHook !== undefined &&
            (obj.wasmHook = message.wasmHook ? exports.MsgUpdateNamespace_MsgSetWasmHook.toJSON(message.wasmHook) : undefined);
        message.mintsPaused !== undefined && (obj.mintsPaused = message.mintsPaused
            ? exports.MsgUpdateNamespace_MsgSetMintsPaused.toJSON(message.mintsPaused)
            : undefined);
        message.sendsPaused !== undefined && (obj.sendsPaused = message.sendsPaused
            ? exports.MsgUpdateNamespace_MsgSetSendsPaused.toJSON(message.sendsPaused)
            : undefined);
        message.burnsPaused !== undefined && (obj.burnsPaused = message.burnsPaused
            ? exports.MsgUpdateNamespace_MsgSetBurnsPaused.toJSON(message.burnsPaused)
            : undefined);
        return obj;
    },
    create(base) {
        return exports.MsgUpdateNamespace.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgUpdateNamespace();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.namespaceDenom = (_b = object.namespaceDenom) !== null && _b !== void 0 ? _b : "";
        message.wasmHook = (object.wasmHook !== undefined && object.wasmHook !== null)
            ? exports.MsgUpdateNamespace_MsgSetWasmHook.fromPartial(object.wasmHook)
            : undefined;
        message.mintsPaused = (object.mintsPaused !== undefined && object.mintsPaused !== null)
            ? exports.MsgUpdateNamespace_MsgSetMintsPaused.fromPartial(object.mintsPaused)
            : undefined;
        message.sendsPaused = (object.sendsPaused !== undefined && object.sendsPaused !== null)
            ? exports.MsgUpdateNamespace_MsgSetSendsPaused.fromPartial(object.sendsPaused)
            : undefined;
        message.burnsPaused = (object.burnsPaused !== undefined && object.burnsPaused !== null)
            ? exports.MsgUpdateNamespace_MsgSetBurnsPaused.fromPartial(object.burnsPaused)
            : undefined;
        return message;
    },
};
function createBaseMsgUpdateNamespace_MsgSetWasmHook() {
    return { newValue: "" };
}
exports.MsgUpdateNamespace_MsgSetWasmHook = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.newValue !== "") {
            writer.uint32(10).string(message.newValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespace_MsgSetWasmHook();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.newValue = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { newValue: isSet(object.newValue) ? String(object.newValue) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.newValue !== undefined && (obj.newValue = message.newValue);
        return obj;
    },
    create(base) {
        return exports.MsgUpdateNamespace_MsgSetWasmHook.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateNamespace_MsgSetWasmHook();
        message.newValue = (_a = object.newValue) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseMsgUpdateNamespace_MsgSetMintsPaused() {
    return { newValue: false };
}
exports.MsgUpdateNamespace_MsgSetMintsPaused = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.newValue === true) {
            writer.uint32(8).bool(message.newValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespace_MsgSetMintsPaused();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.newValue = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { newValue: isSet(object.newValue) ? Boolean(object.newValue) : false };
    },
    toJSON(message) {
        const obj = {};
        message.newValue !== undefined && (obj.newValue = message.newValue);
        return obj;
    },
    create(base) {
        return exports.MsgUpdateNamespace_MsgSetMintsPaused.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateNamespace_MsgSetMintsPaused();
        message.newValue = (_a = object.newValue) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseMsgUpdateNamespace_MsgSetSendsPaused() {
    return { newValue: false };
}
exports.MsgUpdateNamespace_MsgSetSendsPaused = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.newValue === true) {
            writer.uint32(8).bool(message.newValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespace_MsgSetSendsPaused();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.newValue = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { newValue: isSet(object.newValue) ? Boolean(object.newValue) : false };
    },
    toJSON(message) {
        const obj = {};
        message.newValue !== undefined && (obj.newValue = message.newValue);
        return obj;
    },
    create(base) {
        return exports.MsgUpdateNamespace_MsgSetSendsPaused.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateNamespace_MsgSetSendsPaused();
        message.newValue = (_a = object.newValue) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseMsgUpdateNamespace_MsgSetBurnsPaused() {
    return { newValue: false };
}
exports.MsgUpdateNamespace_MsgSetBurnsPaused = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.newValue === true) {
            writer.uint32(8).bool(message.newValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespace_MsgSetBurnsPaused();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.newValue = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { newValue: isSet(object.newValue) ? Boolean(object.newValue) : false };
    },
    toJSON(message) {
        const obj = {};
        message.newValue !== undefined && (obj.newValue = message.newValue);
        return obj;
    },
    create(base) {
        return exports.MsgUpdateNamespace_MsgSetBurnsPaused.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateNamespace_MsgSetBurnsPaused();
        message.newValue = (_a = object.newValue) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseMsgUpdateNamespaceResponse() {
    return {};
}
exports.MsgUpdateNamespaceResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespaceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateNamespaceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateNamespaceResponse();
        return message;
    },
};
function createBaseMsgUpdateNamespaceRoles() {
    return { sender: "", namespaceDenom: "", rolePermissions: [], addressRoles: [] };
}
exports.MsgUpdateNamespaceRoles = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.namespaceDenom !== "") {
            writer.uint32(18).string(message.namespaceDenom);
        }
        for (const v of message.rolePermissions) {
            permissions_1.Role.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.addressRoles) {
            permissions_1.AddressRoles.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespaceRoles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.namespaceDenom = reader.string();
                    break;
                case 3:
                    message.rolePermissions.push(permissions_1.Role.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.addressRoles.push(permissions_1.AddressRoles.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : "",
            namespaceDenom: isSet(object.namespaceDenom) ? String(object.namespaceDenom) : "",
            rolePermissions: Array.isArray(object === null || object === void 0 ? void 0 : object.rolePermissions)
                ? object.rolePermissions.map((e) => permissions_1.Role.fromJSON(e))
                : [],
            addressRoles: Array.isArray(object === null || object === void 0 ? void 0 : object.addressRoles)
                ? object.addressRoles.map((e) => permissions_1.AddressRoles.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.namespaceDenom !== undefined && (obj.namespaceDenom = message.namespaceDenom);
        if (message.rolePermissions) {
            obj.rolePermissions = message.rolePermissions.map((e) => e ? permissions_1.Role.toJSON(e) : undefined);
        }
        else {
            obj.rolePermissions = [];
        }
        if (message.addressRoles) {
            obj.addressRoles = message.addressRoles.map((e) => e ? permissions_1.AddressRoles.toJSON(e) : undefined);
        }
        else {
            obj.addressRoles = [];
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateNamespaceRoles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgUpdateNamespaceRoles();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.namespaceDenom = (_b = object.namespaceDenom) !== null && _b !== void 0 ? _b : "";
        message.rolePermissions = ((_c = object.rolePermissions) === null || _c === void 0 ? void 0 : _c.map((e) => permissions_1.Role.fromPartial(e))) || [];
        message.addressRoles = ((_d = object.addressRoles) === null || _d === void 0 ? void 0 : _d.map((e) => permissions_1.AddressRoles.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMsgUpdateNamespaceRolesResponse() {
    return {};
}
exports.MsgUpdateNamespaceRolesResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespaceRolesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateNamespaceRolesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateNamespaceRolesResponse();
        return message;
    },
};
function createBaseMsgRevokeNamespaceRoles() {
    return { sender: "", namespaceDenom: "", addressRolesToRevoke: [] };
}
exports.MsgRevokeNamespaceRoles = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.namespaceDenom !== "") {
            writer.uint32(18).string(message.namespaceDenom);
        }
        for (const v of message.addressRolesToRevoke) {
            permissions_1.AddressRoles.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRevokeNamespaceRoles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.namespaceDenom = reader.string();
                    break;
                case 3:
                    message.addressRolesToRevoke.push(permissions_1.AddressRoles.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : "",
            namespaceDenom: isSet(object.namespaceDenom) ? String(object.namespaceDenom) : "",
            addressRolesToRevoke: Array.isArray(object === null || object === void 0 ? void 0 : object.addressRolesToRevoke)
                ? object.addressRolesToRevoke.map((e) => permissions_1.AddressRoles.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.namespaceDenom !== undefined && (obj.namespaceDenom = message.namespaceDenom);
        if (message.addressRolesToRevoke) {
            obj.addressRolesToRevoke = message.addressRolesToRevoke.map((e) => e ? permissions_1.AddressRoles.toJSON(e) : undefined);
        }
        else {
            obj.addressRolesToRevoke = [];
        }
        return obj;
    },
    create(base) {
        return exports.MsgRevokeNamespaceRoles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgRevokeNamespaceRoles();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.namespaceDenom = (_b = object.namespaceDenom) !== null && _b !== void 0 ? _b : "";
        message.addressRolesToRevoke = ((_c = object.addressRolesToRevoke) === null || _c === void 0 ? void 0 : _c.map((e) => permissions_1.AddressRoles.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMsgRevokeNamespaceRolesResponse() {
    return {};
}
exports.MsgRevokeNamespaceRolesResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRevokeNamespaceRolesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgRevokeNamespaceRolesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgRevokeNamespaceRolesResponse();
        return message;
    },
};
function createBaseMsgClaimVoucher() {
    return { sender: "", denom: "" };
}
exports.MsgClaimVoucher = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgClaimVoucher();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.denom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : "",
            denom: isSet(object.denom) ? String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.denom !== undefined && (obj.denom = message.denom);
        return obj;
    },
    create(base) {
        return exports.MsgClaimVoucher.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgClaimVoucher();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgClaimVoucherResponse() {
    return {};
}
exports.MsgClaimVoucherResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgClaimVoucherResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgClaimVoucherResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgClaimVoucherResponse();
        return message;
    },
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.UpdateParams = this.UpdateParams.bind(this);
        this.CreateNamespace = this.CreateNamespace.bind(this);
        this.DeleteNamespace = this.DeleteNamespace.bind(this);
        this.UpdateNamespace = this.UpdateNamespace.bind(this);
        this.UpdateNamespaceRoles = this.UpdateNamespaceRoles.bind(this);
        this.RevokeNamespaceRoles = this.RevokeNamespaceRoles.bind(this);
        this.ClaimVoucher = this.ClaimVoucher.bind(this);
    }
    UpdateParams(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateParamsDesc, exports.MsgUpdateParams.fromPartial(request), metadata);
    }
    CreateNamespace(request, metadata) {
        return this.rpc.unary(exports.MsgCreateNamespaceDesc, exports.MsgCreateNamespace.fromPartial(request), metadata);
    }
    DeleteNamespace(request, metadata) {
        return this.rpc.unary(exports.MsgDeleteNamespaceDesc, exports.MsgDeleteNamespace.fromPartial(request), metadata);
    }
    UpdateNamespace(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateNamespaceDesc, exports.MsgUpdateNamespace.fromPartial(request), metadata);
    }
    UpdateNamespaceRoles(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateNamespaceRolesDesc, exports.MsgUpdateNamespaceRoles.fromPartial(request), metadata);
    }
    RevokeNamespaceRoles(request, metadata) {
        return this.rpc.unary(exports.MsgRevokeNamespaceRolesDesc, exports.MsgRevokeNamespaceRoles.fromPartial(request), metadata);
    }
    ClaimVoucher(request, metadata) {
        return this.rpc.unary(exports.MsgClaimVoucherDesc, exports.MsgClaimVoucher.fromPartial(request), metadata);
    }
}
exports.MsgClientImpl = MsgClientImpl;
exports.MsgDesc = { serviceName: "injective.permissions.v1beta1.Msg" };
exports.MsgUpdateParamsDesc = {
    methodName: "UpdateParams",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateParams.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateParamsResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgCreateNamespaceDesc = {
    methodName: "CreateNamespace",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgCreateNamespace.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgCreateNamespaceResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgDeleteNamespaceDesc = {
    methodName: "DeleteNamespace",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgDeleteNamespace.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgDeleteNamespaceResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgUpdateNamespaceDesc = {
    methodName: "UpdateNamespace",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateNamespace.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateNamespaceResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgUpdateNamespaceRolesDesc = {
    methodName: "UpdateNamespaceRoles",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateNamespaceRoles.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateNamespaceRolesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgRevokeNamespaceRolesDesc = {
    methodName: "RevokeNamespaceRoles",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgRevokeNamespaceRoles.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgRevokeNamespaceRolesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgClaimVoucherDesc = {
    methodName: "ClaimVoucher",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgClaimVoucher.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgClaimVoucherResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends tsProtoGlobalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;

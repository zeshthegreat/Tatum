import { MsgBase } from '../../MsgBase';
import snakecaseKeys from 'snakecase-keys';
import { InjectivePermissionsV1Beta1Tx } from '@injectivelabs/core-proto-ts';
/**
 * @category Messages
 */
export default class MsgUpdateNamespace extends MsgBase {
    static fromJSON(params) {
        return new MsgUpdateNamespace(params);
    }
    toProto() {
        const { params } = this;
        const message = InjectivePermissionsV1Beta1Tx.MsgUpdateNamespace.create();
        message.sender = params.sender;
        message.namespaceDenom = params.namespaceDenom;
        message.wasmHook = {
            newValue: params.wasmHook.newValue,
        };
        message.mintsPaused = {
            newValue: params.mintsPaused.newValue,
        };
        message.sendsPaused = {
            newValue: params.sendsPaused.newValue,
        };
        message.burnsPaused = {
            newValue: params.burnsPaused.newValue,
        };
        return InjectivePermissionsV1Beta1Tx.MsgUpdateNamespace.fromPartial(message);
    }
    toData() {
        const proto = this.toProto();
        return {
            '@type': '/injective.permissions.v1beta1.MsgUpdateNamespace',
            ...proto,
        };
    }
    toAmino() {
        const proto = this.toProto();
        const message = {
            ...snakecaseKeys(proto),
        };
        return {
            type: 'permissions/MsgUpdateNamespace',
            value: message,
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        return {
            '@type': '/injective.permissions.v1beta1.MsgUpdateNamespace',
            ...value,
        };
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/injective.permissions.v1beta1.MsgUpdateNamespace',
            message: proto,
        };
    }
    toBinary() {
        return InjectivePermissionsV1Beta1Tx.MsgUpdateNamespace.encode(this.toProto()).finish();
    }
}
//# sourceMappingURL=MsgUpdateNamespace.js.map
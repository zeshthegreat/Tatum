import { GrpcUnaryRequestException, UnspecifiedErrorCode, } from '@injectivelabs/exceptions';
import { InjectivePermissionsV1Beta1Query } from '@injectivelabs/core-proto-ts';
import BaseGrpcConsumer from '../../base/BaseGrpcConsumer';
import { ChainGrpcPermissionsTransformer } from '../transformers';
import { ChainModule } from '../types';
/**
 * @category Chain Grpc API
 */
export class ChainGrpcPermissionsApi extends BaseGrpcConsumer {
    module = ChainModule.Permissions;
    client;
    constructor(endpoint) {
        super(endpoint);
        this.client = new InjectivePermissionsV1Beta1Query.QueryClientImpl(this.getGrpcWebImpl(endpoint));
    }
    async fetchAddressesByRole({ denom, role }) {
        const request = InjectivePermissionsV1Beta1Query.QueryAddressesByRoleRequest.create();
        request.denom = denom;
        request.role = role;
        try {
            const response = await this.retry(() => this.client.AddressesByRole(request, this.metadata));
            return ChainGrpcPermissionsTransformer.addressesByRolesResponseToAddressesByRoles(response);
        }
        catch (e) {
            if (e instanceof InjectivePermissionsV1Beta1Query.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    context: 'AddressesByRole',
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                context: 'AddressesByRole',
            });
        }
    }
    async fetchAddressRoles({ address, denom, }) {
        const request = InjectivePermissionsV1Beta1Query.QueryAddressRolesRequest.create();
        request.address = address;
        request.denom = denom;
        try {
            const response = await this.retry(() => this.client.AddressRoles(request, this.metadata));
            return ChainGrpcPermissionsTransformer.addressRolesResponseToAddressRoles(response);
        }
        catch (e) {
            if (e instanceof InjectivePermissionsV1Beta1Query.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    context: 'AddressRoles',
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                context: 'AddressRoles',
            });
        }
    }
    async fetchAllNamespaces() {
        const request = InjectivePermissionsV1Beta1Query.QueryAllNamespacesRequest.create();
        try {
            const response = await this.retry(() => this.client.AllNamespaces(request, this.metadata));
            return ChainGrpcPermissionsTransformer.allNamespacesResponseToAllNamespaces(response);
        }
        catch (e) {
            if (e instanceof InjectivePermissionsV1Beta1Query.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    context: 'AllNamespaces',
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                context: 'AllNamespaces',
            });
        }
    }
    async fetchModuleParams() {
        const request = InjectivePermissionsV1Beta1Query.QueryParamsRequest.create();
        try {
            const response = await this.retry(() => this.client.Params(request, this.metadata));
            return ChainGrpcPermissionsTransformer.moduleParamsResponseToModuleParams(response);
        }
        catch (e) {
            if (e instanceof InjectivePermissionsV1Beta1Query.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    context: 'Params',
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                context: 'Params',
            });
        }
    }
    async fetchNamespaceByDenom({ denom, includeRoles, }) {
        const request = InjectivePermissionsV1Beta1Query.QueryNamespaceByDenomRequest.create();
        request.denom = denom;
        request.includeRoles = includeRoles;
        try {
            const response = await this.retry(() => this.client.NamespaceByDenom(request, this.metadata));
            return ChainGrpcPermissionsTransformer.namespaceByDenomResponceToNamespaceByDenom(response);
        }
        catch (e) {
            if (e instanceof InjectivePermissionsV1Beta1Query.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    context: 'NamespaceByDenom',
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                context: 'NamespaceByDenom',
            });
        }
    }
    async fetchVouchersForAddress({ address }) {
        const request = InjectivePermissionsV1Beta1Query.QueryVouchersForAddressRequest.create();
        request.address = address;
        try {
            const response = await this.retry(() => this.client.VouchersForAddress(request, this.metadata));
            return ChainGrpcPermissionsTransformer.vouchersForAddressResponseToVouchersForAddress(response);
        }
        catch (e) {
            if (e instanceof InjectivePermissionsV1Beta1Query.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    context: 'VouchersForAddress',
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                context: 'VouchersForAddress',
            });
        }
    }
}
//# sourceMappingURL=ChainGrpcPermissionsApi.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcWeb3GwApi = void 0;
const utils_1 = require("@injectivelabs/utils");
const types_1 = require("../types");
const exceptions_1 = require("@injectivelabs/exceptions");
const indexer_proto_ts_1 = require("@injectivelabs/indexer-proto-ts");
const core_proto_ts_1 = require("@injectivelabs/core-proto-ts");
const IndexerGrpcTransactionApi_1 = require("./IndexerGrpcTransactionApi");
/**
 * @category Indexer Grpc API
 */
class IndexerGrpcWeb3GwApi extends IndexerGrpcTransactionApi_1.IndexerGrpcTransactionApi {
    constructor(endpoint) {
        super(endpoint);
        this.module = types_1.IndexerModule.Web3Gw;
    }
    prepareEip712Request(_a) {
        return __awaiter(this, arguments, void 0, function* ({ address, chainId, message, memo, sequence, accountNumber, estimateGas = true, gasLimit = utils_1.DEFAULT_GAS_LIMIT, feeDenom = utils_1.DEFAULT_BRIDGE_FEE_DENOM, feePrice = utils_1.DEFAULT_BRIDGE_FEE_PRICE, timeoutHeight, eip712Version = 'v1', }) {
            const txFeeAmount = core_proto_ts_1.CosmosBaseV1Beta1Coin.Coin.create();
            txFeeAmount.denom = feeDenom;
            txFeeAmount.amount = feePrice;
            const cosmosTxFee = indexer_proto_ts_1.InjectiveExchangeRpc.CosmosTxFee.create();
            cosmosTxFee.price = [txFeeAmount];
            if (!estimateGas) {
                cosmosTxFee.gas = gasLimit.toString();
            }
            const prepareTxRequest = indexer_proto_ts_1.InjectiveExchangeRpc.PrepareEip712Request.create();
            prepareTxRequest.chainId = chainId.toString();
            prepareTxRequest.signerAddress = address;
            prepareTxRequest.fee = cosmosTxFee;
            const arrayOfMessages = Array.isArray(message) ? message : [message];
            const messagesList = arrayOfMessages.map((message) => Buffer.from(JSON.stringify(message), 'utf8'));
            prepareTxRequest.msgs = messagesList;
            if (timeoutHeight !== undefined) {
                prepareTxRequest.timeoutHeight = timeoutHeight.toString();
            }
            if (memo) {
                prepareTxRequest.memo = typeof memo === 'number' ? memo.toString() : memo;
            }
            if (eip712Version) {
                prepareTxRequest.eip712Wrapper = eip712Version;
            }
            if (accountNumber) {
                prepareTxRequest.accountNumber = accountNumber.toString();
            }
            if (sequence) {
                prepareTxRequest.sequence = sequence.toString();
            }
            try {
                const response = yield this.client.PrepareEip712(prepareTxRequest);
                return response;
            }
            catch (e) {
                if (e instanceof indexer_proto_ts_1.InjectiveExchangeRpc.GrpcWebError) {
                    throw new exceptions_1.TransactionException(new Error(e.toString()), {
                        code: e.code,
                        context: 'PrepareEip712',
                        contextModule: 'Web3Gateway',
                        type: e.type,
                    });
                }
                throw new exceptions_1.TransactionException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    context: 'PrepareEip712',
                    contextModule: 'Web3Gateway',
                    type: exceptions_1.ErrorType.Web3Gateway,
                });
            }
        });
    }
}
exports.IndexerGrpcWeb3GwApi = IndexerGrpcWeb3GwApi;
//# sourceMappingURL=IndexerGrpcWeb3GwApi.js.map
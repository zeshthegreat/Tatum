import{deleteInstruction as o}from"../instructions/deleteInstruction.mjs";import{updateInstruction as t}from"../instructions/updateInstruction.mjs";import{Numberu32 as r}from"../int.mjs";import{NAME_PROGRAM_ID as m}from"../constants.mjs";import{check as n}from"../utils/check.mjs";import{getDomainKeySync as e}from"../utils/getDomainKeySync.mjs";import{serializeSolRecord as i}from"../record/serializeSolRecord.mjs";import{RecordVersion as s,Record as c}from"../types/record.mjs";import{AccountDoesNotExistError as a}from"../error.mjs";import{createSolRecordInstruction as u}from"./createSolRecordInstruction.mjs";const p=async(p,d,f,l,j,y)=>{const{pubkey:w}=e(`${c.SOL}.${d}`,s.V1),I=await p.getAccountInfo(w);if(n(!!(null==I?void 0:I.data),new a("The record account does not exist")),96!==(null==I?void 0:I.data.length))return[o(m,w,y,l),await u(p,d,f,l,j,y)];const S=i(f,w,l,j);return t(m,w,new r(0),S,l)};export{p as updateSolRecordInstruction};
//# sourceMappingURL=updateSolRecordInstruction.mjs.map

import{PublicKey as t}from"@solana/web3.js";import{sha256 as a}from"../node_modules/@noble/hashes/esm/sha256.mjs";import{NAME_PROGRAM_ID as e,REVERSE_LOOKUP_CLASS as r,HASH_PREFIX as o,ROOT_DOMAIN_ACCOUNT as n}from"../constants.mjs";import{NameRegistryState as i}from"../state.mjs";import"../node_modules/buffer/index.mjs";import{AccountDoesNotExistError as s,NoAccountDataError as u,InvalidInputError as c}from"../error.mjs";import{__exports as f}from"../_virtual/index.mjs";async function m(t,a){if(!await t.getAccountInfo(a))throw new s("The name account does exist");return i.retrieve(t,a)}async function d(t){const e=o+t,r=a(f.Buffer.from(e,"utf8"));return f.Buffer.from(r)}async function p(a,r,o){const n=[a];r?n.push(r.toBuffer()):n.push(f.Buffer.alloc(32)),o?n.push(o.toBuffer()):n.push(f.Buffer.alloc(32));const[i]=await t.findProgramAddress(n,e);return i}async function w(t,a){const e=await d(a.toBase58()),o=await p(e,r),{registry:n}=await i.retrieve(t,o);if(!n.data)throw new u("The registry data is empty");const s=n.data.slice(0,4).readUInt32LE(0);return n.data.slice(4,4+s).toString()}async function l(t,a){let e=[];for(let t of a){const a=await d(t.toBase58()),o=await p(a,r);e.push(o)}return(await i.retrieveBatch(t,e)).map((t=>{if(void 0===t||void 0===t.data)return;const a=t.data.slice(0,4).readUInt32LE(0);return t.data.slice(4,4+a).toString()}))}const h=async(t,a=n)=>{let e=await d(t);return{pubkey:await p(e,void 0,a),hashed:e}},y=async(t,a=!1)=>{t.endsWith(".sol")&&(t=t.slice(0,-4));const e=t.split(".");if(2===e.length){const t=f.Buffer.from([a?1:0]).toString().concat(e[0]),{pubkey:r}=await h(e[1]);return{...await h(t,r),isSub:!0,parent:r}}if(3===e.length&&a){const{pubkey:t}=await h(e[2]),{pubkey:a}=await h("\0".concat(e[1]),t),r=f.Buffer.from([1]).toString();return{...await h(r.concat(e[0]),a),isSub:!0,parent:t,isSubRecord:!0}}if(e.length>=3)throw new c("The domain is malformed");return{...await h(t,n),isSub:!1,parent:void 0}},b=async(t,a)=>{const{pubkey:e,parent:o}=await y(t),n=await d(e.toBase58());return await p(n,r,a?o:void 0)};export{y as getDomainKey,d as getHashedName,p as getNameAccountKey,m as getNameOwner,b as getReverseKey,w as performReverseLookup,l as performReverseLookupBatch};
//# sourceMappingURL=utils.mjs.map

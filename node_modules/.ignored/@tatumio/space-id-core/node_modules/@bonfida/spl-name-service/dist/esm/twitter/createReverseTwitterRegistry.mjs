import{serialize as t}from"../node_modules/borsh/lib/esm/index.mjs";import"../node_modules/buffer/index.mjs";import{SystemProgram as e}from"@solana/web3.js";import{TWITTER_ROOT_PARENT_REGISTRY_KEY as r,TWITTER_VERIFICATION_AUTHORITY as m,NAME_PROGRAM_ID as o}from"../constants.mjs";import{createInstruction as s}from"../instructions/createInstruction.mjs";import{updateInstruction as i}from"../instructions/updateInstruction.mjs";import{NameRegistryState as n}from"../state.mjs";import{getHashedNameSync as a}from"../utils/getHashedNameSync.mjs";import{getNameAccountKeySync as f}from"../utils/getNameAccountKeySync.mjs";import{Numberu32 as p,Numberu64 as u}from"../int.mjs";import{ReverseTwitterRegistryState as c}from"./ReverseTwitterRegistryState.mjs";import{__exports as j}from"../_virtual/index.mjs";async function l(l,d,g,w,y){const x=a(w.toString()),_=f(x,m,r);let h=t(c.schema,new c({twitterRegistryKey:g.toBytes(),twitterHandle:d}));return[s(o,e.programId,_,w,y,x,new u(await l.getMinimumBalanceForRentExemption(h.length+n.HEADER_LEN)),new p(h.length),m,r,m),i(o,_,new p(0),j.Buffer.from(h),m)]}export{l as createReverseTwitterRegistry};
//# sourceMappingURL=createReverseTwitterRegistry.mjs.map

{"version":3,"file":"index.cjs","sources":["../../../../node_modules/tiny-inflate/index.js"],"sourcesContent":["var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    return TINF_DATA_ERROR;\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      throw new Error('Data error');\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      return d.dest.slice(0, d.destLen);\n    else\n      return d.dest.subarray(0, d.destLen);\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nmodule.exports = tinf_uncompress;\n"],"names":["TINF_OK","TINF_DATA_ERROR","Tree","this","table","Uint16Array","trans","Data","source","dest","sourceIndex","tag","bitcount","destLen","ltree","dtree","sltree","sdtree","length_bits","Uint8Array","length_base","dist_bits","dist_base","clcidx","code_tree","lengths","tinf_build_bits_base","bits","base","delta","first","i","sum","offs","tinf_build_tree","t","off","num","tinf_getbit","d","bit","tinf_read_bits","val","tinf_decode_symbol","cur","len","tinf_decode_trees","lt","dt","hlit","hdist","hclen","length","clen","sym","prev","tinf_inflate_block_data","dist","tinf_inflate_uncompressed_block","tinf_build_fixed_trees","tinyInflate","bfinal","res","Error","slice","subarray"],"mappings":"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","x_google_ignoreList":[0]}
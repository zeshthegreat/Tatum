"use strict";var e=require("@solana/web3.js"),t=require("../instructions/createInstructionV3.cjs"),n=require("../constants.cjs"),s=require("../utils/getHashedNameSync.cjs"),o=require("../utils/getNameAccountKeySync.cjs"),r=require("../error.cjs"),c=require("../node_modules/@solana/spl-token/lib/esm/state/mint.cjs"),a=require("../node_modules/@solana/spl-token/lib/esm/instructions/associatedTokenAccount.cjs"),i=require("../node_modules/@solana/spl-token/lib/esm/constants.cjs");exports.registerDomainName=async(u,d,l,A,m,T=n.USDC_MINT,_)=>{if(d.includes(".")||d.trim().toLowerCase()!==d)throw new r.InvalidDomainError("The domain name is malformed");const R=s.getHashedNameSync(d),E=o.getNameAccountKeySync(R,void 0,n.ROOT_DOMAIN_ACCOUNT),I=s.getHashedNameSync(E.toBase58()),N=o.getNameAccountKeySync(I,n.CENTRAL_STATE),[y]=e.PublicKey.findProgramAddressSync([E.toBuffer()],n.REGISTER_PROGRAM_ID),S=n.REFERRERS.findIndex((e=>null==_?void 0:_.equals(e)));let P;const g=[];if(-1!==S&&_){P=c.getAssociatedTokenAddressSync(T,_,!0);const e=await u.getAccountInfo(P);if(!(null==e?void 0:e.data)){const e=a.createAssociatedTokenAccountIdempotentInstruction(A,P,_,T);g.push(e)}}const O=c.getAssociatedTokenAddressSync(T,n.VAULT_OWNER,!0),f=n.PYTH_FEEDS.get(T.toBase58());if(!f)throw new r.PythFeedNotFoundError("The Pyth account for the provided mint was not found");const p=new t.createInstructionV3({name:d,space:l,referrerIdxOpt:-1!=S?S:null}).getInstruction(n.REGISTER_PROGRAM_ID,n.NAME_PROGRAM_ID,n.ROOT_DOMAIN_ACCOUNT,E,N,e.SystemProgram.programId,n.CENTRAL_STATE,A,m,n.PYTH_MAPPING_ACC,new e.PublicKey(f.product),new e.PublicKey(f.price),O,i.TOKEN_PROGRAM_ID,e.SYSVAR_RENT_PUBKEY,y,P);return g.push(p),g};
//# sourceMappingURL=registerDomainName.cjs.map

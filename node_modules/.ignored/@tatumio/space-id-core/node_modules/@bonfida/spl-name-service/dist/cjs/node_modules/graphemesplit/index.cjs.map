{"version":3,"file":"index.cjs","sources":["../../../../node_modules/graphemesplit/index.js"],"sourcesContent":["const types = require(\"./types\");\nconst typeTrieData = require(\"./typeTrie.json\").data;\nconst extPictData = require(\"./extPict.json\").data;\n\nconst UnicodeTrie = require(\"unicode-trie\");\nconst Base64 = require(\"js-base64\").Base64;\n\nconst typeTrie = new UnicodeTrie(Base64.toUint8Array(typeTrieData));\nconst extPict = new UnicodeTrie(Base64.toUint8Array(extPictData));\n\nfunction is(type, bit) {\n  return (type & bit) !== 0;\n}\n\nconst GB11State = {\n  Initial: 0,\n  ExtendOrZWJ: 1,\n  NotBoundary: 2,\n};\n\nfunction nextGraphemeClusterSize(ts, start) {\n  const L = ts.length;\n\n  let ri = 0;\n  let gb11State = GB11State.Initial;\n\n  // GB1: sot ÷ Any\n  for (let i = start; i + 1 < L; i++) {\n    const curr = ts[i + 0];\n    const next = ts[i + 1];\n\n    // for GB12, GB13\n    if (!is(curr, types.Regional_Indicator)) {\n      ri = 0;\n    }\n\n    // for GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\n    switch (gb11State) {\n      case GB11State.NotBoundary:\n      case GB11State.Initial:\n        if (is(curr, types.Extended_Pictographic)) {\n          gb11State = GB11State.ExtendOrZWJ;\n        } else {\n          gb11State = GB11State.Initial;\n        }\n        break;\n      case GB11State.ExtendOrZWJ:\n        if (is(curr, types.Extend)) {\n          gb11State = GB11State.ExtendOrZWJ;\n        } else if (\n          is(curr, types.ZWJ) &&\n          is(next, types.Extended_Pictographic)\n        ) {\n          gb11State = GB11State.NotBoundary;\n        } else {\n          gb11State = GB11State.Initial;\n        }\n        break;\n    }\n\n    // GB3: CR x LF\n    if (is(curr, types.CR) && is(next, types.LF)) {\n      continue;\n    }\n    // GB4: (Control | CR | LF) ÷\n    if (is(curr, types.Control | types.CR | types.LF)) {\n      return i + 1 - start;\n    }\n    // GB5: ÷ (Control | CR | LF)\n    if (is(next, types.Control | types.CR | types.LF)) {\n      return i + 1 - start;\n    }\n    // GB6: L x (L | V | LV | LVT)\n    if (\n      is(curr, types.L) &&\n      is(next, types.L | types.V | types.LV | types.LVT)\n    ) {\n      continue;\n    }\n    // GB7: (LV | V) x (V | T)\n    if (is(curr, types.LV | types.V) && is(next, types.V | types.T)) {\n      continue;\n    }\n    // GB8: (LVT | T) x T\n    if (is(curr, types.LVT | types.T) && is(next, types.T)) {\n      continue;\n    }\n    // GB9: x (Extend | ZWJ)\n    if (is(next, types.Extend | types.ZWJ)) {\n      continue;\n    }\n    // GB9a: x SpacingMark\n    if (is(next, types.SpacingMark)) {\n      continue;\n    }\n    // GB9b: Prepend x\n    if (is(curr, types.Prepend)) {\n      continue;\n    }\n    // GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\n    if (gb11State === GB11State.NotBoundary) {\n      continue;\n    }\n    // GB12: sot (RI RI)* RI x RI\n    // GB13: [^RI] (RI RI)* RI x RI\n    if (\n      is(curr, types.Regional_Indicator) &&\n      is(next, types.Regional_Indicator) &&\n      ri % 2 === 0\n    ) {\n      ri++;\n      continue;\n    }\n    // GB999: Any ÷ Any\n    return i + 1 - start;\n  }\n  // GB2: Any ÷ eot\n  return L - start;\n}\n\nmodule.exports = function split(str) {\n  const graphemeClusters = [];\n\n  const map = [0];\n  const ts = [];\n  for (let i = 0; i < str.length; ) {\n    const code = str.codePointAt(i);\n    ts.push(typeTrie.get(code) | extPict.get(code));\n    i += code > 65535 ? 2 : 1;\n    map.push(i);\n  }\n\n  for (let offset = 0; offset < ts.length; ) {\n    const size = nextGraphemeClusterSize(ts, offset);\n    const start = map[offset];\n    const end = map[offset + size];\n    graphemeClusters.push(str.slice(start, end));\n    offset += size;\n  }\n\n  return graphemeClusters;\n};\n"],"names":["types","require$$0","typeTrieData","require$$1","default","data","extPictData","require$$2","UnicodeTrie","require$$3","Base64","require$$4","base64Exports","typeTrie","toUint8Array","extPict","is","type","bit","GB11State","nextGraphemeClusterSize","ts","start","L","length","ri","gb11State","i","curr","next","Regional_Indicator","Extended_Pictographic","Extend","ZWJ","CR","LF","Control","V","LV","LVT","T","SpacingMark","Prepend","graphemesplit","str","graphemeClusters","map","code","codePointAt","push","get","offset","size","end","slice"],"mappings":"sQAAA,MAAMA,yBAAQC,MACRC,EAAeC,EAA0BC,QAACC,KAC1CC,EAAcC,EAAyBH,QAACC,KAExCG,EAAcC,EAAAA,YACdC,EAASC,EAAoBC,cAACF,OAE9BG,EAAW,IAAIL,EAAYE,EAAOI,aAAaZ,IAC/Ca,EAAU,IAAIP,EAAYE,EAAOI,aAAaR,IAEpD,SAASU,EAAGC,EAAMC,GAChB,OAAwB,IAAhBD,EAAOC,EACjB,CAEA,MAAMC,EACK,EADLA,EAES,EAFTA,EAGS,EAGf,SAASC,EAAwBC,EAAIC,GACnC,MAAMC,EAAIF,EAAGG,OAEb,IAAIC,EAAK,EACLC,EAAYP,EAGhB,IAAK,IAAIQ,EAAIL,EAAOK,EAAI,EAAIJ,EAAGI,IAAK,CAClC,MAAMC,EAAOP,EAAGM,EAAI,GACdE,EAAOR,EAAGM,EAAI,GAQpB,OALKX,EAAGY,EAAM5B,EAAM8B,sBAClBL,EAAK,GAICC,GACN,KAAKP,EACL,KAAKA,EAEDO,EADEV,EAAGY,EAAM5B,EAAM+B,uBACLZ,EAEAA,EAEd,MACF,KAAKA,EAEDO,EADEV,EAAGY,EAAM5B,EAAMgC,QACLb,EAEZH,EAAGY,EAAM5B,EAAMiC,MACfjB,EAAGa,EAAM7B,EAAM+B,uBAEHZ,EAEAA,EAMlB,IAAIH,EAAGY,EAAM5B,EAAMkC,MAAOlB,EAAGa,EAAM7B,EAAMmC,IAAzC,CAIA,GAAInB,EAAGY,EAAM5B,EAAMoC,QAAUpC,EAAMkC,GAAKlC,EAAMmC,IAC5C,OAAOR,EAAI,EAAIL,EAGjB,GAAIN,EAAGa,EAAM7B,EAAMoC,QAAUpC,EAAMkC,GAAKlC,EAAMmC,IAC5C,OAAOR,EAAI,EAAIL,EAGjB,KACEN,EAAGY,EAAM5B,EAAMuB,IACfP,EAAGa,EAAM7B,EAAMuB,EAAIvB,EAAMqC,EAAIrC,EAAMsC,GAAKtC,EAAMuC,MAK5CvB,EAAGY,EAAM5B,EAAMsC,GAAKtC,EAAMqC,IAAMrB,EAAGa,EAAM7B,EAAMqC,EAAIrC,EAAMwC,IAIzDxB,EAAGY,EAAM5B,EAAMuC,IAAMvC,EAAMwC,IAAMxB,EAAGa,EAAM7B,EAAMwC,IAIhDxB,EAAGa,EAAM7B,EAAMgC,OAAShC,EAAMiC,MAI9BjB,EAAGa,EAAM7B,EAAMyC,cAIfzB,EAAGY,EAAM5B,EAAM0C,UAIfhB,IAAcP,GAAlB,CAKA,IACEH,EAAGY,EAAM5B,EAAM8B,sBACfd,EAAGa,EAAM7B,EAAM8B,qBACfL,EAAK,GAAM,EAMb,OAAOE,EAAI,EAAIL,EAJbG,GARD,CAvCA,CAoDF,CAED,OAAOF,EAAID,CACb,CAEA,IAAAqB,EAAiB,SAAeC,GAC9B,MAAMC,EAAmB,GAEnBC,EAAM,CAAC,GACPzB,EAAK,GACX,IAAK,IAAIM,EAAI,EAAGA,EAAIiB,EAAIpB,QAAU,CAChC,MAAMuB,EAAOH,EAAII,YAAYrB,GAC7BN,EAAG4B,KAAKpC,EAASqC,IAAIH,GAAQhC,EAAQmC,IAAIH,IACzCpB,GAAKoB,EAAO,MAAQ,EAAI,EACxBD,EAAIG,KAAKtB,EACV,CAED,IAAK,IAAIwB,EAAS,EAAGA,EAAS9B,EAAGG,QAAU,CACzC,MAAM4B,EAAOhC,EAAwBC,EAAI8B,GACnC7B,EAAQwB,EAAIK,GACZE,EAAMP,EAAIK,EAASC,GACzBP,EAAiBI,KAAKL,EAAIU,MAAMhC,EAAO+B,IACvCF,GAAUC,CACX,CAED,OAAOP,CACT","x_google_ignoreList":[0]}
import"../node_modules/buffer/index.mjs";import{b as e}from"../node_modules/bs58/index.mjs";import{PublicKey as r}from"@solana/web3.js";import{bech32 as o}from"../node_modules/@scure/base/lib/esm/index.mjs";import{decode as t}from"../node_modules/punycode/punycode.es6.mjs";import{i}from"../node_modules/ipaddr.js/lib/ipaddr.mjs";import{RECORD_V1_SIZE as n,Record as s}from"../types/record.mjs";import{InvalidRecordDataError as f}from"../error.mjs";import{checkSolRecord as m}from"./checkSolRecord.mjs";import{__exports as c}from"../_virtual/index.mjs";const d=(d,l,u)=>{const a=null==d?void 0:d.data;if(!a)return;if(0===a.compare(c.Buffer.alloc(a.length)))return;const p=n.get(l),j=(e=>{const r=Array.from(e);return r.length-1-r.reverse().findIndex((e=>0!==e))+1})(a);if(!p){const e=a.slice(0,j).toString("utf-8");return l===s.CNAME||l===s.TXT?t(e):e}if(l===s.SOL){const r=new TextEncoder,o=c.Buffer.concat([a.slice(0,32),u.toBuffer()]),t=r.encode(o.toString("hex"));if(m(t,a.slice(32,96),d.owner))return e.encode(a.slice(0,32))}if(p&&j!==p){const e=a.slice(0,j).toString("utf-8");if(l===s.Injective){const r=o.decodeToBytes(e);if("inj"===r.prefix&&20===r.bytes.length)return e}else if(l===s.BSC||l===s.ETH){const r=e.slice(0,2),o=e.slice(2);if("0x"===r&&20===c.Buffer.from(o,"hex").length)return e}else if((l===s.A||l===s.AAAA)&&i.isValid(e))return e;throw new f("The record data is malformed")}if(l===s.ETH||l===s.BSC)return"0x"+a.slice(0,p).toString("hex");if(l===s.Injective)return o.encode("inj",o.toWords(a.slice(0,p)));if(l===s.A||l===s.AAAA)return i.fromByteArray([...a.slice(0,p)]).toString();if(l===s.Background)return new r(a.slice(0,p)).toString();throw new f("The record data is malformed")};export{d as deserializeRecord};
//# sourceMappingURL=deserializeRecord.mjs.map

{"version":3,"file":"_u64.cjs","sources":["../../../../../../node_modules/@noble/hashes/esm/_u64.js"],"sourcesContent":["const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map"],"names":["U32_MASK64","BigInt","_32n","fromBig","n","le","h","Number","l","split","lst","Ah","Uint32Array","length","Al","i","toBig","shrSH","_l","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64$1"],"mappings":"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","x_google_ignoreList":[0]}
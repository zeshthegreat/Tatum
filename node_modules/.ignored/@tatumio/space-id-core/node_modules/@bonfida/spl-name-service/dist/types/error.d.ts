export declare enum ErrorType {
    SymbolNotFound = "SymbolNotFound",
    InvalidSubdomain = "InvalidSubdomain",
    FavouriteDomainNotFound = "FavouriteDomainNotFound",
    MissingParentOwner = "MissingParentOwner",
    U32Overflow = "U32Overflow",
    InvalidBufferLength = "InvalidBufferLength",
    U64Overflow = "U64Overflow",
    NoRecordData = "NoRecordData",
    InvalidRecordData = "InvalidRecordData",
    UnsupportedRecord = "UnsupportedRecord",
    InvalidEvmAddress = "InvalidEvmAddress",
    InvalidInjectiveAddress = "InvalidInjectiveAddress",
    InvalidARecord = "InvalidARecord",
    InvalidAAAARecord = "InvalidAAAARecord",
    InvalidRecordInput = "InvalidRecordInput",
    InvalidSignature = "InvalidSignature",
    AccountDoesNotExist = "AccountDoesNotExist",
    MultipleRegistries = "MultipleRegistries",
    InvalidReverseTwitter = "InvalidReverseTwitter",
    NoAccountData = "NoAccountData",
    InvalidInput = "InvalidInput",
    InvalidDomain = "InvalidDomain",
    InvalidCustomBg = "InvalidCustomBackground",
    UnsupportedSignature = "UnsupportedSignature",
    RecordDoestNotSupportGuardianSig = "RecordDoestNotSupportGuardianSig",
    RecordIsNotSigned = "RecordIsNotSigned",
    UnsupportedSignatureType = "UnsupportedSignatureType",
    InvalidSolRecordV2 = "InvalidSolRecordV2",
    MissingVerifier = "MissingVerifier",
    PythFeedNotFound = "PythFeedNotFound",
    InvalidRoA = "InvalidRoA",
    InvalidPda = "InvalidPda",
    InvalidParrent = "InvalidParrent",
    NftRecordNotFound = "NftRecordNotFound",
    PdaOwnerNotAllowed = "PdaOwnerNotAllowed",
    DomainDoesNotExist = "DomainDoesNotExist",
    RecordMalformed = "RecordMalformed",
    CouldNotFindNftOwner = "CouldNotFindNftOwner",
    WrongValidation = "WrongValidation"
}
export declare class SNSError extends Error {
    type: ErrorType;
    constructor(type: ErrorType, message?: string);
}
export declare class SymbolNotFoundError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidSubdomainError extends SNSError {
    constructor(message?: string);
}
export declare class FavouriteDomainNotFoundError extends SNSError {
    constructor(message?: string);
}
export declare class MissingParentOwnerError extends SNSError {
    constructor(message?: string);
}
export declare class U32OverflowError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidBufferLengthError extends SNSError {
    constructor(message?: string);
}
export declare class U64OverflowError extends SNSError {
    constructor(message?: string);
}
export declare class NoRecordDataError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidRecordDataError extends SNSError {
    constructor(message?: string);
}
export declare class UnsupportedRecordError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidEvmAddressError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidInjectiveAddressError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidARecordError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidAAAARecordError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidRecordInputError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidSignatureError extends SNSError {
    constructor(message?: string);
}
export declare class AccountDoesNotExistError extends SNSError {
    constructor(message?: string);
}
export declare class MultipleRegistriesError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidReverseTwitterError extends SNSError {
    constructor(message?: string);
}
export declare class NoAccountDataError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidInputError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidDomainError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidCustomBgError extends SNSError {
    constructor(message?: string);
}
export declare class UnsupportedSignatureError extends SNSError {
    constructor(message?: string);
}
export declare class RecordDoestNotSupportGuardianSigError extends SNSError {
    constructor(message?: string);
}
export declare class RecordIsNotSignedError extends SNSError {
    constructor(message?: string);
}
export declare class UnsupportedSignatureTypeError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidSolRecordV2Error extends SNSError {
    constructor(message?: string);
}
export declare class MissingVerifierError extends SNSError {
    constructor(message?: string);
}
export declare class PythFeedNotFoundError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidRoAError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidPdaError extends SNSError {
    constructor(message?: string);
}
export declare class InvalidParrentError extends SNSError {
    constructor(message?: string);
}
export declare class NftRecordNotFoundError extends SNSError {
    constructor(message?: string);
}
export declare class PdaOwnerNotAllowed extends SNSError {
    constructor(message?: string);
}
export declare class DomainDoesNotExist extends SNSError {
    constructor(message?: string);
}
export declare class RecordMalformed extends SNSError {
    constructor(message?: string);
}
export declare class CouldNotFindNftOwner extends SNSError {
    constructor(message?: string);
}
export declare class WrongValidation extends SNSError {
    constructor(message?: string);
}

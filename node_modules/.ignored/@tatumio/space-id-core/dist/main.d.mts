import * as _solana_web3_js from '@solana/web3.js';
import { TatumSdkExtension, ITatumSdkContainer, Network } from '@tatumio/tatum';
import { ethers } from 'ethers';

type CommonOptionalProps = {
    rpcUrl?: string;
};
type GetAddressOptionalProps = CommonOptionalProps & {
    coinType?: number;
};
type GetDomainNameOptionalProps = CommonOptionalProps & {
    multiple?: boolean;
    queryChainIdList?: number[];
    queryTldList?: string[];
};

declare class SpaceIdCore extends TatumSdkExtension {
    private readonly loadBalancer;
    private readonly sdkConfig;
    constructor(tatumSdkContainer: ITatumSdkContainer);
    getAddress(name: string, optional?: GetAddressOptionalProps): Promise<string | _solana_web3_js.PublicKey | null>;
    getDomainName(address: string, optional?: GetDomainNameOptionalProps): Promise<string | null>;
    getDomainNames(address: string, optional?: GetDomainNameOptionalProps): Promise<string[]>;
    getDomainNameBatch(addresses: string[], optional?: GetDomainNameOptionalProps): Promise<{
        address: string;
        domain: string | null;
    }[] | null>;
    getDomainRecord(name: string, key: string, optional?: CommonOptionalProps): Promise<string | null>;
    getMetadata(name: string, optional?: CommonOptionalProps): Promise<any>;
    getContentHash(name: string, optional?: CommonOptionalProps): Promise<string | undefined>;
    isDomainAvailable(name: string, privateKey: string): Promise<boolean>;
    getRegistrationFee(name: string, years: number, privateKey: string): Promise<ethers.BigNumber>;
    registerDomain(name: string, years: number, privateKey: string): Promise<boolean>;
    private validateIfNotSolana;
    private getApiKey;
    private getRegisterClient;
    supportedNetworks: Network[];
}

export { type CommonOptionalProps, type GetAddressOptionalProps, type GetDomainNameOptionalProps, SpaceIdCore };

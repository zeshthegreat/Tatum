"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullSdk = exports.Stellar = exports.CosmosRosetta = exports.CardanoRosetta = exports.AlgorandIndexer = exports.AlgorandAlgod = exports.Ton = exports.Casper = exports.BitcoinElectrs = exports.Rostrum = exports.Iota = exports.Kadena = exports.Tezos = exports.Tron = exports.Eos = exports.Solana = exports.Xrp = exports.Bnb = exports.BaseOther = void 0;
const typedi_1 = require("typedi");
const util_1 = require("../../util");
const address_1 = require("../address");
const ipfs_1 = require("../ipfs");
const nft_1 = require("../nft");
const notification_1 = require("../notification");
const rate_1 = require("../rate");
const token_1 = require("../token");
const tatum_1 = require("./tatum");
class BaseOther extends tatum_1.TatumSdkChain {
    constructor(id) {
        super(id);
        this.ipfs = typedi_1.Container.of(id).get(ipfs_1.Ipfs);
        this.rates = typedi_1.Container.of(id).get(rate_1.Rates);
    }
}
exports.BaseOther = BaseOther;
class Bnb extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
        this.notification = typedi_1.Container.of(id).get(notification_1.Notification);
        this.address = typedi_1.Container.of(id).get(address_1.Address);
    }
}
exports.Bnb = Bnb;
class Xrp extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
        this.notification = typedi_1.Container.of(id).get(notification_1.Notification);
        this.address = typedi_1.Container.of(id).get(address_1.Address);
    }
}
exports.Xrp = Xrp;
class Solana extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
        this.notification = typedi_1.Container.of(id).get(notification_1.Notification);
        this.address = typedi_1.Container.of(id).get(address_1.Address);
    }
}
exports.Solana = Solana;
class Eos extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.Eos = Eos;
class Tron extends BaseOther {
    constructor(id) {
        super(id);
        this.notification = typedi_1.Container.of(id).get(notification_1.Notification);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
        this.address = typedi_1.Container.of(id).get(address_1.AddressTron);
    }
}
exports.Tron = Tron;
class Tezos extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
        this.notification = typedi_1.Container.of(id).get(notification_1.Notification);
        this.address = typedi_1.Container.of(id).get(address_1.AddressTezos);
        this.nft = typedi_1.Container.of(this.id).get(nft_1.NftTezos);
    }
}
exports.Tezos = Tezos;
class Kadena extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.Kadena = Kadena;
class Iota extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.Iota = Iota;
class Rostrum extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.Rostrum = Rostrum;
class BitcoinElectrs extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.BitcoinElectrs = BitcoinElectrs;
class Casper extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.Casper = Casper;
class Ton extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.Ton = Ton;
class AlgorandAlgod extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.AlgorandAlgod = AlgorandAlgod;
class AlgorandIndexer extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.AlgorandIndexer = AlgorandIndexer;
class CardanoRosetta extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.CardanoRosetta = CardanoRosetta;
class CosmosRosetta extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.CosmosRosetta = CosmosRosetta;
class Stellar extends BaseOther {
    constructor(id) {
        super(id);
        this.rpc = util_1.Utils.getRpc(id, typedi_1.Container.of(id).get(util_1.CONFIG));
    }
}
exports.Stellar = Stellar;
class FullSdk extends tatum_1.TatumSdkChain {
    constructor(id) {
        super(id);
        this.notification = typedi_1.Container.of(id).get(notification_1.Notification);
        this.nft = typedi_1.Container.of(id).get(nft_1.Nft);
        this.token = typedi_1.Container.of(id).get(token_1.Token);
        this.address = typedi_1.Container.of(id).get(address_1.Address);
        this.rates = typedi_1.Container.of(id).get(rate_1.Rates);
        this.ipfs = typedi_1.Container.of(id).get(ipfs_1.Ipfs);
    }
}
exports.FullSdk = FullSdk;
//# sourceMappingURL=tatum.other.js.map
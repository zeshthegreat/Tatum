import { GetBlock, GetBlockHashes, GetChainId, GetContract, GetContractBase, GetContractBigMapValue, GetContractsEntrypoints, GetInvalidBlocks, GetProtocol, InjectBlock, InjectOperation, InjectProtocol, PreapplyOperations, SimulateOperation, TezosRpcInterface } from '../../../dto';
import { GetI } from '../../../dto/GetI';
import { PostI } from '../../../dto/PostI';
export declare abstract class AbstractTezosRpc implements TezosRpcInterface {
    protected abstract get<T>(post: GetI): Promise<T>;
    protected abstract post<T>(post: PostI): Promise<T>;
    private sendGet;
    private sendPost;
    getBlock(params: GetBlock): Promise<any>;
    getManagerKey(address: string, params: GetBlock): Promise<any>;
    getConstants(params: GetBlock): Promise<any>;
    getBlockHash(params: GetBlock): Promise<any>;
    getBlockHashes(params: GetBlockHashes): Promise<any>;
    getBlockHeader(params: GetBlock): Promise<any>;
    getBlockShell(params: GetBlock): Promise<any>;
    getBlocksHead(params: GetChainId): Promise<any>;
    getChainId(params: GetChainId): Promise<any>;
    getCheckpoint(params: GetChainId): Promise<any>;
    getConfig(): Promise<any>;
    getContractDelegate(params: GetContractBase): Promise<any>;
    getContract(params: GetContract): Promise<any>;
    getContractBalance(params: GetContractBase): Promise<any>;
    getContractBalanceAndFrozenBonds(params: GetContractBase): Promise<any>;
    getContractBigMapValue(params: GetContractBigMapValue): Promise<any>;
    getContractCounter(params: GetContractBase): Promise<any>;
    getContractEntrypoint(params: GetContractsEntrypoints): Promise<any>;
    getContractEntrypoints(params: GetContract): Promise<any>;
    getContractManagerKey(params: GetContractBase): Promise<any>;
    getContractTickets(params: GetContractBase): Promise<any>;
    getContracts(params: GetBlock): Promise<any>;
    getErrorsSchema(): Promise<any>;
    getHistoryMode(): Promise<any>;
    getInvalidBlocks(params: GetInvalidBlocks): Promise<any>;
    getLevelsCaboose(params: GetChainId): Promise<any>;
    getLevelsCheckpoint(params: GetChainId): Promise<any>;
    getLevelsSavepoint(params: GetChainId): Promise<any>;
    getNetworkDal(): Promise<any>;
    getNodeVersion(): Promise<any>;
    getOperationHashes(params: GetBlock): Promise<any>;
    getOperations(params: GetBlock): Promise<any>;
    getProtocol(params: GetProtocol): Promise<any>;
    getProtocols(params: GetBlock): Promise<any>;
    getUserActivatedProtocolOverrides(): Promise<any>;
    getUserActivatedUpgrades(): Promise<any>;
    isBootstrapped(params: GetChainId): Promise<any>;
    simulateOperation(params: SimulateOperation): Promise<any>;
    preapplyOperations(params: PreapplyOperations): Promise<any>;
    injectOperation(params: InjectOperation): Promise<string>;
    injectBlock(params: InjectBlock): Promise<string>;
    injectProtocol(params: InjectProtocol): Promise<string>;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.networkToCurrency = exports.Currency = void 0;
const Network_1 = require("./Network");
var Currency;
(function (Currency) {
    Currency["ETH"] = "ETH";
    Currency["SOL"] = "SOL";
    Currency["XRP"] = "XRP";
    Currency["MATIC"] = "MATIC";
    Currency["CELO"] = "CELO";
    Currency["KLAY"] = "KLAY";
    Currency["BTC"] = "BTC";
    Currency["LTC"] = "LTC";
    Currency["BCH"] = "BCH";
    Currency["DOGE"] = "DOGE";
    Currency["TRON"] = "TRON";
    Currency["BSC"] = "BSC";
    Currency["TEZOS"] = "TEZOS";
    Currency["EON"] = "EON";
    Currency["CHZ"] = "CHZ";
    Currency["ALGO"] = "ALGO";
    Currency["ADA"] = "ADA";
    Currency["VET"] = "VET";
    Currency["FLOW"] = "FLOW";
    Currency["XDC"] = "XDC";
    Currency["XLM"] = "XLM";
    Currency["BNB"] = "BNB";
    Currency["ONE"] = "ONE";
    Currency["EOS"] = "EOS";
    Currency["AVAX"] = "AVAX";
    Currency["FTM"] = "FTM";
    Currency["ARB"] = "ARB";
    Currency["OP"] = "OP";
    Currency["NEAR"] = "NEAR";
    Currency["RSK"] = "RSK";
    Currency["AURORA"] = "AURORA";
    Currency["XOS"] = "XOS";
    Currency["ZCASH"] = "ZCASH";
    Currency["ZEC"] = "ZEC";
    Currency["PALM"] = "PALM";
    Currency["ZIL"] = "ZIL";
    Currency["ETC"] = "ETC";
    Currency["FLR"] = "FLR";
    Currency["SGB"] = "SGB";
    Currency["ISLM"] = "ISLM";
    Currency["ZEN"] = "ZEN";
    Currency["GNO"] = "GNO";
    Currency["CRO"] = "CRO";
    Currency["KCS"] = "KCS";
    Currency["EGLD"] = "EGLD";
    Currency["DOT"] = "DOT";
    Currency["BASE"] = "BASE";
    Currency["KADENA"] = "KADENA";
    Currency["ATOM"] = "ATOM";
    Currency["IOTA"] = "IOTA";
    Currency["CSPR"] = "CSPR";
    Currency["TON"] = "TON";
    Currency["ZKS"] = "ZKS";
})(Currency || (exports.Currency = Currency = {}));
function networkToCurrency(network) {
    switch (network) {
        case Network_1.Network.ETHEREUM:
        case Network_1.Network.ETHEREUM_SEPOLIA:
            return Currency.ETH;
        case Network_1.Network.BITCOIN:
        case Network_1.Network.BITCOIN_TESTNET:
            return Currency.BTC;
        case Network_1.Network.DOGECOIN:
        case Network_1.Network.DOGECOIN_TESTNET:
            return Currency.DOGE;
        case Network_1.Network.LITECOIN:
        case Network_1.Network.LITECOIN_TESTNET:
            return Currency.LTC;
        default:
            throw new Error(`Unsupported network ${network}`);
    }
}
exports.networkToCurrency = networkToCurrency;
//# sourceMappingURL=Currency.js.map
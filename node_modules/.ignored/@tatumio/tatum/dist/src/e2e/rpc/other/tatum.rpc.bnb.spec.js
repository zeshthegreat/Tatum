"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const service_1 = require("../../../service");
const e2e_util_1 = require("../../e2e.util");
const getBnbRpc = async () => await service_1.TatumSDK.init(e2e_util_1.e2eUtil.initConfig(service_1.Network.BNB));
// Testnet is not available
describe.skip('Bnb', () => {
    describe('mainnet', () => {
        it('block', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.block();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('abciInfo', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.abciInfo();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('blockchain', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.blockchain();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('health', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.health();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('genesis', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.genesis();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('validators', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.validators();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('unconfirmedTxs', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.unconfirmedTxs({ limit: '1' });
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('raw rpc call', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.rawRpcCall({ method: 'block', id: 1, jsonrpc: '2.0', params: {} });
            await tatum.destroy();
            expect(result).toBeDefined();
        });
    });
});
//# sourceMappingURL=tatum.rpc.bnb.spec.js.map
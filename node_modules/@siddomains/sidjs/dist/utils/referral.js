"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getReferralSignature = getReferralSignature;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _index = require("./index");
var emptySignature = [_index.emptyAddress, '0x0000000000000000000000000000000000000000000000000000000000000000', 0, 0, '0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'];
function getGraphQLUrl(chainId) {
  if (chainId === 56 || chainId === 42161) {
    return 'https://graphigo.prd.space.id/query';
  }
  return 'https://graphigo.dev.space.id/query';
}
function getReferralSignature(_x, _x2) {
  return _getReferralSignature.apply(this, arguments);
}
function _getReferralSignature() {
  _getReferralSignature = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(domain, chainId) {
    var _resJson$data, res, resJson, signReferral;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!domain || !chainId)) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return", emptySignature);
          case 2:
            _context.prev = 2;
            _context.next = 5;
            return fetch(getGraphQLUrl(chainId), {
              method: 'POST',
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                query: "{\n                        signReferral(domain:\"".concat(domain, "\", chainId: ").concat(chainId, ") {\n                            signature\n                            referrerAddress\n                            signedAt\n                            referrerCount\n                        }\n                    }")
              })
            });
          case 5:
            res = _context.sent;
            _context.next = 8;
            return res.json();
          case 8:
            resJson = _context.sent;
            signReferral = resJson === null || resJson === void 0 ? void 0 : (_resJson$data = resJson.data) === null || _resJson$data === void 0 ? void 0 : _resJson$data.signReferral;
            if (!signReferral) {
              _context.next = 14;
              break;
            }
            return _context.abrupt("return", [signReferral.referrerAddress, (0, _index.namehash)(domain), signReferral.referrerCount, signReferral.signedAt, signReferral.signature]);
          case 14:
            throw new Error('sign referral fail');
          case 15:
            _context.next = 21;
            break;
          case 17:
            _context.prev = 17;
            _context.t0 = _context["catch"](2);
            console.error(_context.t0);
            throw new Error('sign referral fail');
          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 17]]);
  }));
  return _getReferralSignature.apply(this, arguments);
}
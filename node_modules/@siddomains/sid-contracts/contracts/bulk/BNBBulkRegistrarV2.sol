// SPDX-License-Identifier: MIT
pragma solidity >=0.8.4;
import "./IBNBBulkRegistrarV2.sol";
import "../bnbregistrar/BNBRegistrarControllerV10.sol";
import "../price-oracle/ISidPriceOracle.sol";
import {ReferralInfo} from "../struct/SidStruct.sol";

contract BNBBulkRegistrarV2 is IBNBBulkRegistrarV2 {
    BNBRegistrarControllerV10 public immutable registrarController;

    constructor(BNBRegistrarControllerV10 _registrarController) {
        registrarController = _registrarController;
    }

    function bulkRentPrice(string[] calldata names, uint256 duration) external view override returns (uint256 total) {
        for (uint256 i = 0; i < names.length; i++) {
            ISidPriceOracle.Price memory price = registrarController.rentPrice(names[i], duration);
            total += (price.base + price.premium);
        }
    }

    function bulkMakeCommitmentWithConfig(string[] calldata name, address owner, bytes32 secret) external view override returns (bytes32[] memory commitments) {
        commitments = new bytes32[](name.length);
        for (uint256 i = 0; i < name.length; i++) {
            commitments[i] = registrarController.makeCommitment(name[i], owner, secret);
        }
        return commitments;
    }

    function bulkCommit(bytes32[] calldata commitments) external override {
        for (uint256 i = 0; i < commitments.length; i++) {
            registrarController.commit(commitments[i]);
        }
    }

    function commitment(bytes32 commit) external view override returns (uint256) {
        return registrarController.commitments(commit);
    }

    function bulkRegister(string[] calldata names, address owner, uint duration, bytes32 secret, address resolver, bool isUseGiftCard, ReferralInfo calldata referralInfo) external payable {
        uint256 cost = 0;
        for (uint256 i = 0; i < names.length; i++) {
            ISidPriceOracle.Price memory price;
            if (isUseGiftCard) {
                price = registrarController.rentPriceWithPointRedemption(names[i], duration, msg.sender);
            } else {
                price = registrarController.rentPrice(names[i], duration);
            }

            registrarController.registerWithConfigAndPoint{value: (price.base + price.premium)}(names[i], owner, duration, secret, resolver, isUseGiftCard, referralInfo);
            cost = cost + price.base + price.premium;
        }

        // Refund any extra payment
        if (msg.value > cost) {
            (bool sent, ) = msg.sender.call{value: msg.value - cost}("");
            require(sent, "Failed to send Ether");
        }
    }
}

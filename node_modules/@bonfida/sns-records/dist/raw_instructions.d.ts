import { PublicKey, TransactionInstruction } from "@solana/web3.js";
export interface AccountKey {
    pubkey: PublicKey;
    isSigner: boolean;
    isWritable: boolean;
}
export declare class allocateAndPostRecordInstruction {
    tag: number;
    record: string;
    content: number[];
    static schema: {
        struct: {
            tag: string;
            record: string;
            content: {
                array: {
                    type: string;
                };
            };
        };
    };
    constructor(obj: {
        record: string;
        content: number[];
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, systemProgram: PublicKey, splNameServiceProgram: PublicKey, feePayer: PublicKey, record: PublicKey, domain: PublicKey, domainOwner: PublicKey, centralState: PublicKey): TransactionInstruction;
}
export declare class validateEthereumSignatureInstruction {
    tag: number;
    validation: number;
    signature: number[];
    expectedPubkey: number[];
    static schema: {
        struct: {
            tag: string;
            validation: string;
            signature: {
                array: {
                    type: string;
                };
            };
            expectedPubkey: {
                array: {
                    type: string;
                };
            };
        };
    };
    constructor(obj: {
        validation: number;
        signature: number[];
        expectedPubkey: number[];
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, systemProgram: PublicKey, splNameServiceProgram: PublicKey, feePayer: PublicKey, record: PublicKey, domain: PublicKey, domainOwner: PublicKey, centralState: PublicKey): TransactionInstruction;
}
export declare class allocateRecordInstruction {
    tag: number;
    contentLength: number;
    record: string;
    static schema: {
        struct: {
            tag: string;
            contentLength: string;
            record: string;
        };
    };
    constructor(obj: {
        contentLength: number;
        record: string;
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, systemProgram: PublicKey, splNameServiceProgram: PublicKey, feePayer: PublicKey, record: PublicKey, domain: PublicKey, domainOwner: PublicKey, centralState: PublicKey): TransactionInstruction;
}
export declare class validateSolanaSignatureInstruction {
    tag: number;
    staleness: boolean;
    static schema: {
        struct: {
            tag: string;
            staleness: string;
        };
    };
    constructor(obj: {
        staleness: boolean;
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, systemProgram: PublicKey, splNameServiceProgram: PublicKey, feePayer: PublicKey, record: PublicKey, domain: PublicKey, domainOwner: PublicKey, centralState: PublicKey, verifier: PublicKey): TransactionInstruction;
}
export declare class editRecordInstruction {
    tag: number;
    record: string;
    content: number[];
    static schema: {
        struct: {
            tag: string;
            record: string;
            content: {
                array: {
                    type: string;
                };
            };
        };
    };
    constructor(obj: {
        record: string;
        content: number[];
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, systemProgram: PublicKey, splNameServiceProgram: PublicKey, feePayer: PublicKey, record: PublicKey, domain: PublicKey, domainOwner: PublicKey, centralState: PublicKey): TransactionInstruction;
}
export declare class deleteRecordInstruction {
    tag: number;
    static schema: {
        struct: {
            tag: string;
        };
    };
    constructor();
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, systemProgram: PublicKey, splNameServiceProgram: PublicKey, feePayer: PublicKey, record: PublicKey, domain: PublicKey, domainOwner: PublicKey, centralState: PublicKey): TransactionInstruction;
}
export declare class writeRoaInstruction {
    tag: number;
    roaId: number[];
    static schema: {
        struct: {
            tag: string;
            roaId: {
                array: {
                    type: string;
                };
            };
        };
    };
    constructor(obj: {
        roaId: number[];
    });
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, systemProgram: PublicKey, splNameServiceProgram: PublicKey, feePayer: PublicKey, record: PublicKey, domain: PublicKey, domainOwner: PublicKey, centralState: PublicKey): TransactionInstruction;
}
export declare class unverifyRoaInstruction {
    tag: number;
    static schema: {
        struct: {
            tag: string;
        };
    };
    constructor();
    serialize(): Uint8Array;
    getInstruction(programId: PublicKey, systemProgram: PublicKey, splNameServiceProgram: PublicKey, feePayer: PublicKey, record: PublicKey, domain: PublicKey, centralState: PublicKey, verifier: PublicKey): TransactionInstruction;
}

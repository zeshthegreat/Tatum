/// <reference types="node" />
import { Schema } from "borsh";
import { Connection, PublicKey } from "@solana/web3.js";
export declare const NAME_REGISTRY_LEN = 96;
export declare enum Validation {
    None = 0,
    Solana = 1,
    Ethereum = 2,
    UnverifiedSolana = 3
}
export declare const getValidationLength: (validation: Validation) => 0 | 20 | 32;
export declare class RecordHeader {
    stalenessValidation: number;
    rightOfAssociationValidation: number;
    contentLength: number;
    static LEN: number;
    static schema: Schema;
    constructor(obj: {
        stalenessValidation: number;
        rightOfAssociationValidation: number;
        contentLength: number;
    });
    static deserialize(data: Buffer): RecordHeader;
    static retrieve(connection: Connection, key: PublicKey): Promise<RecordHeader>;
}
export declare class Record {
    header: RecordHeader;
    data: Buffer;
    constructor(header: RecordHeader, data: Buffer);
    static deserialize(buffer: Buffer): Record;
    static retrieve(connection: Connection, key: PublicKey): Promise<Record>;
    static retrieveBatch(connection: Connection, keys: PublicKey[]): Promise<(Record | undefined)[]>;
    getContent(): Buffer;
    getStalenessId(): Buffer;
    getRoAId(): Buffer;
}

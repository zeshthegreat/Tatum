/// <reference types="node" />
import { Record } from "./types/record";
import { Connection, PublicKey } from "@solana/web3.js";
import { NameRegistryState } from "./state";
import { Buffer } from "buffer";
/**
 * This function can be used to verify the validity of a SOL record
 * @param record The record data to verify
 * @param signedRecord The signed data
 * @param pubkey The public key of the signer
 * @returns
 */
export declare const checkSolRecord: (record: Uint8Array, signedRecord: Uint8Array, pubkey: PublicKey) => boolean;
/**
 * This function can be used to derive a record key
 * @param domain The .sol domain name
 * @param record The record to derive the key for
 * @returns
 */
export declare const getRecordKeySync: (domain: string, record: Record) => PublicKey;
export declare function getRecord(connection: Connection, domain: string, record: Record, deserialize: true): Promise<string | undefined>;
export declare function getRecord(connection: Connection, domain: string, record: Record, deserialize?: false): Promise<NameRegistryState | undefined>;
export declare function getRecords(connection: Connection, domain: string, records: Record[], deserialize: true): Promise<string[]>;
export declare function getRecords(connection: Connection, domain: string, records: Record[], deserialize?: false): Promise<NameRegistryState[]>;
/**
 * This function can be used to retrieve the IPFS record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getIpfsRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the Arweave record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getArweaveRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the ETH record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getEthRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the BTC record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getBtcRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the LTC record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getLtcRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the DOGE record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getDogeRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the email record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getEmailRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the URL record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getUrlRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the Discord record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getDiscordRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the Github record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getGithubRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the Reddit record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getRedditRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the Twitter record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getTwitterRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the Telegram record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getTelegramRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the pic record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getPicRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the SHDW record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getShdwRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the SOL record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getSolRecord: (connection: Connection, domain: string) => Promise<NameRegistryState | undefined>;
/**
 * This function can be used to retrieve the POINT record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getPointRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the BSC record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getBscRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the Injective record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getInjectiveRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to retrieve the Backpack record of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getBackpackRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**

 * This function can be used to deserialize the content of a record. If the content is invalid it will throw an error
 * This function can be used to retrieve the Background record (V1) of a domain name
 * @param connection The Solana RPC connection object
 * @param domain The .sol domain name
 * @returns
 */
export declare const getBackgroundRecord: (connection: Connection, domain: string) => Promise<string | undefined>;
/**
 * This function can be used to deserialize the content of a record (V1). If the content is invalid it will throw an error
 * @param registry The name registry state object of the record being deserialized
 * @param record The record enum being deserialized
 * @param recordKey The public key of the record being deserialized
 * @returns
 */
export declare const deserializeRecord: (registry: NameRegistryState | undefined, record: Record, recordKey: PublicKey) => string | undefined;
/**
 * This function can be used to serialize a user input string into a buffer that will be stored into a record account data
 * For serializing SOL records use `serializeSolRecord`
 * @param str The string being serialized into the record account data
 * @param record The record enum being serialized
 * @returns
 */
export declare const serializeRecord: (str: string, record: Record) => Buffer;
/**
 * This function can be used to build the content of a SOL record
 * @param content The public key being stored in the SOL record
 * @param recordKey The record public key
 * @param signer The signer of the record i.e the domain owner
 * @param signature The signature of the record's content
 * @returns
 */
export declare const serializeSolRecord: (content: PublicKey, recordKey: PublicKey, signer: PublicKey, signature: Uint8Array) => Buffer;

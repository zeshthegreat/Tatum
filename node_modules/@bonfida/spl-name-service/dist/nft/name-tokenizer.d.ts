/// <reference types="node" />
import { Connection, PublicKey } from "@solana/web3.js";
import { Buffer } from "buffer";
export declare const NAME_TOKENIZER_ID: PublicKey;
export declare const MINT_PREFIX: Buffer;
export declare const getDomainMint: (domain: PublicKey) => PublicKey;
export declare enum Tag {
    Uninitialized = 0,
    CentralState = 1,
    ActiveRecord = 2,
    InactiveRecord = 3
}
export declare class NftRecord {
    tag: Tag;
    nonce: number;
    nameAccount: PublicKey;
    owner: PublicKey;
    nftMint: PublicKey;
    static schema: {
        struct: {
            tag: string;
            nonce: string;
            nameAccount: {
                array: {
                    type: string;
                    len: number;
                };
            };
            owner: {
                array: {
                    type: string;
                    len: number;
                };
            };
            nftMint: {
                array: {
                    type: string;
                    len: number;
                };
            };
        };
    };
    constructor(obj: {
        tag: number;
        nonce: number;
        nameAccount: Uint8Array;
        owner: Uint8Array;
        nftMint: Uint8Array;
    });
    static deserialize(data: Buffer): NftRecord;
    static retrieve(connection: Connection, key: PublicKey): Promise<NftRecord>;
    static findKey(nameAccount: PublicKey, programId: PublicKey): Promise<[PublicKey, number]>;
}
/**
 * This function can be used to retrieve a NFT Record given a mint
 *
 * @param connection A solana RPC connection
 * @param mint The mint of the NFT Record
 * @returns
 */
export declare const getRecordFromMint: (connection: Connection, mint: PublicKey) => Promise<import("@solana/web3.js").GetProgramAccountsResponse>;

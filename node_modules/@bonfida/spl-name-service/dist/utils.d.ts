/// <reference types="node" />
import { Connection, PublicKey } from "@solana/web3.js";
import { Buffer } from "buffer";
import { ErrorType } from "./error";
import { RecordVersion } from "./types/record";
export declare const getHashedNameSync: (name: string) => Buffer;
export declare const getNameAccountKeySync: (hashed_name: Buffer, nameClass?: PublicKey, nameParent?: PublicKey) => PublicKey;
/**
 * This function can be used to perform a reverse look up
 * @param connection The Solana RPC connection
 * @param nameAccount The public key of the domain to look up
 * @returns The human readable domain name
 */
export declare function reverseLookup(connection: Connection, nameAccount: PublicKey): Promise<string>;
/**
 * This function can be used to perform a reverse look up
 * @param connection The Solana RPC connection
 * @param nameAccount The public keys of the domains to look up
 * @returns The human readable domain names
 */
export declare function reverseLookupBatch(connection: Connection, nameAccounts: PublicKey[]): Promise<(string | undefined)[]>;
/**
 *
 * @param connection The Solana RPC connection object
 * @param parentKey The parent you want to find sub-domains for
 * @returns
 */
export declare const findSubdomains: (connection: Connection, parentKey: PublicKey) => Promise<string[]>;
/**
 * This function can be used to compute the public key of a domain or subdomain
 * @param domain The domain to compute the public key for (e.g `bonfida.sol`, `dex.bonfida.sol`)
 * @param record Optional parameter: If the domain being resolved is a record
 * @returns
 */
export declare const getDomainKeySync: (domain: string, record?: RecordVersion) => {
    isSub: boolean;
    parent: PublicKey;
    pubkey: PublicKey;
    hashed: Buffer;
} | {
    isSub: boolean;
    parent: PublicKey;
    isSubRecord: boolean;
    pubkey: PublicKey;
    hashed: Buffer;
} | {
    isSub: boolean;
    parent: undefined;
    pubkey: PublicKey;
    hashed: Buffer;
};
/**
 * This function can be used to retrieve all domain names owned by `wallet`
 * @param connection The Solana RPC connection object
 * @param wallet The wallet you want to search domain names for
 * @returns
 */
export declare function getAllDomains(connection: Connection, wallet: PublicKey): Promise<PublicKey[]>;
/**
 * This function can be used to retrieve all domain names owned by `wallet` in a human readable format
 * @param connection The Solana RPC connection object
 * @param wallet The wallet you want to search domain names for
 * @returns Array of pubkeys and the corresponding human readable domain names
 */
export declare function getDomainKeysWithReverses(connection: Connection, wallet: PublicKey): Promise<{
    pubKey: PublicKey;
    domain: string | undefined;
}[]>;
/**
 * This function can be used to retrieve all the registered `.sol` domains.
 * The account data is sliced to avoid enormous payload and only the owner is returned
 * @param connection The Solana RPC connection object
 * @returns
 */
export declare const getAllRegisteredDomains: (connection: Connection) => Promise<import("@solana/web3.js").GetProgramAccountsResponse>;
/**
 * This function can be used to get the key of the reverse account
 * @param domain The domain to compute the reverse for
 * @param isSub Whether the domain is a subdomain or not
 * @returns The public key of the reverse account
 */
export declare const getReverseKeySync: (domain: string, isSub?: boolean) => PublicKey;
/**
 * This function can be used to get the reverse key from a domain key
 * @param domainKey The domain key to compute the reverse for
 * @param parent The parent public key
 * @returns The public key of the reverse account
 */
export declare const getReverseKeyFromDomainKey: (domainKey: PublicKey, parent?: PublicKey) => PublicKey;
export declare const check: (bool: boolean, errorType: ErrorType) => void;
/**
 * This function can be used to retrieve all the tokenized domains of an owner
 * @param connection The Solana RPC connection object
 * @param owner The owner of the tokenized domains
 * @returns
 */
export declare const getTokenizedDomains: (connection: Connection, owner: PublicKey) => Promise<{
    key: PublicKey;
    mint: PublicKey;
    reverse: string | undefined;
}[]>;
/**
 * This function can be used to retrieve the registration cost in USD of a domain
 * from its name
 * @param name - Domain name
 * @returns price
 */
export declare const getDomainPriceFromName: (name: string) => 20 | 160 | 750 | 700 | 640;
export declare function deserializeReverse(data: Buffer): string;
export declare function deserializeReverse(data: undefined): undefined;
export declare const getPythFeedAccountKey: (shard: number, priceFeed: number[]) => [PublicKey, number];
